{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sisa AI Travel Assistant\n\n## Overview\n\nThis is a full-stack travel assistant application powered by AI that provides a multi-agent system for comprehensive travel planning. The application features a React frontend with TypeScript, Express.js backend, PostgreSQL database with Drizzle ORM, and integrates with OpenAI for AI capabilities and Pinecone for vector database functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Runtime**: Node.js with ESM modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL store\n- **API Design**: RESTful API with structured error handling\n\n### Multi-Agent System\nThe application implements a sophisticated multi-agent architecture:\n- **Research Agent**: Handles destination research and travel data gathering\n- **Planner Agent**: Creates detailed travel itineraries\n- **Recommendation Agent**: Provides personalized travel recommendations\n- **Customer Service Agent**: Handles user support and assistance\n- **LangGraph Orchestrator**: Coordinates agent interactions and workflow\n\n## Key Components\n\n### Database Schema\n- **Users**: Stores user profiles with travel preferences and history\n- **Conversations**: Manages chat conversations with active agent tracking\n- **Messages**: Stores conversation messages with agent attribution\n- **Travel Searches**: Tracks user search history and preferences\n- **System Logs**: Maintains audit trail and system monitoring\n- **Sessions**: Handles user authentication sessions\n\n### AI Integration\n- **OpenAI Service**: Integrates GPT-4o for natural language processing\n- **Pinecone Service**: Vector database for RAG (Retrieval-Augmented Generation)\n- **Agent Services**: Specialized AI agents for different travel domains\n\n### Authentication System\n- **Replit Auth**: Integrated OpenID Connect authentication\n- **Session Management**: Secure session handling with PostgreSQL backend\n- **User Profile**: Automatic user creation and profile management\n\n## Data Flow\n\n1. **User Authentication**: Users authenticate through Replit Auth system\n2. **Conversation Management**: System creates or retrieves conversations\n3. **Message Processing**: User messages are processed by appropriate AI agents\n4. **AI Agent Orchestration**: LangGraph coordinates multi-agent responses\n5. **Response Generation**: AI generates contextual responses using OpenAI and RAG\n6. **Data Persistence**: All interactions are stored in PostgreSQL database\n\n## External Dependencies\n\n### Primary Services\n- **OpenAI API**: For language model capabilities (GPT-4o)\n- **Pinecone**: Vector database for semantic search and RAG\n- **Neon Database**: PostgreSQL database hosting\n- **Replit Auth**: Authentication service\n\n### Development Dependencies\n- **Vite**: Frontend build tool and development server\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Backend bundling for production\n- **TypeScript**: Type checking and compilation\n\n## Deployment Strategy\n\n### Development Mode\n- Frontend served by Vite dev server with HMR\n- Backend runs with tsx for TypeScript execution\n- Database migrations handled by Drizzle Kit\n\n### Production Build\n- Frontend built with Vite and served as static files\n- Backend bundled with ESBuild for Node.js execution\n- Database schema pushed using Drizzle migrations\n\n### Environment Configuration\n- `DATABASE_URL`: PostgreSQL connection string\n- `OPENAI_API_KEY`: OpenAI API access\n- `PINECONE_API_KEY`: Pinecone vector database access\n- `SESSION_SECRET`: Session encryption key\n- `REPLIT_DOMAINS`: Authentication domain configuration\n\nThe application follows a monorepo structure with shared TypeScript types and schemas, enabling type safety across the full stack while maintaining clear separation of concerns between frontend, backend, and shared utilities.","size_bytes":4484},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/Sisa_AI-Agente_Definitivo_del_Sector_Turístico_Global_1752409496142.md":{"content":"# **Sisa AI: Un Plan Maestro para el Agente Definitivo del Sector Turístico Global**\n\n## **1\\. Resumen Ejecutivo**\n\nSisa AI se concibe como el agente de inteligencia artificial definitivo, omnisciente y omnipresente, destinado a revolucionar el sector global de viajes y turismo. Su visión es ofrecer una experiencia de principio a fin, hiperpersonalizada para los viajeros, al tiempo que optimiza las operaciones para las empresas del sector. El potencial transformador de Sisa AI radica en su capacidad para unificar servicios de viaje dispares, proporcionar asistencia proactiva y adaptarse dinámicamente a las necesidades de los usuarios y del mercado, trascendiendo las soluciones fragmentadas actuales.\n\nLa arquitectura propuesta para Sisa AI se basa en un sofisticado sistema de equipos multiagente orquestado por un agente central \"omnisciente\". Este sistema aprovechará LangGraph para flujos de trabajo con estado, LangChain para el desarrollo de agentes y la integración de herramientas, y el Protocolo de Contexto de Modelo (MCP) para una comunicación fluida entre agentes. La integración de Generación Aumentada por Recuperación (RAG) garantizará una recuperación profunda del conocimiento y las capacidades de IA de voz (STT/TTS) permitirán una interacción natural. El modelo de negocio se estructurará en dos capas: un modelo freemium/suscripción para los usuarios finales y planes escalonados/comisiones para las empresas, todo ello respaldado por un sistema CRM impulsado por IA.\n\n## **2\\. Oportunidad de Mercado y Tesis: El Amanecer de Sisa AI**\n\n### **Panorama del Mercado Global de Turismo: Tamaño, Crecimiento y Tendencias (2025-2037)**\n\nEl mercado global de turismo fue valorado en 686.32 mil millones de USD en 2024 y se proyecta que alcance los 726.26 mil millones de USD en 2025\\. Se espera que esta cifra crezca hasta los 1431.88 mil millones de USD para finales de 2037, demostrando una sólida Tasa de Crecimiento Anual Compuesto (CAGR) del 5.82% durante el período de pronóstico de 2025-2037. Este crecimiento está impulsado por el aumento de los ingresos disponibles de las personas en todo el mundo y los esfuerzos gubernamentales para promover el turismo, incluyendo campañas publicitarias y ferias internacionales. Las llegadas internacionales a Estados Unidos, por ejemplo, se pronostica que aumentarán un 6.5% hasta los 77.1 millones en 2025, superando los niveles previos a la pandemia para 2026\\. En Europa, el sector de viajes y turismo alcanzó los 1.65 billones de USD en mayo de 2024\\.  \n\nUn análisis más profundo revela que el mercado de la IA en el turismo está experimentando una expansión aún más rápida. Se estimó en 3,373.0 millones de USD en 2024 y se proyecta que alcance los 13,868.8 millones de USD para 2030, con una CAGR significativa del 26.7% entre 2025 y 2030\\. Esta diferencia en las tasas de crecimiento es notable: el mercado de la IA en el turismo crece casi cinco veces más rápido que el mercado general del turismo. Esto indica que la IA no es simplemente una mejora marginal, sino un impulsor fundamental de nuevo valor y eficiencia dentro del sector. La capacidad demostrada de la IA para mejorar la experiencia del cliente, optimizar las operaciones y abrir nuevas vías de ingresos la convierte en una inversión crítica para la ventaja competitiva. Esto sugiere que las empresas están buscando y adoptando activamente soluciones de IA, creando un terreno fértil para una plataforma integral como Sisa AI.  \n\nLa aceleración en la adopción de la IA en el turismo, a pesar del escepticismo inicial que consideraba los viajes como una experiencia inherentemente humana , señala una ventana de oportunidad crucial para un agente de IA \"definitivo\". El cambio de sentimiento y el aumento de la inversión en IA por parte de la industria implican que los pioneros con soluciones de IA robustas y completas capturarán una cuota de mercado significativa. Sisa AI, al aspirar a ser el agente \"definitivo\", está posicionada para capitalizar esta tendencia acelerada, siempre que pueda superar los desafíos de implementación y generar confianza. El mercado no solo está listo para la IA, sino que busca activamente soluciones de IA transformadoras.  \n\nA continuación, se presenta una tabla que resume las proyecciones del mercado global de turismo y de la IA en el turismo:\n\n| Atributo del Informe | Detalles |\n| :---- | :---- |\n| Año Base | 2024 |\n| Año de Pronóstico | 2025-2037 |\n| Tamaño del Mercado Global de Turismo (2024) | 686.32 mil millones de USD   |\n| Tamaño del Mercado Global de Turismo (2037) | 1431.88 mil millones de USD   |\n| CAGR del Mercado Global de Turismo (2025-2037) | 5.82%   |\n| Tamaño del Mercado de IA en Turismo (2024) | 3,373.0 millones de USD   |\n| Tamaño del Mercado de IA en Turismo (2030) | 13,868.8 millones de USD   |\n| CAGR del Mercado de IA en Turismo (2025-2030) | 26.7%   |\n\n### **Estado Actual de la IA en Viajes: Aplicaciones y Limitaciones**\n\nLas aplicaciones actuales de la IA en el sector turístico son diversas y abarcan múltiples facetas de la experiencia del viajero y la operación empresarial. Incluyen la mejora del servicio al cliente mediante chatbots y asistentes virtuales que ofrecen soporte 24/7, clasificación y priorización de solicitudes, y resolución de problemas de extremo a extremo. También se utilizan para optimizar las operaciones, como el check-in/out automatizado, la gestión de inventario, la planificación de la limpieza y la optimización de los niveles de personal basados en la demanda, así como la conciliación de pagos.  \n\nLa personalización es un área clave, con la IA anticipando las preferencias de los huéspedes hasta el más mínimo detalle, recomendando opciones de comidas, sugiriendo lugares para visitar y creando ofertas de viaje hiperpersonalizadas basadas en viajes anteriores y preferencias conocidas. La fijación de precios dinámica y la prevención de fraudes también son casos de uso importantes. Además, la IA contribuye a la generación de contenido, como guías de viaje personalizadas y la creación de elementos visuales y de audio inmersivos para promocionar destinos. Ejemplos notables incluyen los plugins de ChatGPT para reservas (Expedia, Kayak), hoteles inteligentes impulsados por IA (citizenM, Lucy de Virgin), Trip Planner AI para itinerarios, Mindtrip para planificación y reserva, y Gondola para la integración de puntos de fidelidad.  \n\nA pesar de estos avances, existen limitaciones significativas. Las herramientas de IA a menudo proporcionan información desactualizada y son propensas a \"alucinaciones\", es decir, a inventar hechos. Esto plantea un desafío directo a la promesa de precisión y fiabilidad que la IA ofrece. La causa de estas alucinaciones a menudo reside en la naturaleza de los Grandes Modelos de Lenguaje (LLM) que, aunque entrenados con vastos datos, pueden ser desactualizados o generar información plausible pero incorrecta. Además, la integración de la planificación de IA con la reserva directa sigue siendo una tarea ardua , y la integración con sistemas heredados complejos y datos fragmentados presenta desafíos operativos. La visibilidad incompleta o inconsistente en los sistemas multiagente también dificulta la depuración y la resolución de problemas. Para Sisa AI, esto subraya la necesidad de priorizar una implementación robusta de RAG y marcos avanzados de observabilidad, como la integración de LangSmith con LangGraph Platform , para garantizar la precisión de los datos y la fiabilidad del sistema, construyendo así la confianza de usuarios y empresas.  \n\n### **Identificación de Brechas: Lo que Sisa AI Hará que Otros No Han Hecho**\n\nLas soluciones existentes en el mercado de viajes y turismo a menudo están aisladas o se centran en aspectos específicos, como la planificación de itinerarios *o* la reserva, *o* el servicio al cliente. Actualmente, ninguna plataforma única ofrece un sistema multiagente verdaderamente \"omnisciente y omnipresente\" que orqueste  \n\n*todo* el proceso turístico global, conectando sin problemas a usuarios y empresas con pagos, cumplimiento y calificación integrados en múltiples plataformas (móvil, web, escritorio).\n\nLa investigación actual sobre sistemas multiagente a menudo se enfoca en algoritmos de planificación específicos o en la colaboración interna entre agentes , pero no necesariamente en un modelo de mercado global con una integración profunda en diversos proveedores externos y una capa multiagente dual B2C/B2B. La orquestación explícita de  \n\n*equipos* multiagente tanto para la capa de clientes como para la de negocios, gestionada por un agente omnisciente de nivel superior, representa una complejidad no abordada en el mercado actual.\n\nLa integración del Protocolo de Contexto de Modelo (MCP) como una capa de comunicación estandarizada para *todos* los agentes y herramientas externas, asegurando un intercambio de contexto y una delegación fluidos en un ecosistema vasto y complejo, es un enfoque novedoso a esta escala. Esta visión \"omnisciente y omnipresente\" de Sisa AI aborda directamente la fragmentación y la naturaleza aislada de las aplicaciones de IA en el turismo. Sin una entidad central inteligente que mantenga un contexto global y orqueste diversos equipos de agentes, el sistema se convertiría en una colección de chatbots desconectados. La arquitectura multiagente de Sisa AI con MCP y LangGraph busca superar esto creando un tejido unificado e inteligente capaz de gestionar tareas complejas y distribuidas y el contexto a lo largo de toda la cadena de valor del viaje.  \n\nSi bien la IA de voz ya existe, una experiencia verdaderamente integrada y de voz-primero que funcione como un bucle conversacional continuo en todas las etapas del viaje (desde la consulta inicial hasta la retroalimentación post-viaje) y en múltiples plataformas, aún no es definitiva. Sisa AI se posiciona para llenar esta brecha, ofreciendo una experiencia de usuario sin precedentes.  \n\n### **Tesis de Mercado de Sisa AI: Convertirse en el Agente Omnisciente y Omnipresente**\n\nLa tesis central de Sisa AI es que el futuro de los viajes exige una entidad única, inteligente y proactiva que pueda anticipar, planificar, ejecutar y gestionar todos los aspectos de un viaje, tanto para los viajeros como para los proveedores de servicios. Al aprovechar la orquestación multiagente avanzada, RAG y la IA de voz, Sisa AI ofrecerá una personalización, eficiencia y experiencias inigualables, estableciéndose como el centro indispensable para el turismo global. Transformará la industria de una colección de puntos de contacto transaccionales en un viaje continuo, delicioso e hiperrelevante para los usuarios, al tiempo que proporcionará a las empresas automatización inteligente, conocimientos más profundos del cliente y canales de ingresos optimizados.\n\n### **Análisis del Panorama Competitivo: OTAs impulsadas por IA y Nuevos Actores**\n\nEl panorama competitivo en el sector de viajes está evolucionando rápidamente, con las principales Agencias de Viajes Online (OTAs) y gigantes tecnológicos ya integrando la IA para mejorar la personalización, el servicio al cliente y la gestión de reservas. Empresas como Expedia, Airbnb, Google, Amazon, Kayak, Trip Planner AI, Mindtrip y Gondola están a la vanguardia de esta adopción. Por ejemplo, Marriott y Finnair utilizan la IA para la fijación de precios dinámica y la eficiencia operativa.  \n\nLos agentes de IA representan tanto una amenaza como una oportunidad para las OTAs existentes. Podrían llevar a la desintermediación, donde los viajeros interactúan directamente con los agentes de IA de los proveedores, o a una competencia de datos con empresas fuera del sector turístico que poseen bases de datos masivas. Sin embargo, también ofrecen ventajas como la automatización eficiente, la mejora de las tasas de conversión y el fomento de la lealtad del cliente.  \n\nLa naturaleza \"definitiva\" de Sisa AI requiere que no solo compita con las OTAs existentes impulsadas por IA, sino que redefina fundamentalmente el mercado ofreciendo un ecosistema integrado superior. Los actores actuales están adoptando la IA para mejoras específicas, como chatbots o personalización. La ambición de Sisa AI de ser \"el agente definitivo\" implica que debe ofrecer una solución *holística* que supere las ofertas fragmentadas. Esto se debe al riesgo de desintermediación si los usuarios pueden obtener una experiencia mejor y más integrada en otro lugar. La arquitectura multiagente de Sisa AI y su cobertura integral del ciclo de vida no son solo características, sino diferenciadores estratégicos diseñados para crear una \"ventaja competitiva\" al ofrecer un valor inigualable en todo el ecosistema de viajes, dificultando que usuarios o empresas cambien a soluciones puntuales. Esto exige asociaciones profundas e integraciones robustas para garantizar una prestación de servicios completa.  \n\n## **3\\. Sisa AI: Visión, Capacidades Centrales y Experiencia de Usuario**\n\n### **Visión Definitiva de Sisa AI: El Agente de Viajes Definitivo**\n\nSisa AI aspira a ser la entidad singular e inteligente que comprende, anticipa y satisface cada necesidad de viaje tanto para individuos como para empresas a nivel global. Será más que un agente; será un orquestador consciente y omnipresente de experiencias de viaje, fomentando conexiones e interacciones fluidas en toda la cadena de valor del turismo.\n\n### **Cobertura Integral del Ciclo de Vida del Viaje**\n\nSisa AI abarcará todas las etapas del viaje, desde la inspiración inicial hasta la retroalimentación post-viaje, garantizando una experiencia cohesiva y sin fricciones.\n\n#### **Investigación y Descubrimiento**\n\nSisa AI identificará inteligentemente lugares, atracciones y experiencias basándose en perfiles de usuario hiperpersonalizados. Esto incluirá el análisis de viajes anteriores, preferencias, actividad en redes sociales, presupuesto y datos en tiempo real. Generará guías de viaje personalizadas y contenido visual/audio inmersivo para destinos , además de descubrir \"joyas ocultas\" y conocimientos locales que enriquecerán la experiencia del viajero.  \n\n#### **Sugerencias y Recomendaciones**\n\nEl sistema ofrecerá sugerencias proactivas de destinos, alojamientos, actividades y opciones gastronómicas, adaptadas a las preferencias individuales, el presupuesto y las condiciones en tiempo real (clima, eventos locales). Las recomendaciones se ajustarán dinámicamente en función de la evolución de la intención del usuario y los datos en tiempo real.  \n\n#### **Generación de Guías de Viaje e Itinerarios**\n\nSisa AI creará itinerarios altamente personalizados y optimizados, incluyendo la planificación de rutas que consideren los tiempos de viaje, las distancias y las preferencias. Los usuarios tendrán control total, pudiendo añadir, editar o eliminar actividades del plan generado por la IA.  \n\n#### **Asistencia y Soporte 24/7**\n\nSe proporcionará asistencia instantánea y en lenguaje natural a través de texto y voz, manejando consultas rutinarias, confirmaciones de reserva y la resolución de problemas complejos. Sisa AI se involucrará proactivamente, informando a los usuarios sobre cambios (retrasos, interrupciones) y ayudando con modificaciones o reservas alternativas. El soporte multilingüe garantizará la accesibilidad global.  \n\n#### **Gestión de Reservas y Pagos**\n\nLa plataforma permitirá la reserva fluida de vuelos, hoteles, alquiler de coches, actividades y paquetes directamente, con la posibilidad de comandos de voz. Se integrará con los principales Sistemas de Distribución Global (GDS) y proveedores directos. Los procesos de check-in/out automatizados y la gestión de cambios en las reservas mejorarán la eficiencia. La gestión financiera incluirá el procesamiento de pagos seguro y sin interrupciones, potencialmente \"invisible\" , la gestión automatizada de gastos para viajeros corporativos , y el manejo de reembolsos y contracargos, asistiendo potencialmente con reclamaciones.  \n\n#### **Agendas y Planificación de Itinerarios**\n\nSisa AI consolidará todos los detalles del viaje (hotel, vuelo, actividades) en un único organizador dinámico. Proporcionará actualizaciones en tiempo real y notificaciones inteligentes para cambios de puerta, retrasos o condiciones locales , además de integrarse con calendarios personales para una programación fluida.  \n\n#### **Cumplimiento y Calificación Post-Viaje**\n\nLa plataforma facilitará la recopilación de comentarios y reseñas para la mejora continua. Gestionará programas de fidelización y recompensas , y realizará análisis impulsados por IA de los datos post-viaje para refinar futuras recomendaciones y servicios.  \n\n### **Filosofía de Diseño Centrada en el Usuario: UX/UI Espectacular**\n\nLa interfaz de usuario (UX/UI) de Sisa AI debe ser \"espectacular, hermosa y 100% centrada en el usuario\", enfatizando interfaces intuitivas, instrucciones claras y respuestas rápidas. El diseño conversacional empleará un lenguaje natural y atractivo, combinando la entrada de texto libre con botones predefinidos para facilitar su uso. La personalización impulsada por IA se extenderá a la interfaz de usuario, adaptando el contenido y la presentación en función de las preferencias y el comportamiento del usuario. La personalidad del chatbot se diseñará para reflejar la identidad de la marca, mejorando el compromiso y la conexión. La compatibilidad multicanal garantizará una experiencia consistente en todas las plataformas (web, aplicación móvil, escritorio), integrándose con plataformas de mensajería como WhatsApp y SMS. El atractivo visual se logrará con una interfaz de usuario visualmente atractiva, imágenes de alta calidad, videos y mapas, acompañados de texto alternativo descriptivo para mejorar la UX y la legibilidad automática.  \n\nLa importancia de un UX/UI \"espectacular\" no es meramente estética, sino un factor crítico para la adopción y retención de usuarios, especialmente en un mercado competitivo que muestra signos de fatiga de la IA. La investigación indica que \"la fatiga de la IA está aumentando a medida que la automatización, los chatbots y las herramientas de decisión se vuelven abrumadores\". Esto sugiere que los usuarios no solo buscan funcionalidad, sino una experiencia  \n\n*sin esfuerzo y agradable*. La causa de esta fatiga a menudo se encuentra en interfaces mal diseñadas que priorizan las capacidades de la IA sobre las necesidades del usuario. Por lo tanto, el compromiso de Sisa AI con un UX/UI \"espectacular\" es un imperativo estratégico para superar la resistencia del usuario, generar confianza y asegurar altas tasas de participación y conversión, lo que impacta directamente la monetización a través de actualizaciones freemium y el uso sostenido. Una interfaz hermosa e intuitiva hará que las complejas interacciones multiagente se sientan fluidas y mágicas, en lugar de abrumadoras.\n\nA continuación, se presenta una tabla con las mejores prácticas de UX/UI para Sisa AI:\n\n| Categoría de Mejor Práctica | Descripción | Racional/Beneficio para Sisa AI | Identificadores de Snippet Relevantes |\n| :---- | :---- | :---- | :---- |\n| Diseño Conversacional | Lenguaje natural y atractivo; combinación de texto libre y botones predefinidos. | Hace que la interacción se sienta más humana y menos robótica, reduciendo la fricción y mejorando la eficiencia. |   |\n| Personalización | La IA adapta el contenido y la presentación de la interfaz de usuario según las preferencias y el comportamiento del usuario. | Aumenta el compromiso y la lealtad del usuario, haciendo que las recomendaciones y la experiencia se sientan hechas a medida. |   |\n| Personalidad del Chatbot | Inyectar una personalidad coherente con la marca en el diseño del chatbot. | Construye una mejor conexión con el usuario, haciendo que la conversación sea más atractiva y memorable. |   |\n| Compatibilidad Multicanal | Experiencia consistente en web, móvil y escritorio, e integración con plataformas de mensajería. | Permite a los usuarios interactuar con Sisa AI dondequiera que estén, garantizando una experiencia unificada y accesible. |   |\n| Atractivo Visual | Interfaz visualmente atractiva con imágenes, videos y mapas de alta calidad. | Mejora la experiencia general del usuario, hace que la interacción sea más eficiente y mejora la legibilidad automática del sitio. |   |\n| Claridad y Simplicidad | Instrucciones claras, navegación sencilla y respuestas rápidas. | Reduce la carga cognitiva del usuario y la indecisión, simplificando la planificación del viaje y mejorando la satisfacción. |   |\n| Proactividad | Notificaciones inteligentes y asistencia anticipatoria ante cambios o interrupciones. | Mejora la satisfacción del cliente al mantenerlos informados y ofrecer soluciones antes de que surjan problemas. |   |\n| Pruebas y Optimización Continuas | Evaluación regular de respuestas, pruebas de usabilidad y funcionalidad. | Asegura que el chatbot funcione de manera óptima, mejorando continuamente la precisión, el compromiso del usuario y los tiempos de resolución. |   |\n\n### **Experiencia Multiplataforma: Móvil, Web y Escritorio**\n\nSisa AI ofrecerá aplicaciones nativas en plataformas móviles (iOS/Android), web y de escritorio (Windows/macOS). Esta estrategia garantiza una experiencia consistente y optimizada, independientemente del dispositivo del usuario. La presencia multiplataforma de Sisa AI satisfará los diversos hábitos de los usuarios, proporcionando acceso continuo a sus servicios, ya sea que planifiquen en una pantalla grande o gestionen detalles sobre la marcha.\n\n## **4\\. Arquitectura y Orquestación Multiagente: El Cerebro de Sisa AI**\n\n### **Principios Fundamentales de los Sistemas Multiagente en el Turismo**\n\nLos sistemas multiagente (MAS) son colecciones de entidades autónomas, conocidas como agentes, que interactúan entre sí para lograr objetivos específicos. Estos sistemas están revolucionando la industria al mejorar la eficiencia, optimizar las experiencias del cliente y abrir el camino a futuras innovaciones. Los MAS sobresalen en la gestión de tareas complejas al distribuirlas entre agentes especializados; por ejemplo, un agente podría centrarse en las reservas de vuelos, mientras que otro gestiona las reservas de hoteles.  \n\nLos beneficios clave de los sistemas multiagente incluyen una mayor eficiencia, reducción de costos, una experiencia del cliente mejorada, modularidad, flexibilidad, escalabilidad, separación de preocupaciones y un manejo eficiente de las tareas. Estos sistemas permiten la toma de decisiones descentralizada y exhiben comportamientos emergentes que son más sofisticados que sus partes individuales. Los agentes modernos a menudo aprovechan los Grandes Modelos de Lenguaje (LLM) como su motor cognitivo, lo que les permite comprender el contexto, generar respuestas similares a las humanas y participar en razonamientos complejos.  \n\nLa modularidad y escalabilidad inherentes de los MAS son facilitadores directos de la visión de \"emporio global\" de Sisa AI. Un \"emporio global\" implica una escala inmensa, funcionalidades diversas y una evolución continua. Un sistema de IA monolítico sería difícil de manejar y propenso a fallos. Los MAS descomponen la complejidad en agentes especializados y manejables, lo que permite el desarrollo, despliegue y escalado independiente de componentes individuales. Esto significa que la arquitectura fundamental de Sisa AI debe ser MAS para lograr su ambicioso alcance y adaptabilidad a largo plazo. Este principio de diseño asegura que nuevas características, como la integración de una nueva pasarela de pago o regulaciones de viaje específicas de un país, puedan añadirse desarrollando nuevos agentes o modificando los existentes sin tener que revisar todo el sistema, lo cual es crucial para la expansión global y la innovación continua.  \n\n### **Estructura Multiagente de Sisa AI**\n\nSisa AI se construirá sobre una arquitectura multiagente sofisticada, diseñada para la máxima eficiencia, personalización y escalabilidad.\n\n#### **Orquestador Central (Agente Omnisciente/Omnipresente)**\n\nEste agente de nivel superior actuará como el \"maestro\" o \"gestor de chat grupal\" , supervisando todo el ecosistema de Sisa AI. Mantendrá un contexto compartido y persistente de todas las interacciones con clientes y empresas , funcionando como la \"conciencia\" que conecta y gestiona todas las operaciones. Su función principal será enrutar dinámicamente las consultas, delegar tareas a los equipos multiagente apropiados y asegurar una coordinación y un flujo de información fluidos en todo el sistema. También monitoreará el rendimiento general del sistema, detectará anomalías e iniciará flujos de recuperación de errores.  \n\nEl orquestador central \"omnisciente y omnipresente\" es la encarnación arquitectónica de la propuesta de valor única de Sisa AI, permitiendo un nivel de inteligencia holística inigualable por las soluciones fragmentadas actuales. La visión del usuario enfatiza repetidamente \"omnisciente y omnipresente\", lo cual no es solo un término de marketing, sino un requisito funcional para una gestión de viajes verdaderamente unificada. Sin una entidad central inteligente que mantenga un contexto global y orqueste diversos equipos de agentes, el sistema se fragmentaría en una colección de chatbots desconectados. Por lo tanto, este orquestador debe ser excepcionalmente robusto, aprovechando las capacidades avanzadas de LangGraph para flujos de control complejos y el MCP para la comunicación universal. Su capacidad para \"pensar como sus agentes\" y escalar dinámicamente el esfuerzo según la complejidad de la consulta será primordial para una operación eficiente y precisa a escala global. Aquí es donde reside la verdadera naturaleza \"definitiva\" de Sisa AI.  \n\n#### **Equipos Multiagente Orientados al Cliente**\n\nEstos equipos estarán compuestos por agentes especializados (por ejemplo, Agente de Investigación, Agente de Planificación de Itinerarios, Agente de Reservas, Agente de Soporte 24/7, Agente de Pagos) diseñados para servir a los usuarios finales. Colaborarán (orquestación de chat grupal) o traspasarán tareas (orquestación de traspaso) para satisfacer las solicitudes de los usuarios. Por ejemplo, un \"Agente de Investigación\" recopilará información, luego delegará a un \"Agente de Itinerarios\" para la planificación, y finalmente a un \"Agente de Reservas\" para la ejecución. Aprovecharán los módulos de memoria de LangChain (memoria de búfer a corto plazo, memoria vectorial, memoria de resumen) para mantener el contexto y las preferencias del usuario en todas las interacciones.  \n\n#### **Equipos Multiagente Orientados a Negocios**\n\nSe dedicarán equipos de agentes a las empresas turísticas (por ejemplo, Agente de Incorporación de Proveedores, Agente de CRM, Agente de Optimización de Ingresos, Agente de Marketing, Agente de Cumplimiento). Estos agentes gestionarán las relaciones con los proveedores, optimizarán los precios, automatizarán las campañas de marketing, gestionarán el inventario y proporcionarán información de inteligencia empresarial. Interactuarán con la capa de CRM, proporcionando información impulsada por IA y automatizando flujos de trabajo.  \n\n### **LangGraph para la Orquestación con Estado y Flujos de Trabajo Complejos**\n\nLangGraph será el marco fundamental para construir las aplicaciones multiagente con estado de Sisa AI. Su capacidad de ejecución basada en grafos permite definir flujos de trabajo como nodos (tareas/acciones) y aristas (flujo de información), lo que permite grafos complejos, no lineales y cíclicos. Esto es fundamental para gestionar las intrincadas dependencias a lo largo de todo el ciclo de vida del viaje.  \n\nLa gestión de estado incorporada en LangGraph permite a los agentes mantener el contexto, el historial de conversaciones y los resultados intermedios a través de múltiples llamadas e interacciones de LLM, lo cual es crucial para la colaboración humano-agente y flujos de trabajo multi-pasos complejos. Facilita la coordinación de múltiples agentes, permitiendo la orquestación dinámica de flujos de trabajo y comportamientos personalizados de los agentes. Además, LangGraph soporta flujos de trabajo con \"human-in-the-loop\", permitiendo a los agentes redactar borradores para revisión y esperar aprobación antes de actuar, e incluso \"viajar en el tiempo\" para corregir el rumbo. Esto es vital para pasos críticos de reserva o pago. El soporte de streaming de primera clase, con streaming token por token y de pasos intermedios, mejora la experiencia del usuario al mostrar el razonamiento y las acciones del agente en tiempo real. Las \"loops\" de moderación y calidad, fáciles de añadir, evitan que los agentes se desvíen, lo cual es crucial para la fiabilidad y precisión.  \n\nLa capacidad de LangGraph para crear \"grafos cíclicos\" y gestionar el \"estado\" es fundamental para el modelo de interacción continua y evolutiva de Sisa AI, que va más allá de una simple respuesta a una consulta. Los chatbots tradicionales o las aplicaciones de IA de una sola interacción se limitan a interacciones lineales. Sisa AI, como agente \"omnisciente\" que gestiona un viaje completo, requiere conversaciones y flujos de trabajo continuos y adaptativos (por ejemplo, replanificación debido a retrasos, ajuste de preferencias a mitad del viaje). Los grafos cíclicos permiten procesos iterativos y ramificaciones dinámicas basadas en la entrada del usuario o eventos externos. La gestión de estado asegura que el agente recuerde todo el contexto anterior, permitiendo una continuidad fluida. Esto implica que LangGraph no es solo una herramienta, sino una elección arquitectónica central que permite a Sisa AI ofrecer una experiencia interactiva verdaderamente \"definitiva\" y \"humana\", manejando el dinamismo y la complejidad inherentes de los viajes en el mundo real.  \n\n### **LangChain para el Desarrollo de Agentes, Herramientas y Gestión de Memoria**\n\nLangChain proporciona la base robusta para construir los agentes individuales de Sisa AI e integrar sus capacidades. Su composabilidad permite encadenar agentes como funciones modulares, cada una con su propia memoria, conjunto de herramientas y nivel de autonomía. Las interfaces de herramientas extienden las habilidades de los agentes para interactuar con APIs externas (por ejemplo, motores de reserva, pasarelas de pago, GDS), motores de búsqueda y lógica de negocio personalizada. Esto es fundamental para que Sisa AI pueda \"conectarse con proveedores, gestionar paquetes, planificar, cobrar, agendar y todo lo que se necesite en turismo\".  \n\nLos módulos de memoria de LangChain ofrecen memoria de búfer a corto plazo para el historial de conversaciones, memoria vectorial (con bases de datos vectoriales como ChromaDB) para preferencias de usuario a largo plazo y datos extensos, y memoria de resumen para la optimización de costos. Esto asegura la hiperpersonalización y la continuidad. Las características de orquestación de LangChain soportan el enrutamiento de herramientas (los agentes eligen dinámicamente las herramientas), el intercambio dinámico de contexto (los agentes acceden/actualizan la memoria compartida a través de LangGraph/LCEL), la ejecución asíncrona (procesamiento de tareas en paralelo para mayor rendimiento) y los flujos de recuperación de errores (reintentos, escalada a procesos con intervención humana).  \n\nEl éxito de Sisa AI como agente \"definitivo\" depende de su capacidad para trascender la mera provisión de información y ejecutar transacciones en el mundo real. La consulta del usuario exige que Sisa AI \"cobre, agende, gestione y todo lo que se necesite en turismo\". Estas no son solo tareas conversacionales, sino que requieren acciones concretas en sistemas externos. Las herramientas de LangChain permiten a los agentes interactuar con APIs, GDS y pasarelas de pago, traduciendo la intención del usuario en comandos accionables. De manera similar, la personalización profunda requiere recordar interacciones y preferencias pasadas. Esto implica que las robustas capacidades de memoria e integración de herramientas de LangChain son indispensables para que Sisa AI pase de ser un simple chatbot a un agente de viajes totalmente funcional, transaccional y altamente personalizado, cerrando la brecha entre la inteligencia de la IA y la ejecución en el mundo real.\n\n### **Protocolo de Contexto de Modelo (MCP) para la Comunicación Fluida entre Agentes y el Intercambio de Contexto**\n\nEl Protocolo de Contexto de Modelo (MCP) funciona como un \"USB-C para la IA\", un lenguaje de comunicación estandarizado que permite a los agentes de IA compartir información y solicitudes sin esfuerzo. Proporciona una interfaz universal que elimina las integraciones personalizadas y únicas que típicamente aíslan los sistemas de IA, permitiendo a los agentes especializados (por ejemplo, analista de datos, escritor) delegar tareas, intercambiar resultados y coordinar acciones sin problemas. Esta capacidad de compartir contexto permite que un equipo de agentes de IA comparta conocimientos y se pida ayuda mutuamente, lo que lleva a soluciones más rápidas, más ricas en contexto y más precisas. Esto es crucial para la estructura de equipos multiagente de Sisa AI.  \n\nLa arquitectura de MCP sigue un modelo cliente-servidor, permitiendo que las aplicaciones anfitrionas (el orquestador de Sisa AI) se conecten a múltiples servidores MCP, cada uno exponiendo capacidades específicas. Entre sus beneficios se incluyen una lista creciente de integraciones preconstruidas, la flexibilidad para cambiar entre proveedores de LLM y las mejores prácticas para asegurar los datos dentro de la infraestructura existente.  \n\nEl MCP es el pilar arquitectónico que transforma la colección de agentes especializados de Sisa AI en un verdadero \"sistema multiagente en equipo\" y una entidad \"omnisciente\". La visión del usuario para Sisa AI implica una colaboración compleja entre numerosos agentes y equipos especializados. Sin un protocolo de comunicación estandarizado, esto conduciría a pesadillas de integración, silos de datos y importantes cuellos de botella en el rendimiento. El MCP proporciona el \"lenguaje compartido y el cableado\" para el intercambio de contexto, permitiendo a los agentes entenderse entre sí y abordar colectivamente tareas complejas que ningún agente individual podría. Esto implica que el MCP no es solo una conveniencia, sino un habilitador fundamental para la orquestación avanzada de Sisa AI, permitiendo la delegación dinámica, el conocimiento compartido y, en última instancia, una inteligencia colectiva superior que puede gestionar las vastas complejidades de un mercado turístico global. Aborda directamente la \"complejidad de la coordinación\" inherente a los MAS.  \n\nA continuación, se presenta una tabla que detalla la arquitectura del sistema multiagente para Sisa AI, desglosada por capas:\n\n| Capa | Agentes/Equipos Clave | Responsabilidades Principales | Puntos Clave de Integración LangGraph/LangChain/MCP | Identificadores de Snippet Relevantes |\n| :---- | :---- | :---- | :---- | :---- |\n| **Orquestador Central** | Agente Omnisciente/Omnipresente | Supervisión del ecosistema, mantenimiento del contexto global, enrutamiento dinámico de consultas, delegación de tareas, monitoreo de rendimiento, recuperación de errores. | LangGraph (grafo principal, estado global), LangChain (ejecutores de agentes), MCP (comunicación inter-equipo). |   |\n| **Capa Orientada al Cliente** | Agente de Investigación, Agente de Planificación de Itinerarios, Agente de Reservas, Agente de Soporte 24/7, Agente de Pagos, Agente de Guías de Viaje. | Investigación de lugares, sugerencias personalizadas, generación de guías/itinerarios, asistencia en tiempo real, gestión de reservas/pagos. | LangGraph (flujos de trabajo cíclicos, gestión de estado), LangChain (módulos de memoria, interfaces de herramientas para APIs de reservas), MCP (comunicación con orquestador y otros equipos). |   |\n| **Capa Orientada a Negocios** | Agente de Incorporación de Proveedores, Agente de CRM, Agente de Optimización de Ingresos, Agente de Marketing, Agente de Cumplimiento. | Gestión de relaciones con proveedores, optimización de precios, automatización de marketing, gestión de inventario, inteligencia de negocio, gestión de pagos. | LangGraph (flujos de trabajo de negocio), LangChain (módulos de memoria, interfaces de herramientas para APIs de CRM/GDS/pagos), MCP (comunicación con orquestador y equipos de clientes). |   |\n\n## **5\\. Pila Tecnológica y Plan de Implementación**\n\n### **Modelos Centrales de IA: LLMs (por ejemplo, OpenAI)**\n\nLos Grandes Modelos de Lenguaje (LLMs), como GPT-4o de OpenAI, servirán como el motor cognitivo para todos los agentes de Sisa AI, impulsando sus capacidades de razonamiento, comprensión del lenguaje y generación. La elección de LLMs de vanguardia es crucial para la calidad de las interacciones y la precisión de las respuestas. La arquitectura de Sisa AI, al integrar el Protocolo de Contexto de Modelo (MCP), proporciona la flexibilidad necesaria para cambiar entre diferentes proveedores de LLM. Esto no solo asegura la preparación para el futuro, permitiendo la adaptación a los avances futuros de los modelos, sino que también ofrece oportunidades para la optimización de costos al seleccionar los modelos más eficientes para tareas específicas.  \n\n### **Generación Aumentada por Recuperación (RAG) para Búsqueda Vectorial y Base de Conocimiento**\n\nLa Generación Aumentada por Recuperación (RAG) es un componente crítico para Sisa AI, ya que aumenta las capacidades de los LLMs con bases de conocimiento externas, actualizadas y propietarias. Esto es esencial para garantizar respuestas precisas y relevantes, mitigando el riesgo de \"alucinaciones\" de la IA, que pueden ser problemáticas en la planificación de viajes.  \n\nEl mecanismo de RAG funciona enviando las consultas de los usuarios a un sistema de recuperación de información, como Azure AI Search, para encontrar datos relevantes de documentos y contenido vectorizado. Los resultados mejor clasificados se devuelven al LLM, que luego genera una respuesta fundamentada. Los beneficios de RAG incluyen una implementación de IA rentable en comparación con el reentrenamiento o el ajuste fino de los modelos, acceso a datos actuales y específicos del dominio, y una mayor precisión para chatbots especializados y servicios de recomendación.  \n\nPara la búsqueda vectorial, el contenido (texto, imágenes) se vectorizará y almacenará en una base de datos vectorial (por ejemplo, Cassandra, ChromaDB) para permitir la búsqueda por similitud. Las consultas híbridas, que combinan la búsqueda por palabra clave y la búsqueda vectorial, maximizarán la recuperación de información relevante. La RAG no es solo una mejora; es una contramedida directa a la limitación de las \"alucinaciones\" de los LLMs , asegurando la fiabilidad y la confianza en Sisa AI. La consulta exige implícitamente una alta precisión, y la investigación señala explícitamente las alucinaciones de los LLMs como un riesgo en la planificación de viajes. La RAG fundamenta las respuestas del LLM en datos verificables y externos, en lugar de depender únicamente de sus datos de entrenamiento internos, potencialmente desactualizados o fabricados. Esto implica que una implementación robusta de RAG, con estrategias de indexación efectivas, capacidades de consulta y ajuste de relevancia , es innegociable para que Sisa AI sea \"definitiva\" y genere confianza en el usuario, especialmente para tareas críticas como la reserva o la generación de itinerarios.  \n\n### **Integración de IA de Voz: Voz a Texto y Texto a Voz (por ejemplo, Whisper, ElevenLabs)**\n\nSisa AI funcionará como un agente de texto y voz, proporcionando una experiencia de usuario natural e intuitiva. Para la funcionalidad de voz a texto (STT), se utilizarán modelos avanzados como la API de OpenAI Whisper para transcribir con precisión la entrada de voz del usuario a texto, que luego será procesado por los LLMs y los agentes. Para la funcionalidad de texto a voz (TTS), se emplearán motores TTS de alta calidad, como la API de ElevenLabs, para convertir las respuestas de los agentes en una salida de voz natural y realista, mejorando el compromiso y la intuición del usuario. Esta interacción de voz se integrará sin problemas en el flujo de trabajo de LangGraph, creando un bucle continuo donde la entrada de audio se procesa, se alimenta al agente y la respuesta del agente se convierte de nuevo en audio, facilitando una conversación fluida y dinámica.  \n\n### **Estrategia de Adquisición de Datos: Web Scraping, Integraciones de API, Herramientas de Búsqueda de LangChain**\n\nSisa AI recopilará información de una amplia gama de fuentes para mantener su naturaleza \"omnisciente\". Esto incluirá:\n\n* **Web Scraping:** Raspado dirigido de sitios web específicos por país para obtener información local, atracciones y datos en tiempo real.  \n* **Integraciones de API:** Conexiones directas con proveedores de viajes (aerolíneas, hoteles, GDS), pasarelas de pago y otros servicios de terceros relevantes.    \n* **Herramientas de Búsqueda de LangChain:** Aprovechamiento de las capacidades de LangChain para integrar motores de búsqueda para una exploración externa amplia y la recuperación de datos no estructurados.  \n\n### **Gestión de la Memoria: Memoria a Corto Plazo, Vectorial y de Resumen**\n\nLos módulos de memoria de LangChain serán fundamentales para la naturaleza \"omnisciente\" de Sisa AI. La  \n\n**memoria de búfer a corto plazo** se utilizará para recordar el historial de conversaciones inmediato y el contexto dentro de una interacción en curso. La **memoria vectorial**, integrada con bases de datos vectoriales (por ejemplo, ChromaDB, Cassandra), almacenará y recuperará las preferencias de usuario a largo plazo, el historial de viajes pasados y el contenido extenso de la base de conocimiento. Finalmente, la  \n\n**memoria de resumen** se empleará para la optimización de costos y una gestión eficiente del contexto, resumiendo interacciones más largas o datos menos críticos.  \n\n### **Integración de Herramientas: Conexión de Agentes a APIs Externas (Proveedores, Pasarelas de Pago, GDS)**\n\nLas interfaces de herramientas de LangChain permitirán a los agentes de Sisa AI realizar acciones en el mundo real, lo cual es crucial para su funcionalidad \"definitiva\". Esto incluye:\n\n* **APIs de Reserva:** Integración con los principales GDS (por ejemplo, Sabre, Amadeus) y APIs de proveedores directos para vuelos, hoteles, alquiler de coches y actividades.    \n* **Pasarelas de Pago:** Integración segura con plataformas de procesamiento de pagos para transacciones fluidas.    \n* **APIs de CRM:** Conexión con el sistema CRM interno para que los agentes orientados a negocios gestionen los datos de los proveedores y la información de los clientes.    \n* **Lógica de Negocio Personalizada:** Desarrollo de herramientas específicas para funcionalidades únicas de Sisa AI, como la creación de paquetes complejos o algoritmos de precios dinámicos.\n\nEl éxito de Sisa AI como agente \"definitivo\" depende de su capacidad para trascender la mera provisión de información y ejecutar transacciones en el mundo real. La consulta del usuario especifica que Sisa AI debe \"cobrar, agendar, gestionar y todo lo que se necesite en turismo\". Esto requiere profundas capacidades transaccionales. La integración robusta de herramientas, particularmente con los sistemas GDS y de pago, es lo que permite a la IA pasar de la sugerencia a la ejecución. Esto implica que la complejidad técnica de la integración con sistemas externos diversos, a menudo heredados , será un desafío de ingeniería importante, que requerirá un esfuerzo de desarrollo significativo y potencialmente el aprovechamiento de las integraciones preconstruidas de MCP.  \n\nA continuación, se presenta una tabla que resume la pila tecnológica propuesta para Sisa AI:\n\n| Categoría de Componente | Tecnologías/Herramientas Específicas | Rol en Sisa AI | Identificadores de Snippet Relevantes |\n| :---- | :---- | :---- | :---- |\n| **Marco Central de IA** | LangGraph, LangChain | Orquestación con estado de sistemas multiagente complejos; desarrollo de agentes y gestión de flujos de trabajo. |   |\n| **LLMs** | OpenAI (GPT-4o), flexibilidad para otros proveedores | Motor cognitivo para razonamiento, comprensión del lenguaje y generación de respuestas. |   |\n| **Base de Conocimiento (RAG)** | Azure AI Search, Bases de Datos Vectoriales (ChromaDB, Cassandra) | Aumenta los LLMs con datos verificados y actualizados para respuestas precisas y específicas del dominio. |   |\n| **IA de Voz** | OpenAI Whisper API (STT), ElevenLabs API (TTS) | Habilita la interacción de voz natural de entrada y salida para una experiencia de usuario fluida. |   |\n| **Fuentes de Datos** | Web Scraping, APIs de Proveedores (Aerolíneas, Hoteles, GDS), Herramientas de Búsqueda de LangChain | Recopilación de información en tiempo real y específica del dominio de diversas fuentes. |   |\n| **Base de Datos/Memoria** | Bases de Datos Vectoriales (ChromaDB, Cassandra), Memoria de Búfer a Corto Plazo de LangChain, Memoria de Resumen de LangChain | Almacenamiento de preferencias de usuario a largo plazo, historial de conversaciones y contenido de la base de conocimiento. |   |\n| **Orquestación/Comunicación** | Model Context Protocol (MCP) | Comunicación estandarizada y compartición de contexto entre todos los agentes y equipos. |   |\n| **Infraestructura de Despliegue** | Cloud-native (por ejemplo, Azure) | Escalabilidad, alta disponibilidad y soporte para infraestructura de IA distribuida. |   |\n| **Herramientas de Desarrollo/Observabilidad** | LangSmith, Traceloop, LangFuse | Monitoreo, depuración y optimización de los flujos de trabajo de los agentes y el rendimiento del sistema. |   |\n| **Interfaces de Usuario** | Frameworks de desarrollo web/móvil (por ejemplo, React Native, Next.js) | Creación de interfaces de usuario \"espectaculares\" y multiplataforma. |   |\n| **CRM** | Soluciones CRM con capacidades de IA (por ejemplo, Salesforce, Zoho CRM) | Gestión de relaciones con clientes y proveedores, análisis de datos de negocio y automatización. |   |\n\n### **Hoja de Ruta de Implementación de Alto Nivel**\n\nLa implementación de Sisa AI se abordará en fases estratégicas para garantizar un desarrollo robusto y una expansión controlada.\n\n* **Fase 1: Desarrollo de Agentes Centrales y Fundación RAG.**  \n  * Configuración del entorno LangGraph/LangChain, definición de roles iniciales de agentes (por ejemplo, Agente de Investigación, Agente Básico de Itinerarios).  \n  * Implementación del sistema RAG central con fuentes de datos iniciales y una base de datos vectorial.  \n  * Desarrollo de un flujo conversacional básico basado en texto y gestión de la memoria.  \n* **Fase 2: IA de Voz y Herramientas Transaccionales Centrales.**  \n  * Integración de Whisper (STT) y ElevenLabs (TTS) para la interacción de voz.  \n  * Desarrollo e integración de herramientas transaccionales clave (por ejemplo, APIs básicas de reserva de vuelos/hoteles).  \n  * Pruebas internas piloto con el recorrido central del usuario.  \n* **Fase 3: Orquestación de Equipos Multiagente y MCP.**  \n  * Expansión de los equipos de agentes para las capas de clientes y negocios.  \n  * Implementación del orquestador central utilizando LangGraph para flujos de trabajo complejos y multi-equipo.  \n  * Integración del MCP para una comunicación fluida y un intercambio de contexto entre agentes.  \n  * Desarrollo de las características iniciales de CRM para la capa de negocios.  \n* **Fase 4: Expansión Global y Características Avanzadas.**  \n  * Integración de fuentes de datos globales adicionales y APIs específicas de cada país.  \n  * Implementación de características avanzadas: precios dinámicos, resolución proactiva de problemas, cumplimiento post-viaje.  \n  * Refinamiento de la UX/UI en todas las plataformas.  \n  * Lanzamiento beta con usuarios/empresas seleccionados en las regiones objetivo.  \n* **Fase 5: Optimización, Escalabilidad y Mejora Continua.**  \n  * Monitoreo, pruebas y optimización continuos (pruebas A/B, retroalimentación del usuario).    \n  * Escalado de la infraestructura para la demanda global, centrándose en la tolerancia a fallos y la fiabilidad.  \n  * Desarrollo iterativo de nuevas capacidades de IA y mecanismos de auto-mejora de los agentes.  \n\n## **6\\. Modelo de Negocio y Estrategia de Monetización**\n\n### **Fuentes de Ingresos para Sisa AI**\n\nSisa AI implementará un modelo de negocio diversificado para maximizar los ingresos y la penetración en el mercado.\n\n#### **Modelos Freemium/Suscripción para Usuarios**\n\nSe ofrecerá una **capa gratuita** que incluirá un organizador de viajes básico, alertas de vuelos, acceso básico a mapas y soporte por correo electrónico. Este enfoque está diseñado para atraer una gran base de usuarios, ya que el 44% de los usuarios prefieren aplicaciones gratuitas. Las  \n\n**capas premium (suscripción)** ofrecerán características mejoradas como asistencia avanzada en la programación, actualizaciones de estado en tiempo real (retrasos, cambios de puerta), navegación sin conexión, asistencia dedicada 24/7, descuentos/recompensas en la aplicación y contenido exclusivo. La personalización servirá como un impulsor premium, ya que las experiencias personalizadas aumentan la lealtad y la disposición a pagar (el 80% de los consumidores son más propensos a realizar una compra de una marca que ofrece experiencias personalizadas). Además, el contenido generado por el usuario (CGU) y las características de la comunidad (por ejemplo, foros, reseñas) se aprovecharán para fomentar la lealtad y alentar las actualizaciones (el 50% de los usuarios son más propensos a actualizarse a servicios de pago si interactúan con comunidades).  \n\nEl modelo freemium, combinado con una fuerte personalización y características comunitarias, crea un poderoso ciclo de retroalimentación para la adquisición y retención de usuarios, impactando directamente la monetización. No basta con ofrecer características premium; los usuarios deben percibir un valor significativo. La personalización, impulsada por la inteligencia multiagente de Sisa AI, hace que las características premium se sientan indispensables, mientras que el CGU y la comunidad fomentan un sentido de pertenencia y confianza, que son impulsores clave para la conversión a las capas de pago. Esto implica que la estrategia de monetización de Sisa AI para los usuarios está profundamente entrelazada con sus capacidades centrales de IA y el diseño de UX/UI, creando un círculo virtuoso donde una mejor IA conduce a una mejor experiencia, lo que a su vez lleva a un mayor compromiso y mayores ingresos.\n\n#### **Planes de Pago Escalonados para Empresas**\n\nPara las empresas, se ofrecerán planes de pago escalonados:\n\n* **Nivel Básico:** Acceso a funcionalidades básicas de CRM, asistentes de IA básicos para tareas rutinarias (por ejemplo, chatbots de preguntas frecuentes para hoteles), y análisis limitados.  \n* **Nivel Pro:** Funcionalidades avanzadas de CRM (análisis predictivo de ventas, información más profunda del cliente, automatización de marketing), asistentes de IA más sofisticados (por ejemplo, optimización de ingresos, sugerencias de precios dinámicos), integraciones de API más amplias y soporte prioritario.  \n* **Nivel Empresarial:** Integraciones personalizadas, equipos multiagente dedicados para necesidades específicas del negocio, soluciones de marca blanca, análisis e informes avanzados, y consultoría estratégica de IA.\n\n#### **Modelos Basados en Comisiones con Proveedores**\n\nSisa AI operará bajo un modelo de agencia, obteniendo comisiones de los proveedores de servicios (aerolíneas, hoteles, alquiler de coches, cruceros, operadores turísticos) por las reservas realizadas a través de la plataforma. Las tasas de comisión variarán: hoteles (15-30%), cruceros (hasta 25%), paquetes turísticos (10-20%), alquiler de coches (\\~10%) y seguros de viaje (15-40%), mientras que las aerolíneas tienen comisiones variables (0-7%). Se implementarán estructuras de comisiones por lealtad escalonadas para recompensar a los proveedores por negocios recurrentes o un mayor volumen a través de Sisa AI. También se fomentarán las recompensas basadas en la experiencia, alentando a los proveedores a ofrecer experiencias únicas, lo que podría conducir a tasas de comisión más altas.  \n\nSi bien los modelos de comisión ofrecen una \"forma de bajo riesgo de vender productos de viaje\" , también conllevan \"márgenes de beneficio más bajos y opciones de pago limitadas\". El modelo de negocio multifacético de Sisa AI mitiga este riesgo. Depender únicamente de las comisiones podría limitar la rentabilidad, especialmente con las fluctuaciones en las comisiones de las aerolíneas. El modelo de agencia tradicional transfiere la responsabilidad del procesamiento de pagos y del comerciante de registro al proveedor. Esto implica que el modelo combinado de Sisa AI (freemium/suscripción \\+ planes de negocio escalonados \\+ comisiones) diversifica las fuentes de ingresos, permitiendo mayores márgenes de beneficio de las características premium y los servicios empresariales, al tiempo que aprovecha el amplio alcance y la baja barrera de entrada del modelo de comisión. Esta combinación estratégica garantiza la resiliencia financiera y maximiza el potencial de ingresos en todo el ecosistema.  \n\n### **CRM para la Capa de Negocios: Funcionalidades Impulsadas por IA para la Gestión de Proveedores e Información**\n\nLa capa de negocios de Sisa AI contará con un sistema CRM robusto y específicamente adaptado para las empresas turísticas, mejorado con capacidades de IA. Este CRM proporcionará a las empresas una visión de 360 grados de cada cliente, incluyendo sus preferencias, reservas pasadas y tendencias de ventas. Las funcionalidades impulsadas por IA incluirán análisis predictivo de ventas, segmentación de clientes y recomendaciones inteligentes para campañas de marketing y ofertas personalizadas. La automatización de flujos de trabajo permitirá automatizar confirmaciones de reserva, recordatorios, seguimientos y gestión de quejas, liberando al personal para tareas estratégicas.  \n\nEl CRM ofrecerá soporte multicanal, integrando la comunicación a través de correo electrónico, chat, teléfono y redes sociales. También contará con una gestión de reservas integrada, sincronizándose sin problemas con GDS y plataformas de reserva , y herramientas de gestión de proyectos para manejar planes o paquetes de viaje complejos.  \n\nEl CRM impulsado por IA para empresas no es solo una herramienta, sino un multiplicador de eficiencia que mejora directamente la propuesta de valor para los proveedores de turismo. Las empresas del sector turístico buscan constantemente formas de optimizar las operaciones y mejorar el servicio al cliente. Las características de IA dentro del CRM automatizan tareas repetitivas, proporcionan información procesable y permiten la hiperpersonalización a escala. Esto implica que la capa de negocios de Sisa AI, al ofrecer un CRM tan sofisticado, se convierte en un socio indispensable para los proveedores de turismo, impulsando su productividad y rentabilidad. Esto fortalece el lado B2B del mercado, alentando a más proveedores a integrar y ofrecer sus servicios a través de Sisa AI, enriqueciendo así el ecosistema general para los usuarios finales.  \n\n### **Estrategia de Asociación: Integración con Proveedores de Viajes y Sistemas de Pago**\n\nLas asociaciones estratégicas con aerolíneas, hoteles, empresas de alquiler de coches, operadores turísticos y negocios locales son fundamentales para el alcance global de Sisa AI y su oferta de servicios integral. Esto incluye asegurar la acreditación IATA/ARC o socios certificados para la venta de vuelos. Las colaboraciones con proveedores de tecnología financiera serán esenciales para soluciones de pago fluidas y potencialmente \"invisibles\". Estas asociaciones no solo ampliarán la gama de servicios disponibles a través de Sisa AI, sino que también garantizarán precios competitivos y una experiencia perfecta para el usuario final.  \n\n## **7\\. Despliegue Global y Consideraciones de Escalabilidad**\n\n### **Estrategia de Expansión Global por Fases**\n\nLa expansión global de Sisa AI se llevará a cabo de manera estratégica y gradual. Inicialmente, el enfoque se centrará en mercados turísticos clave de alto crecimiento, como Norteamérica y Europa, y potencialmente la región de Asia-Pacífico, dada su creciente influencia. El despliegue se realizará por fases, permitiendo la adaptación a las regulaciones locales, el idioma y los matices culturales. Se priorizarán las regiones con una fuerte adopción digital y una infraestructura de IA existente para asegurar una entrada al mercado eficiente.  \n\n### **Escalabilidad de los Sistemas Multiagente y la Infraestructura**\n\nLos sistemas multiagente (MAS) ofrecen inherentemente ventajas significativas en cuanto a escalabilidad al distribuir tareas entre agentes especializados. Nuevos agentes pueden integrarse sin problemas para manejar el aumento de la carga. Para soportar esta escalabilidad, Sisa AI aprovechará una infraestructura nativa de la nube (por ejemplo, Azure AI Search, PostgreSQL gestionado para LangGraph Platform) para el autoescalado de las colas de tareas y los servidores. La ejecución asíncrona en LangChain permitirá que múltiples agentes trabajen en paralelo, mejorando drásticamente el rendimiento para flujos de trabajo complejos y las interacciones simultáneas de los usuarios.  \n\nLa visión de un \"emporio global\" exige una arquitectura altamente escalable, y los MAS, particularmente con LangGraph y LangChain, proporcionan los principios de diseño inherentes para lograrlo. Una plataforma global se enfrentará a demandas de tráfico inmensas y fluctuantes. Un sistema monolítico se convertiría rápidamente en un cuello de botella. Los MAS descomponen el sistema en agentes desacoplados, similares a microservicios, que pueden escalarse de forma independiente , permitiendo que los recursos se asignen con precisión donde se necesiten. Esto implica que la elección arquitectónica de MAS para Sisa AI no es solo para la complejidad funcional, sino también para la resiliencia operativa y la eficiencia de costos a escala, lo que le permitirá convertirse verdaderamente en un líder global sin degradación del rendimiento.  \n\n### **Tolerancia a Fallos y Fiabilidad en Sistemas de IA Distribuidos**\n\nLa tolerancia a fallos es la capacidad de un sistema para seguir funcionando durante las fallas, minimizando las interrupciones y asegurando un servicio continuo. Sisa AI implementará mecanismos robustos para garantizar la fiabilidad. Esto incluirá redundancia (tener copias de seguridad), replicación (copiar y sincronizar datos entre nodos) y mecanismos de conmutación por error (redirigir automáticamente el tráfico a instancias saludables cuando algo falla).  \n\nLangChain soporta robustos mecanismos de recuperación de errores, permitiendo a los agentes reintentar tareas fallidas, escalarlas a procesos con intervención humana o reasignarlas a agentes alternativos. La observabilidad es crucial para depurar y solucionar problemas en sistemas multiagente complejos. Si bien herramientas como LangSmith proporcionan visibilidad del proceso de toma de decisiones de los agentes, la observabilidad de extremo a extremo en sistemas externos (APIs, bases de datos) necesita ser mejorada. Esto significa asegurar una propagación fluida del contexto de rastreo y una demarcación clara del servicio. Se abordarán los desafíos de mantener la consistencia de los datos en nodos distribuidos y de manejar los problemas de comunicación de red.  \n\nAlcanzar el estatus de \"definitivo\" no solo requiere una funcionalidad avanzada, sino una fiabilidad inquebrantable, especialmente dadas las implicaciones financieras y personales en los viajes. Los usuarios y las empresas solo confiarán en Sisa AI si es consistentemente fiable, especialmente al manejar reservas, pagos o asistencia en tiempo real. La investigación destaca que \"un pequeño fallo en una parte del sistema puede extenderse y causar una interrupción total\" en sistemas distribuidos. La causa es la complejidad inherente de los MAS y las dependencias externas. Esto implica que la tolerancia a fallos, la recuperación robusta de errores y la observabilidad integral de extremo a extremo no son características opcionales, sino principios de diseño críticos para Sisa AI. Esto asegura un tiempo de inactividad mínimo, transacciones precisas y una resolución proactiva de problemas, lo que impacta directamente en la satisfacción del usuario y la reputación del negocio.  \n\n## **8\\. Seguridad, Privacidad y Marco Ético de IA**\n\n### **Medidas de Privacidad y Seguridad de Datos (por ejemplo, cifrado, cumplimiento)**\n\nLa protección de los datos del usuario a través del cifrado y el estricto cumplimiento de las leyes globales de protección de datos (por ejemplo, GDPR, CCPA) es primordial para Sisa AI. El Protocolo de Contexto de Modelo (MCP) proporciona las mejores prácticas para asegurar los datos dentro de la infraestructura existente. Se implementarán controles de acceso robustos y niveles de seguridad para diferentes roles de usuario dentro del CRM, garantizando que solo el personal autorizado pueda acceder o modificar información sensible. La privacidad y la seguridad de los datos no son solo requisitos de cumplimiento, sino elementos fundamentales para generar confianza y lograr una adopción generalizada de Sisa AI. La consulta implica el manejo de grandes volúmenes de datos personales y financieros sensibles de viajes. La investigación señala explícitamente la \"privacidad y seguridad de los datos\" como un desafío frecuente en el turismo con IA. Esto se debe al riesgo inherente asociado con la recopilación y el procesamiento de grandes conjuntos de datos. Esto implica que Sisa AI debe invertir fuertemente en medidas de seguridad de vanguardia y prácticas transparentes de manejo de datos. Cualquier violación o percepción de uso indebido de datos socavaría gravemente la confianza del usuario y del negocio, poniendo en peligro el estatus de \"definitivo\" de Sisa AI. Esto requiere un enfoque proactivo de seguridad desde el diseño.  \n\n### **Abordar las Alucinaciones de la IA y Garantizar la Precisión**\n\nPara mitigar las alucinaciones de la IA, Sisa AI implementará una robusta Generación Aumentada por Recuperación (RAG), que fundamentará las respuestas de los LLMs en datos verificados y en tiempo real. Se implementarán bucles de moderación y calidad dentro de LangGraph para evitar que los agentes se \"desvíen\". Se realizarán pruebas y optimizaciones continuas de las respuestas y flujos de trabajo de los agentes. Además, se incorporarán mecanismos de \"human-in-the-loop\" para decisiones críticas o cuando la confianza de la IA sea baja, asegurando la supervisión humana en momentos clave.  \n\n### **Consideraciones Éticas en la Personalización Impulsada por IA**\n\nSisa AI abordará activamente las consideraciones éticas en su personalización impulsada por IA. Esto incluye abordar posibles sesgos en las recomendaciones y garantizar la equidad en todas las interacciones. Se mantendrá la transparencia con respecto a cómo se toman las decisiones impulsadas por la IA, especialmente para la fijación de precios dinámica o las ofertas personalizadas, para fomentar la confianza del usuario. Además, se garantizará el control del usuario sobre el uso de sus datos y los niveles de personalización, permitiendo a los individuos gestionar su experiencia.  \n\nMás allá de la precisión técnica, las prácticas éticas de IA son cruciales para la reputación a largo plazo y la sostenibilidad del mercado de Sisa AI. Si bien la personalización es un beneficio clave, la IA sin control puede dar lugar a dilemas éticos , como precios discriminatorios o recomendaciones sesgadas. Esto se debe a la naturaleza inherente de los modelos de IA que aprenden de los datos, los cuales pueden reflejar sesgos sociales. Esto implica que Sisa AI debe implementar proactivamente directrices y mecanismos éticos (por ejemplo, detección de sesgos, componentes de IA explicables) para garantizar la equidad y la transparencia. Esto construye la confianza del consumidor, diferencia a Sisa AI como un innovador responsable y mitiga posibles riesgos regulatorios o de reputación en un panorama ético en rápida evolución.  \n\n## **9\\. Conclusión y Recomendaciones Estratégicas**\n\n### **Recapitulación de la Propuesta de Valor Única de Sisa AI**\n\nSisa AI se distingue por ofrecer un ecosistema de viajes impulsado por IA verdaderamente omnisciente y omnipresente, unificando todo el ciclo de vida del viaje tanto para usuarios como para empresas. Su arquitectura de equipos multiagente, impulsada por LangGraph, LangChain y el Protocolo de Contexto de Modelo (MCP), permite una personalización sin precedentes, una orquestación fluida y capacidades transaccionales robustas. El compromiso con una UX/UI espectacular, la interacción por voz y una base de conocimiento RAG integral garantiza una experiencia agradable, precisa y digna de confianza.\n\n### **Recomendaciones Estratégicas Clave para un Desarrollo Exitoso y Liderazgo en el Mercado**\n\nPara asegurar el éxito en el desarrollo y el liderazgo en el mercado de Sisa AI, se proponen las siguientes recomendaciones estratégicas:\n\n* **Priorizar la Arquitectura Fundacional:** Invertir fuertemente en el desarrollo robusto de la capa de orquestación multiagente (LangGraph, MCP) para asegurar una comunicación fluida, gestión de estado y escalabilidad desde el primer día. Este es el diferenciador central de Sisa AI.  \n* **Integración Profunda y Asociaciones:** Asegurar alianzas estratégicas con una amplia gama de proveedores de viajes globales (aerolíneas, hoteles, GDS, operadores locales) y sistemas de pago para garantizar una cobertura de servicio integral y precios competitivos.  \n* **Precisión de Datos y Confianza:** Implementar una rigurosa cadena de RAG y un monitoreo continuo para las alucinaciones de la IA. Enfatizar la privacidad y seguridad de los datos como un valor central de la marca para construir una confianza inquebrantable entre usuarios y empresas.  \n* **Iteración Centrada en el Usuario:** Mantener un enfoque implacable en la excelencia de la UX/UI, aprovechando las capacidades de streaming y la retroalimentación \"human-in-the-loop\" para refinar continuamente la experiencia del usuario. Realizar pruebas exhaustivas con usuarios de diversas demografías.  \n* **Despliegue por Fases y Adaptativo:** Adoptar una estrategia de expansión global por fases, permitiendo una adaptación ágil a los matices del mercado regional, los paisajes regulatorios y las preferencias culturales.  \n* **Adquisición de Talento:** Construir un equipo multifuncional con experiencia en IA/ML, sistemas multiagente, diseño UX/UI, operaciones de la industria de viajes y cumplimiento normativo global.  \n* **Innovación Continua:** Establecer una cultura de investigación y desarrollo continuo, aprovechando los mecanismos de auto-mejora de los agentes y manteniéndose a la vanguardia de las tendencias emergentes de IA para mantener el estatus \"definitivo\" de Sisa AI.\n\n","size_bytes":68197},"attached_assets/Technical_documntation_1752410782687.md":{"content":"# **ocumentación de Arquitectura, Estructura, Flujo, Requerimientos Técnicos y Plan de Acción para una Aplicación de Viajes Impulsada por IA**\n\n## **I. Resumen Ejecutivo**\n\nEste informe detalla la arquitectura, estructura, flujo, requisitos técnicos, pila tecnológica y plan de acción para desarrollar una aplicación de viajes de próxima generación impulsada por inteligencia artificial. El objetivo principal es crear un agente de viajes hiper-rápido, hiper-eficiente y con una interfaz de usuario dinámica y estéticamente atractiva. Se propone una arquitectura de sistema multi-agente (MAS) orquestada por LangGraph, complementada con un marco de Generación Aumentada por Recuperación (RAG) para garantizar la precisión y relevancia de las respuestas de los Modelos de Lenguaje Grandes (LLM). La implementación seguirá principios de microservicios para escalabilidad y mantenibilidad, utilizando tecnologías de vanguardia para el frontend y backend, con un enfoque en la optimización del rendimiento y la experiencia del usuario. La plataforma de desarrollo Replit será utilizada para el desarrollo y despliegue del agente.\n\n## **II. Introducción: Visión y Oportunidad de Mercado**\n\n### **Visión del Proyecto: Un Agente de Viajes Hiper-Personalizado y Eficiente**\n\nEl propósito central de esta aplicación es transformar radicalmente la experiencia de planificación de viajes, ofreciendo un agente impulsado por IA que es excepcionalmente eficiente y profundamente personalizado. Esta iniciativa va más allá de las plataformas tradicionales de búsqueda y reserva, aspirando a proporcionar itinerarios completos y adaptados, junto con asistencia proactiva y en tiempo real. La aplicación integrará asistentes de viaje impulsados por IA y capacidades de hiper-personalización, que son tendencias clave que definirán el panorama de la tecnología de viajes en 2025\\.  \n\nEl objetivo es simplificar todo el proceso de viaje, desde la planificación inicial hasta el soporte durante el trayecto. Las funcionalidades esenciales incluirán la resolución proactiva de problemas, como la sugerencia dinámica de rutas alternativas o la re-reserva de opciones en caso de interrupciones en el viaje, lo que mejorará significativamente la experiencia del usuario. La interfaz se diseñará para interacciones intuitivas, fluidas y sin estrés, centralizando todas las opciones e información de viaje en un único lugar. La capacidad de la aplicación para anticipar y abordar las necesidades del usuario antes de que se expresen explícitamente representa un cambio fundamental de la búsqueda reactiva a la asistencia proactiva y personalizada. Esto significa que el éxito de la aplicación dependerá no solo de la agregación eficiente de datos y la funcionalidad de reserva, sino, crucialmente, de sus capacidades predictivas y de su resolución de problemas basada en IA. Esto requiere modelos de IA sofisticados que puedan comprender el contexto, anticipar necesidades y ofrecer intervenciones oportunas y relevantes, creando una experiencia verdaderamente fluida y dinámica.  \n\n### **Panorama Actual de la Tecnología de Viajes y Tendencias de IA**\n\nEl mercado global del turismo está experimentando un crecimiento robusto, valorado en 686.32 mil millones de dólares en 2024 y proyectado a alcanzar 1431.88 mil millones de dólares para finales de 2037, con una Tasa de Crecimiento Anual Compuesta (CAGR) de 5.82% desde 2025\\. Se prevé que las llegadas internacionales a Estados Unidos superen los niveles pre-pandemia para 2026, lo que indica una fuerte trayectoria de recuperación y crecimiento.  \n\nDentro de este mercado más amplio, el sector de la IA en el turismo está demostrando un crecimiento explosivo. Estimado en 3,373.0 millones de dólares en 2024, se proyecta que alcance 13,868.8 millones de dólares para 2030, mostrando una notable CAGR del 26.7% desde 2025\\. Esta sustancial tasa de crecimiento subraya una significativa oportunidad de mercado y una creciente adopción de soluciones impulsadas por IA dentro de la industria de viajes. Las principales tendencias tecnológicas para 2025 incluyen la adopción generalizada de asistentes de viaje impulsados por IA, la hiper-personalización, los pagos sin fricciones, el seguimiento de la sostenibilidad y los avances en tecnologías de aeropuertos inteligentes como la biometría. La IA ya no es una simple palabra de moda, sino un componente esencial para lograr experiencias de viaje eficientes y mejoradas en todas las etapas del viaje. Los agentes de IA están específicamente posicionados para redefinir la experiencia del viajero, ofreciendo niveles sin precedentes de personalización y eficiencia al aprovechar los datos de comportamiento, las preferencias pasadas y los historiales de búsqueda para anticipar las necesidades del viajero y proporcionar recomendaciones precisas.  \n\nEl crecimiento acelerado del mercado de la IA en el turismo, que supera significativamente el crecimiento general del mercado turístico (26.7% frente a 5.82% de CAGR), indica una demanda fuerte y creciente de soluciones innovadoras de IA y una clara disposición de la industria y los consumidores a invertir y adoptarlas. Esto sugiere que los pioneros con plataformas de IA robustas y bien diseñadas están estratégicamente posicionados para capturar una cuota de mercado sustancial y liderar la transformación de la industria.\n\n### **Abordando las Brechas en las Aplicaciones de Viajes con IA Existentes**\n\nA pesar de los avances, las herramientas de IA actuales para la planificación de viajes presentan limitaciones notables, como la provisión de información desactualizada y una propensión a \"alucinar\" o fabricar hechos. Esto resalta la necesidad crítica de mecanismos robustos de fundamentación de datos, como la Generación Aumentada por Recuperación (RAG), para asegurar la precisión y confiabilidad de las respuestas de los LLM. La adopción más amplia de la IA en el turismo enfrenta varios desafíos: importantes preocupaciones sobre la privacidad y seguridad de los datos, altos costos de implementación y dificultades técnicas en la integración. Además, la observabilidad de agentes de IA complejos, especialmente en flujos de trabajo de múltiples componentes, aún se encuentra en sus etapas iniciales, lo que lleva a lagunas en el rastreo de extremo a extremo y dificulta la resolución de problemas.  \n\nLas brechas identificadas —alucinaciones, vulnerabilidades de privacidad de datos y observabilidad limitada— no son meros obstáculos técnicos, sino amenazas fundamentales a la confianza del usuario y a la viabilidad a largo plazo de las plataformas de viajes con IA. Una aplicación exitosa debe abordar proactivamente estos desafíos, transformándolos en ventajas competitivas fundamentales. Esto requiere un fuerte enfoque arquitectónico en la gobernanza de datos, una implementación meticulosa de RAG para combatir las imprecisiones y un monitoreo integral de extremo a extremo desde la fase de diseño inicial. Al integrar principios de diseño que mitigan explícitamente estos riesgos, como una implementación robusta de RAG para resolver el problema de las alucinaciones, medidas de seguridad estrictas para generar confianza en el usuario y una observabilidad completa para garantizar la fiabilidad del sistema y una depuración eficiente, la solución propuesta se convertirá en un diferenciador de mercado significativo.\n\n## **III. Diseño de la Arquitectura Central**\n\n### **A. Arquitectura de Sistemas Multi-Agente (MAS)**\n\n#### **Definición y Beneficios**\n\nUn Sistema Multi-Agente (MAS) se compone de múltiples agentes inteligentes que colaboran para lograr objetivos específicos, revolucionando la resolución de problemas complejos en la inteligencia artificial. Estos agentes son entidades autónomas, cada una capaz de percibir su entorno, tomar decisiones y ejecutar acciones, interactuando a menudo entre sí para optimizar los resultados. La adopción de MAS en el sector de los viajes mejora significativamente la eficiencia, optimiza las experiencias del cliente y allana el camino para futuras innovaciones.  \n\nLas ventajas clave del diseño MAS incluyen:\n\n* **Modularidad:** Las tareas complejas se dividen en componentes más pequeños y manejables, cada uno gestionado por un agente dedicado, lo que conduce a un enfoque de resolución de problemas más organizado y eficiente.    \n* **Flexibilidad:** Los agentes individuales pueden ser añadidos, eliminados o modificados sin necesidad de una revisión completa del sistema, lo cual es crucial para adaptarse a las dinámicas necesidades del negocio y los desafíos cambiantes.    \n* **Escalabilidad:** Nuevos agentes pueden integrarse sin problemas para manejar cargas de trabajo crecientes, permitiendo que las operaciones se mantengan robustas y ágiles durante picos de demanda o a medida que la aplicación crece.    \n* **Separación de Preocupaciones:** Cada agente se enfoca en su tarea específica, reduciendo la complejidad general del sistema y facilitando la identificación y resolución de problemas, lo que resulta en sistemas más robustos y mantenibles.    \n* **Manejo Eficiente de Tareas:** Al distribuir las cargas de trabajo entre múltiples agentes, los MAS pueden procesar información y tomar decisiones más rápidamente que los sistemas monolíticos, eliminando cuellos de botella y optimizando los procesos en tiempo real.    \n* **Inteligencia Colectiva:** La naturaleza colaborativa de los MAS permite a los agentes interactuar y compartir información, descubriendo conocimientos y soluciones que un enfoque de agente único podría pasar por alto, mejorando así la resolución de problemas con experiencia especializada.  \n\n#### **Roles y Responsabilidades de los Agentes**\n\nLos agentes de IA modernos a menudo integran Modelos de Lenguaje Grandes (LLM) como su motor cognitivo, lo que les permite comprender el contexto, generar respuestas similares a las humanas y participar en un razonamiento complejo, crucial para adaptarse a diversas funciones dentro del sistema. Para nuestra aplicación de viajes impulsada por IA, se diseñará un equipo especializado de agentes para manejar distintos aspectos del proceso de viaje:  \n\n* **Agente Investigador:** Este agente tiene la tarea de recopilar información completa y precisa sobre un tema dado. Sus responsabilidades incluyen analizar consultas de investigación, llevar a cabo una investigación exhaustiva para recopilar hechos y datos relevantes, organizar la información en un formato estructurado, asegurar la objetividad, citar fuentes e identificar lagunas de información. Este agente utilizará herramientas de búsqueda web y, potencialmente, accederá a bases de conocimiento propietarias.    \n* **Agente Planificador:** Este agente se centra en la creación de itinerarios de viaje personalizados y optimizados. Analizará las preferencias del usuario, las restricciones presupuestarias, los datos en tiempo real y los requisitos específicos para elaborar experiencias de viaje únicas, incluyendo la planificación óptima de rutas, comidas y alojamiento. Interactuará con las API de reserva y los sistemas CRM para el historial del usuario.    \n* **Agente de Reservas:** Responsable de gestionar todas las tareas relacionadas con las reservas, incluyendo vuelos, reservas de hotel, alquiler de coches y actividades. Este agente se integrará con los principales Sistemas de Distribución Global (GDS) y varios motores de reserva, gestionando los procesos de pago y las confirmaciones. Requiere sólidas capacidades de llamada a herramientas para interactuar con APIs externas.    \n* **Agente de Atención al Cliente:** Proporciona asistencia 24/7 a los usuarios. Sus funciones incluyen responder a preguntas frecuentes (FAQ), resolver problemas comunes, simplificar tareas rutinarias (por ejemplo, cambios de información de cuenta), personalizar las experiencias del cliente y ofrecer interacción proactiva informando a los usuarios de cambios (por ejemplo, retrasos de vuelos) y sugiriendo alternativas. Este agente utilizará intensivamente la IA conversacional, los módulos de memoria y la integración con CRM.    \n* **Agente de Recomendación:** Se especializa en ofrecer recomendaciones de viaje hiper-personalizadas. Analizará las reservas pasadas de un viajero, el historial de búsqueda, las reseñas, las actividades en redes sociales y los datos en tiempo real para adaptar sugerencias de destinos, alojamientos y actividades.    \n* **Agente de Precios Dinámicos:** Este agente monitoreará y ajustará continuamente las estrategias de precios para varios componentes de viaje (vuelos, hoteles, paquetes) basándose en las tendencias de reserva en tiempo real, eventos locales, tarifas de la competencia, días festivos, patrones climáticos y el comportamiento del usuario para maximizar los ingresos de los proveedores y ofrecer ofertas competitivas a los viajeros.    \n* **Agente de Sostenibilidad (Emergente):** Un agente avanzado que rastrea y recomienda opciones de viaje respetuosas con el medio ambiente. Esto incluye sugerir vuelos de bajas emisiones, hoteles sostenibles, transporte terrestre más ecológico y optimizar las rutas de vuelo para la eficiencia del combustible.  \n\n#### **Patrones de Orquestación**\n\nLangGraph, una extensión de LangChain, proporciona un potente enfoque basado en grafos para crear flujos de trabajo de IA estructurados, con estado y dinámicos. Permite definir nodos (que representan tareas o acciones) y aristas (que representan el flujo de información), ofreciendo mayor flexibilidad y escalabilidad en comparación con la lógica secuencial tradicional.  \n\nLos patrones de orquestación clave que se pueden implementar utilizando LangGraph incluyen:\n\n* **Orquestación Secuencial:** Los agentes se organizan en una tubería, donde cada agente procesa una tarea a su vez y pasa su salida al siguiente agente. Esto es ideal para flujos de trabajo donde cada paso se basa en el anterior, como el razonamiento en múltiples etapas para la generación de itinerarios.    \n* **Orquestación de Traspaso (Handoff):** Permite a los agentes transferir el control entre sí basándose en el contexto o la solicitud del usuario. Cada agente puede \"traspasar\" la conversación a un agente con la experiencia adecuada, asegurando una delegación dinámica y un manejo especializado. Esto es particularmente útil en escenarios de atención al cliente.    \n* **Orquestación Magentic:** Un patrón multi-agente flexible y de propósito general diseñado para tareas complejas y abiertas que requieren colaboración dinámica. Un gestor Magentic dedicado coordina un equipo de agentes especializados, seleccionando qué agente debe actuar a continuación basándose en el contexto en evolución y las capacidades del agente. Este patrón es muy adecuado para escenarios en los que la ruta de la solución no se conoce de antemano.    \n* **Orquestación de Chat Grupal:** Modela una conversación colaborativa entre agentes, opcionalmente incluyendo un participante humano. Un gestor de chat grupal coordina el flujo, determinando quién responde a continuación. Esto es potente para simular sesiones de lluvia de ideas o resolución colaborativa de problemas.    \n* **Orquestación Concurrente:** Permite que múltiples agentes trabajen en la misma tarea en paralelo. Este enfoque es valioso para escenarios donde diversas perspectivas o soluciones son beneficiosas, como el razonamiento de conjunto o la generación simultánea de múltiples opciones.  \n\nLangChain además proporciona herramientas como `RouterChain` y `MultiPromptChain` para dirigir dinámicamente las tareas al agente apropiado basándose en la comprensión contextual. El componente  \n\n`AgentExecutor` ejecuta agentes con sus herramientas y lógica definidas. La elección del patrón de orquestación (secuencial, traspaso, Magentic, etc.) no es simplemente un detalle de implementación técnica, sino una decisión estratégica que impacta directamente la capacidad de respuesta, la eficiencia y la capacidad general de la aplicación para manejar la complejidad inherente y la naturaleza dinámica de la planificación de viajes. La orquestación Magentic, con su énfasis en la adaptación dinámica y los ajustes de flujo de trabajo en tiempo real, parece la más alineada con los requisitos de \"hiper eficiente\" y \"dinámico\" de un agente de viajes de IA personalizado, ya que puede desglosar problemas complejos de manera efectiva y refinar soluciones iterativamente a través de la colaboración entre agentes.  \n\n#### **Comunicación entre Agentes y Gestión del Estado**\n\nLos sistemas multi-agente efectivos dependen de canales de comunicación robustos que permitan a los agentes compartir información, delegar tareas y colaborar eficientemente. Los protocolos de comunicación estandarizados son cruciales para asegurar que los agentes puedan entenderse entre sí, independientemente de sus complejidades individuales.  \n\nLangGraph es fundamental para la gestión del estado, permitiendo a los agentes mantener el contexto y manejar el historial de conversaciones a través de las interacciones. La clase  \n\n`State`, típicamente definida usando `TypedDict` y `Annotated`, se utiliza para rastrear los mensajes de la conversación, asegurando que los nuevos mensajes se añadan y el contexto se preserve. `MemorySaver` de `langgraph.checkpoint.memory` se emplea para persistir el estado del chatbot a través de las interacciones, asegurando la continuidad conversacional. Los agentes de LangChain además utilizan varios módulos de memoria para retener diferentes tipos de información: memoria de búfer a corto plazo para el historial de conversación inmediato, memoria vectorial (a menudo integrada con bases de datos vectoriales) para almacenar y recuperar preferencias de usuario a largo plazo o datos extensos, y memoria de resumen para la optimización de costos mediante la síntesis de interacciones más largas.  \n\nEl Protocolo de Contexto del Modelo (MCP) es un protocolo abierto diseñado para estandarizar cómo las aplicaciones proporcionan contexto a los Modelos de Lenguaje Grandes (LLM). Funciona como un \"puerto USB-C para aplicaciones de IA\", ofreciendo una forma universal de conectar modelos de IA a diversas fuentes de datos y herramientas. MCP es crucial para construir flujos de trabajo complejos sobre LLM, permitiendo a los agentes compartir conocimientos y delegar subtareas sin problemas, lo que conduce a soluciones más rápidas, más ricas en contexto y más precisas. La combinación de las sólidas capacidades de gestión de estado de LangGraph con el Protocolo de Contexto del Modelo (MCP) para la comunicación entre agentes ofrece una solución potente y completa para mantener el contexto y permitir una delegación compleja y fiable en un sistema multi-agente distribuido. Esto aborda directamente el desafío de \"rastreos incompletos e inconsistentes\" y la observabilidad fragmentada que a menudo se encuentran en los flujos de trabajo de IA de múltiples componentes , al proporcionar una forma estandarizada y explícita para que los agentes compartan contexto y acciones, lo cual es crucial para la depuración, el monitoreo y la garantía de la fiabilidad de un sistema de grado de producción.  \n\n#### **Tabla: Roles y Responsabilidades Clave de los Agentes de IA**\n\n| Agente Principal | Responsabilidades Primarias | Herramientas/Integraciones Clave | Propuesta de Valor |\n| :---- | :---- | :---- | :---- |\n| Agente Investigador | Recopilación exhaustiva de información, análisis de consultas, organización de datos. | Búsqueda web (API), bases de conocimiento propietarias, RAG. | Proporciona información precisa y actualizada para la toma de decisiones del agente. |\n| Agente Planificador | Creación de itinerarios personalizados, optimización de rutas, sugerencias de actividades/alojamiento. | APIs de reserva (vuelos, hoteles, actividades), CRM, datos de usuario históricos. | Genera planes de viaje eficientes y altamente personalizados. |\n| Agente de Reservas | Gestión de reservas (vuelos, hoteles, coches), procesamiento de pagos, confirmaciones. | GDS (Global Distribution Systems), APIs de proveedores directos, pasarelas de pago. | Simplifica y automatiza el proceso de reserva, asegurando transacciones fluidas. |\n| Agente de Atención al Cliente | Soporte 24/7, resolución de FAQ, gestión de problemas, asistencia proactiva. | LLM conversacionales, módulos de memoria, integración CRM. | Mejora la satisfacción del cliente a través de soporte instantáneo y personalizado. |\n| Agente de Recomendación | Ofrece sugerencias hiper-personalizadas de destinos, alojamientos y actividades. | Datos de comportamiento del usuario, historial de búsqueda, reseñas, datos en tiempo real. | Aumenta el compromiso del usuario y las oportunidades de venta cruzada/ascendente. |\n| Agente de Precios Dinámicos | Monitorea y ajusta precios en tiempo real para optimizar ingresos y ofertas. | Datos de tendencias de reserva, eventos, competencia, clima, comportamiento del usuario. | Maximiza la rentabilidad para los proveedores y ofrece precios competitivos a los viajeros. |\n| Agente de Sostenibilidad | Recomienda opciones de viaje ecológicas, optimiza rutas para eficiencia de combustible. | Datos de emisiones, certificaciones de sostenibilidad (hoteles), APIs de transporte. | Apoya la toma de decisiones de viaje responsable y sostenible. |\n\nExportar a Hojas de cálculo\n\n### **B. Marco de Generación Aumentada por Recuperación (RAG)**\n\n#### **Mejora de las Capacidades de LLM con Conocimiento Externo**\n\nLa Generación Aumentada por Recuperación (RAG) es una arquitectura crucial para optimizar el rendimiento de los Modelos de Lenguaje Grandes (LLM) al conectarlos con bases de conocimiento externas. Esta integración permite un control preciso sobre los datos de fundamentación utilizados por un LLM al formular una respuesta, asegurando que la IA generativa se limite a contenido específico y autorizado, como datos empresariales propietarios.  \n\n#### **Beneficios de RAG**\n\n* **Implementación y Escalado de IA Rentables:** RAG permite a las empresas utilizar fuentes de datos internas y autorizadas para mejorar significativamente el rendimiento del modelo sin el proceso computacionalmente costoso y que consume muchos recursos de reentrenamiento o ajuste fino de los modelos fundacionales. Esto permite escalar las aplicaciones de IA mientras se mitigan los aumentos de costos.    \n* **Acceso a Datos Actuales y Específicos del Dominio:** Los LLM tienen un \"corte de conocimiento\" basado en sus datos de entrenamiento. Los sistemas RAG superan esta limitación conectando los modelos con datos externos suplementarios en tiempo real, incorporando información actualizada en las respuestas generadas. Esto es vital para la naturaleza dinámica de la información de viajes, incluyendo precios en tiempo real, disponibilidad y noticias de última hora.    \n* **Reducción de Alucinaciones y Mejora de la Precisión:** Al fundamentar las respuestas de los LLM en hechos recuperados de bases de conocimiento verificadas, RAG minimiza significativamente la tendencia del modelo a generar información inexacta, irrelevante o fabricada (alucinaciones), mejorando así la calidad y utilidad de la respuesta.  \n\n#### **Componentes RAG y Flujo de Datos**\n\nUna arquitectura RAG típica implica varios elementos clave:\n\n* **UX de la Aplicación (Aplicación Web):** Proporciona la experiencia de usuario donde se originan las preguntas o indicaciones del usuario.    \n* **Servidor de Aplicaciones u Orquestador (Capa de Integración y Coordinación):** Este es el código de integración que gestiona los traspasos entre el sistema de recuperación de información y el LLM. Las soluciones comunes para coordinar este flujo de trabajo incluyen LangChain, LlamaIndex y Semantic Kernel.    \n* **Azure AI Search (Sistema de Recuperación de Información):** Una solución probada que proporciona el índice de búsqueda, la lógica de consulta y la carga útil (respuesta de consulta). Admite varias estrategias de indexación para cargar y actualizar contenido a escala, ofrece sólidas capacidades de consulta con ajuste de relevancia y garantiza seguridad y fiabilidad. El índice de búsqueda puede contener contenido tanto vectorial como no vectorial, y las consultas pueden ejecutarse utilizando búsquedas por palabras clave y vectoriales.    \n* **Azure OpenAI (LLM para IA Generativa):** Recibe la indicación original y los resultados del sistema de recuperación de información. El LLM luego analiza estos resultados para formular una respuesta coherente y precisa.  \n\nEl patrón RAG de alto nivel implica: Pregunta del usuario \\-\\> Envío de la indicación al Sistema de Recuperación de Información (por ejemplo, Azure AI Search) para encontrar información relevante \\-\\> Devolución de los resultados de búsqueda mejor clasificados a un LLM \\-\\> El LLM utiliza su comprensión del lenguaje natural y sus capacidades de razonamiento para generar una respuesta. Opcionalmente, se puede emplear la recuperación agéntica, donde un agente evalúa una respuesta y busca una mejor si es necesario.  \n\n#### **Bases de Datos Vectoriales para Búsqueda de Alto Rendimiento**\n\nLas bases de datos vectoriales desempeñan un papel crucial en las aplicaciones RAG al proporcionar una forma especializada de almacenar y consultar incrustaciones vectoriales. Estas incrustaciones son representaciones matemáticas de texto u otros datos que capturan el significado semántico y las relaciones, permitiendo a los sistemas RAG encontrar de forma rápida y precisa la información más relevante dentro de una vasta base de conocimiento.  \n\nLas opciones clave para bases de datos vectoriales de alto rendimiento incluyen:\n\n* **Pinecone:** Una base de datos vectorial totalmente gestionada, escalable y de alto rendimiento. Ofrece actualizaciones en tiempo real, búsqueda vectorial eficiente de alta dimensión, integraciones fluidas con marcos como LangChain y admite búsqueda híbrida (que combina la similitud vectorial con el filtrado por palabras clave). Pinecone es muy adecuada para soluciones robustas y listas para producción.    \n* **Weaviate:** Una base de datos vectorial de código abierto conocida por su sólido soporte para el filtrado de metadatos y sus capacidades modulares de búsqueda vectorial. Ofrece módulos de vectorización incorporados, un enfoque basado en esquemas para datos estructurados y no estructurados, manejo de datos multimodales y una API GraphQL flexible. Weaviate puede ser autoalojada o utilizada como un servicio gestionado.    \n* **Azure AI Search:** Como se mencionó, funciona como un sistema de recuperación de información que admite contenido tanto vectorial como no vectorial. Sus capacidades de consulta, incluida la búsqueda híbrida, están diseñadas para maximizar la relevancia y la recuperación en patrones RAG.    \n* **RagManagedDb (predeterminado de Vertex AI RAG Engine):** Un servicio de base de datos escalable distribuido regionalmente que ofrece una consistencia muy alta, alta disponibilidad y baja latencia. No requiere aprovisionamiento ni gestión adicionales, lo que facilita la creación rápida de prototipos y RAG a escala empresarial.  \n\nPara lograr un rendimiento \"hiper rápido\" en RAG, especialmente con datos de viaje dinámicos, un servicio gestionado como Pinecone o Azure AI Search (con sus robustas capacidades de búsqueda híbrida) sería altamente recomendado para el almacenamiento vectorial RAG central. Esto se debe a su enfoque en la escalabilidad, las actualizaciones en tiempo real y las consultas avanzadas. La elección de la base de datos vectorial es primordial para lograr el requisito de rendimiento \"hiper rápido\" en el marco RAG. Soluciones como Pinecone o Azure AI Search, con su énfasis en actualizaciones en tiempo real, búsqueda vectorial de alta dimensión y capacidades de consulta híbrida, abordan directamente la necesidad de una recuperación de información rápida y altamente relevante de datos de viaje dinámicos y extensos. Esta decisión impacta directamente la capacidad de respuesta y la precisión de las respuestas del agente de IA, lo cual es fundamental para la satisfacción y la confianza del usuario.\n\n### **C. Principios de Arquitectura de Microservicios**\n\n#### **Descomposición para Escalabilidad y Mantenibilidad**\n\nLa arquitectura de microservicios ha revolucionado el desarrollo de software al permitir la descomposición de aplicaciones monolíticas en servicios más pequeños, manejables e independientemente desplegables. Este estilo arquitectónico es intrínsecamente compatible con el diseño de sistemas multi-agente, donde cada agente de IA o un grupo lógico de agentes puede encapsularse y desplegarse como un microservicio independiente. Esta modularidad asegura que las actualizaciones sean eficientes y dirigidas, minimizando la interrupción de otros servicios y permitiendo una mayor agilidad y capacidad de respuesta a los cambios.  \n\n#### **Beneficios**\n\nLos beneficios de la arquitectura de microservicios se alinean directamente y amplifican las ventajas de los MAS:\n\n* **Modularidad:** Se alinea con los MAS al descomponer tareas complejas en servicios más pequeños y dedicados.    \n* **Flexibilidad:** Permite que los servicios individuales (agentes) se actualicen o reemplacen sin afectar todo el sistema.    \n* **Escalabilidad:** Permite el escalado independiente de los servicios en función de las demandas de carga de trabajo específicas, lo que conduce a una utilización más eficiente de los recursos.    \n* **Resiliencia:** Las fallas en un microservicio se aíslan, evitando fallas en cascada en toda la aplicación, mejorando así la fiabilidad general del sistema.  \n\n#### **Gateway API y Comunicación de Servicios**\n\nUn Gateway API servirá como el único punto de entrada para todas las solicitudes externas, enrutándolas a los microservicios de backend apropiados. Esto proporciona una interfaz unificada, seguridad, equilibrio de carga y limitación de velocidad. La comunicación interna de servicio a servicio se manejará a través de APIs bien definidas (por ejemplo, APIs RESTful, gRPC) o colas de mensajes asíncronas (por ejemplo, Kafka, RabbitMQ) para arquitecturas basadas en eventos. Esto asegura un acoplamiento débil entre los servicios y un flujo de datos eficiente. La sinergia entre los sistemas multi-agente y la arquitectura de microservicios es un habilitador crítico para lograr los aspectos \"hiper eficiente\" y \"escalable\" de la aplicación. Al encapsular cada agente de IA especializado como un microservicio independiente, el sistema obtiene los beneficios del desarrollo, despliegue y escalado independientes, lo que contribuye directamente a la agilidad, resiliencia y mantenibilidad general del sistema. Esto también facilita una separación más clara de las preocupaciones, haciendo que la depuración y la optimización sean más manejables en un entorno distribuido complejo.\n\n## **IV. Pila Tecnológica (Full Stack)**\n\n### **A. Tecnologías Frontend**\n\n#### **Selección de Framework para UI Dinámica**\n\nPara ofrecer una interfaz de usuario \"súper hermosa y dinámica\", la selección de un framework frontend moderno y de alto rendimiento es primordial.\n\n* **React.js:** Altamente recomendado como framework de referencia debido a su amplia popularidad, enorme soporte de la comunidad y extenso ecosistema (incluyendo React Router para enrutamiento y Redux para gestión de estado). Su fuerte respaldo por parte de Meta (Facebook) asegura actualizaciones continuas y una preparación para el futuro, convirtiéndolo en una opción fiable para aplicaciones a gran escala y complejas.    \n* **Vue.js:** Ofrece un excelente equilibrio entre simplicidad y escalabilidad. Su eficiente sistema de reactividad y su ligero DOM virtual contribuyen a un sólido rendimiento tanto para aplicaciones pequeñas como grandes. Vue cuenta con un ecosistema rico y en crecimiento con bibliotecas oficiales (Vue Router, Vuex) y una fuerte comunidad de código abierto, lo que garantiza su longevidad.    \n* **Angular:** Ideal para grandes aplicaciones empresariales debido a su escalabilidad incorporada, estructura estricta y dependencia de TypeScript. Las actualizaciones regulares de Google aseguran su competitividad, convirtiéndolo en una opción preparada para el futuro para proyectos que requieren una arquitectura clara y mantenibilidad.  \n\nOtras opciones como Svelte, Solid.js, Qwik y Astro priorizan el rendimiento y la simplicidad o la generación de sitios estáticos. Para una aplicación de IA altamente dinámica e interactiva, se preferiría React.js o Vue.js. La elección de React.js (o Vue.js) se alinea no solo con los requisitos de la UI dinámica, sino también con la necesidad crítica de una integración robusta con frameworks de IA como LangGraph. Su extenso ecosistema y el apoyo activo de la comunidad aumentan la probabilidad de encontrar bibliotecas bien soportadas y patrones establecidos para integrar salidas de IA en tiempo real y UIs conversacionales complejas, lo que acelera el desarrollo y asegura una experiencia de usuario fluida y receptiva. Esta elección contribuye directamente a la interfaz \"súper hermosa y dinámica\".  \n\n#### **Soporte de Interacción y Streaming en Tiempo Real**\n\nLa interfaz de usuario debe admitir actualizaciones en tiempo real y la transmisión de pasos intermedios de los agentes de IA para proporcionar una experiencia de usuario superior. Esto permite a los usuarios observar el proceso de razonamiento y las acciones del agente a medida que ocurren, mejorando la transparencia y el compromiso. LangGraph Platform ofrece transmisión nativa token por token y transmisión de pasos intermedios como una característica de primera clase, lo cual es crucial para ofrecer experiencias de usuario dinámicas e interactivas al integrarse con el backend de IA.  \n\n### **B. Tecnologías Backend**\n\n#### **Lógica Central de la Aplicación y Desarrollo de API**\n\nPython es el lenguaje más adecuado para el backend, dada su prevalencia en el desarrollo de IA/ML y el rico ecosistema de LangChain y LangGraph. Frameworks web de alto rendimiento como  \n\n**FastAPI** o **Flask** pueden utilizarse para construir APIs RESTful eficientes y escalables que sirvan a los flujos de trabajo de LangGraph y gestionen las interacciones entre el frontend y varios servicios backend. FastAPI, en particular, ofrece capacidades asíncronas que son beneficiosas para manejar solicitudes concurrentes e integrarse con servicios de IA.  \n\n#### **Integración con APIs de Viajes Externas**\n\nEl backend será responsable de gestionar integraciones complejas con una multitud de APIs de viajes de terceros, incluyendo Sistemas de Distribución Global (GDS) para vuelos y hoteles (por ejemplo, Amadeus GDS), APIs de proveedores directos (aerolíneas, cadenas hoteleras), servicios de alquiler de coches y proveedores de actividades. El  \n\n**Protocolo de Contexto del Modelo (MCP)** es altamente recomendado para estandarizar estas integraciones. MCP funciona como un protocolo abierto que estandariza cómo las aplicaciones proporcionan contexto a los LLM, ofreciendo un \"USB-C para IA\" que permite la conexión directa a integraciones preconstruidas y proporciona la flexibilidad para cambiar entre diferentes proveedores y vendedores de LLM. Este enfoque mitiga el bloqueo del proveedor y simplifica la gestión de diversas conexiones API. El énfasis en una integración robusta de API, particularmente a través de la adopción del Protocolo de Contexto del Modelo (MCP), destaca un enfoque estratégico para asegurar la adaptabilidad futura y evitar la dependencia de proveedores específicos de viajes. Esto permite que la plataforma agregue y presente eficientemente diversas opciones de viaje de una amplia gama de fuentes, lo cual es una ventaja competitiva fundamental para un agente de viajes de IA integral. Además, simplifica la complejidad de gestionar numerosas conexiones externas, contribuyendo a la eficiencia general del sistema.  \n\n## **V. Requisitos Técnicos y Optimización del Rendimiento**\n\nPara cumplir con la exigencia de ser \"hiper rápido\" e \"hiper eficiente\", la aplicación debe adherirse a principios estrictos de optimización del rendimiento y fiabilidad.\n\n### **Optimización de la Latencia**\n\nLa latencia es un factor crítico para la experiencia del usuario en aplicaciones de IA conversacionales. Para minimizarla, se implementarán varias estrategias :  \n\n* **Monitoreo Continuo:** Se establecerá un monitoreo en tiempo real utilizando herramientas como New Relic o Datadog para rastrear métricas clave como el Tiempo hasta el Primer Token (TTFT) y el Tiempo por Token de Salida (TPOT), y el tiempo total de respuesta. Esto permitirá identificar cuellos de botella y establecer líneas de base de rendimiento.    \n* **Optimización de Hardware y Software:**  \n  * **Hardware:** Se priorizará el uso de GPUs para acelerar las operaciones matemáticas intensivas en IA, lo que puede resultar en una mejora de 5 a 20 veces la velocidad en comparación con las CPUs.    \n  * **Software:** Se explorará el uso de modelos de IA más pequeños y eficientes (por ejemplo, MobileNet, SqueezeNet para tareas específicas) que requieren menos cálculos. Se optimizarán los    \n  * *kernels* de GPU y se fusionarán operaciones para reducir el uso de memoria y aumentar la velocidad.    \n* **Procesamiento Paralelo y Distribución de Carga:** Las tareas grandes se dividirán en subtareas más pequeñas que puedan ejecutarse concurrentemente en múltiples procesadores (CPUs o GPUs) o distribuirse a través de una red de computadoras. Esto es especialmente relevante para los sistemas multi-agente, donde varios agentes pueden trabajar en paralelo.    \n* **Técnicas de Compresión de Modelos:** Se aplicarán técnicas como la cuantificación (reducir la precisión de los pesos del modelo, por ejemplo, de 32 a 8 o 16 bits) o la poda (eliminar pesos redundantes) para reducir el tamaño y la complejidad de los modelos de IA, lo que lleva a tiempos de inferencia más rápidos y menor latencia.    \n* **Caché e Indexación:** Se implementarán mecanismos de caché para almacenar datos frecuentemente accedidos y se utilizarán CDNs (Redes de Entrega de Contenido) para reducir la latencia geográfica. Las bases de datos vectoriales como Pinecone o Azure AI Search son fundamentales para una indexación y recuperación rápidas en el contexto de RAG.    \n* **Optimización de Datos:** Se refinarán los procesos de preprocesamiento y limpieza de datos para reducir la cantidad de datos a procesar, utilizando técnicas como la reducción de dimensionalidad y la compresión de datos.  \n\n### **Fiabilidad y Tolerancia a Fallos**\n\nUn sistema de IA distribuido, como una arquitectura multi-agente, es susceptible a fallos en sus nodos. La tolerancia a fallos es la capacidad de un sistema para seguir funcionando durante las fallas, minimizando las interrupciones y asegurando la disponibilidad de los servicios para los usuarios.  \n\n* **Redundancia y Replicación:** Se implementarán copias de seguridad y se replicarán los datos en diferentes nodos para asegurar que, si un componente falla, otro pueda tomar el control y no se pierda información.    \n* **Mecanismos de Failover:** Se configurarán mecanismos para redirigir automáticamente el tráfico a instancias saludables cuando un componente falle.    \n* **Manejo de Errores en LangGraph:** LangGraph está diseñado para manejar fallas con gracia, lo que es crucial para la fiabilidad. Se implementarán mecanismos de recuperación de errores, como reintentos automáticos para tareas fallidas o escalado a procesos \"human-in-the-loop\" cuando sea necesario.    \n* **Consistencia de Datos:** En sistemas distribuidos, mantener la consistencia de los datos entre nodos es un desafío que debe abordarse cuidadosamente. La elección de bases de datos vectoriales con alta consistencia, como RagManagedDb, contribuye a esto.    \n* **Monitoreo y Observabilidad de Extremo a Extremo:** A pesar de las herramientas existentes, la observabilidad de agentes de IA complejos a través de múltiples sistemas sigue siendo un desafío. Se implementará la propagación del contexto de rastreo en todos los componentes y se mejorarán las anotaciones de límites de servicio para distinguir claramente el comportamiento de los agentes de las dependencias externas. La integración con herramientas como LangSmith para una visibilidad profunda es fundamental.  \n\n## **VI. Estrategia de Despliegue e Infraestructura (Enfoque en Replit)**\n\nEl desarrollo y despliegue se centrarán en Replit, aprovechando sus capacidades para un ciclo de desarrollo rápido y eficiente.\n\n### **Entorno de Desarrollo y Colaboración**\n\nReplit, como plataforma de desarrollo colaborativo, es ideal para el desarrollo de un agente de IA. Permite la creación de aplicaciones full-stack que requieren un servidor backend.  \n\n* **Replit como Agente Desarrollador:** La plataforma se utilizará para el desarrollo iterativo, las pruebas y la depuración de los agentes de IA, aprovechando su entorno integrado.  \n* **Control de Versiones:** La integración con GitHub facilitará el control de versiones y la colaboración en equipo.\n\n### **Despliegue en Producción**\n\nReplit ofrece varias opciones de despliegue, que deben seleccionarse cuidadosamente para cumplir con los requisitos de \"hiper rápido\" y \"hiper eficiente\".\n\n* **Despliegues Autoscale:** Esta opción se adapta a la demanda de la aplicación, escalando dinámicamente los servidores. Es un buen punto de partida para prototipos rápidos y aplicaciones de tamaño pequeño a mediano, ofreciendo escalado automático y gestión de infraestructura cero.    \n* **Despliegues de VM Reservadas:** Para cargas de trabajo más consistentes y críticas, las VM reservadas ofrecen una tarifa mensual constante con un 99.9% de tiempo de actividad, proporcionando un rendimiento más predecible.    \n* **Consideraciones para LangGraph:** LangGraph Platform, un servicio para desplegar y escalar aplicaciones LangGraph, ofrece infraestructura escalable con auto-escalado de colas de tareas y servidores, así como reintentos automatizados para tolerancia a fallos. Esto es crucial para la fiabilidad y escalabilidad de un sistema multi-agente en producción.    \n* **Despliegues Estáticos:** Aunque Replit ofrece despliegues estáticos para sitios web sin servidor , estos no son compatibles con aplicaciones generadas por el Agente de Replit que requieren un backend. Por lo tanto, no serán adecuados para la parte de la aplicación que aloja los agentes de IA.  \n\n### **Optimización para Rendimiento en Replit**\n\nPara asegurar que la aplicación sea \"hiper rápida\" y \"hiper eficiente\" dentro del entorno de Replit, se prestará atención a:\n\n* **Diseño sin Estado (Stateless):** Se diseñarán los agentes para que sean en su mayoría sin estado, almacenando el estado persistente en almacenes externos (bases de datos vectoriales, bases de datos relacionales). Esto facilita el escalado horizontal y la recuperación automática.    \n* **Procesamiento en Segundo Plano:** Las tareas pesadas o que consumen mucho tiempo se descargarán a trabajadores en segundo plano para evitar bloqueos en el hilo principal y mantener la capacidad de respuesta de la interfaz.    \n* **Monitoreo Integrado:** Se aprovechará la integración de LangGraph Platform con LangSmith para una observabilidad completa, permitiendo el monitoreo de métricas de rendimiento y la depuración de flujos de trabajo complejos.  \n\n## **VII. Fases de Desarrollo y Plan de Acción (0 a 100\\)**\n\nEl desarrollo de la aplicación se estructurará en fases incrementales, siguiendo un enfoque ágil para permitir la adaptación y la entrega de valor temprana.\n\n### **Fase 1: Planificación y Diseño (Semanas 1-4)**\n\n* **Definición de Casos de Uso y Roles de Agentes:** Detallar los casos de uso específicos de negocio y refinar los roles y responsabilidades de cada agente de IA (Investigador, Planificador, etc.).    \n* **Diseño de Arquitectura Detallado:** Finalizar la arquitectura de microservicios, los patrones de orquestación de LangGraph (priorizando Magentic), y la integración RAG. Definir la arquitectura de comunicación entre agentes y con servicios externos (MCP).    \n* **Selección de Pila Tecnológica:** Confirmar la pila tecnológica completa, incluyendo frameworks frontend, backend, bases de datos (vectoriales y relacionales), y servicios de IA (LLMs, TTS/STT).  \n* **Prototipo de UI/UX:** Desarrollar wireframes y maquetas de alta fidelidad para la interfaz de usuario, priorizando un diseño \"súper hermoso y dinámico\" y la experiencia conversacional.  \n\n### **Fase 2: Desarrollo del Core del Sistema Multi-Agente (Semanas 5-12)**\n\n* **Configuración del Entorno Base en Replit:** Establecer el entorno de desarrollo en Replit, configurar dependencias e integrar el control de versiones.    \n* **Desarrollo de Agentes Básicos:** Implementar los agentes principales (Investigador, Planificador, Atención al Cliente) con sus prompts de sistema claros y funciones básicas.    \n* **Implementación de LangGraph Core:** Construir el grafo inicial de LangGraph con nodos para cada agente y aristas que definan el flujo de trabajo básico.    \n* **Gestión de Estado y Memoria:** Implementar la gestión de estado con `TypedDict` y `MemorySaver` para mantener el contexto de la conversación. Integrar módulos de memoria de LangChain (búfer, vectorial, resumen).    \n* **Integración de Herramientas Inicial:** Conectar los agentes con herramientas básicas (por ejemplo, búsqueda web, APIs de fecha/hora) para validar la capacidad de llamada a herramientas.    \n* **Desarrollo de la Capa RAG Inicial:** Configurar la base de datos vectorial (por ejemplo, Pinecone, Azure AI Search) y el proceso de indexación de documentos. Implementar la función de recuperación de documentos para el agente investigador.    \n* **Pruebas Unitarias e Integración:** Realizar pruebas unitarias para cada función de agente y pruebas de integración para los flujos de trabajo de LangGraph.  \n\n### **Fase 3: Integración de Funcionalidades Avanzadas y Optimización (Semanas 13-24)**\n\n* **Integración Completa de APIs de Viajes:** Conectar el Agente de Reservas con GDS y APIs de proveedores directos. Utilizar MCP para estandarizar estas integraciones.    \n* **Desarrollo de Agentes de Recomendación y Precios Dinámicos:** Implementar la lógica de personalización y optimización de precios, integrando fuentes de datos en tiempo real.    \n* **Implementación de Voz a Voz (Opcional, pero Recomendado para \"Dinámico\"):** Integrar Whisper para Speech-to-Text (STT) y ElevenLabs para Text-to-Speech (TTS) para una interfaz de voz natural. Esto requiere optimización de latencia para interacciones en tiempo real.    \n* **Desarrollo de Frontend Avanzado:** Construir la interfaz de usuario con React.js/Vue.js, asegurando soporte para streaming de estados intermedios y una experiencia de usuario fluida.    \n* **Implementación de Microservicios:** Refactorizar los agentes en microservicios independientes y configurar el Gateway API.  \n* **Optimización de Rendimiento:** Aplicar técnicas de compresión de modelos, procesamiento paralelo y estrategias de caché para lograr un rendimiento \"hiper rápido\".    \n* **Seguridad y Privacidad:** Implementar cifrado de datos, controles de acceso y cumplimiento de normativas de privacidad (GDPR, etc.).    \n* **Monitoreo y Observabilidad:** Configurar LangSmith y otras herramientas para el monitoreo de extremo a extremo, incluyendo la propagación del contexto de rastreo.  \n\n### **Fase 4: Despliegue, Pruebas de Producción y Lanzamiento (Semanas 25-30)**\n\n* **Despliegue en Replit para Producción:** Seleccionar la estrategia de despliegue adecuada (Autoscale o VM Reservadas) en Replit.    \n* **Pruebas de Carga y Estrés:** Validar el rendimiento y la escalabilidad del sistema bajo cargas de trabajo elevadas.  \n* **Pruebas de Usuario (UAT):** Recopilar feedback de usuarios reales para identificar y corregir problemas de usabilidad y funcionalidad.  \n* **Lanzamiento y Monitoreo Continuo:** Desplegar la aplicación al público y establecer un monitoreo continuo para detectar anomalías y optimizar el rendimiento.  \n* **Iteración y Mejora Continua:** Basado en el monitoreo y el feedback de los usuarios, planificar y ejecutar ciclos de mejora continua, añadiendo nuevas funcionalidades y optimizando las existentes.\n\n## **VIII. Estrategia de Monetización**\n\nPara asegurar la viabilidad comercial de la aplicación, se considerarán modelos de negocio que aprovechen las capacidades de la IA y el valor que aporta a los usuarios y proveedores.\n\n* **Modelo Freemium:** Se ofrecerán funcionalidades básicas de planificación y búsqueda de viajes de forma gratuita, atrayendo una amplia base de usuarios. Las características premium, como la asistencia de viaje avanzada, la planificación de itinerarios hiper-personalizados, el soporte 24/7 con agentes de IA dedicados, el acceso a ofertas exclusivas o la navegación sin conexión, requerirán una suscripción de pago o compras dentro de la aplicación. Este modelo ha demostrado aumentar las tasas de adquisición de usuarios y la retención.    \n  * **Ejemplos de Características Premium:** Asistencia avanzada en la re-reserva de viajes, acceso a un agente de sostenibilidad dedicado, herramientas de análisis de datos de viaje personalizadas, o descuentos exclusivos a través de asociaciones.  \n* **Modelo Basado en Comisiones:** La aplicación puede funcionar como una agencia de viajes en línea (OTA) que gana comisiones de los proveedores de servicios (aerolíneas, hoteles, alquiler de coches, paquetes turísticos) por cada reserva realizada a través de la plataforma. Las comisiones varían: hoteles (15-30%), cruceros (hasta 25%), paquetes turísticos (10-20%), alquiler de coches (5-10%), y seguros de viaje (15-40%).    \n  * La aplicación no manejaría directamente los pagos, sino que pasaría los detalles de la tarjeta del cliente al proveedor, quien sería el \"merchant of record\".    \n* **Asociaciones Estratégicas:** Colaborar con aerolíneas, hoteles, empresas de alquiler de coches y negocios locales para expandir la oferta de servicios y asegurar términos comerciales exclusivos. Esto puede mejorar la propuesta de valor para los usuarios y generar ingresos adicionales a través de acuerdos de afiliación o comisiones más altas.    \n* **Licenciamiento B2B de Agentes de IA:** Dada la modularidad del sistema multi-agente, se podría explorar el licenciamiento de agentes específicos (por ejemplo, el Agente de Atención al Cliente o el Agente de Precios Dinámicos) a otras empresas de la industria turística que busquen mejorar sus propias operaciones.    \n* **Publicidad Dirigida (con consentimiento del usuario):** Ofrecer oportunidades de publicidad no intrusiva y altamente relevante basada en las preferencias y el historial de viaje de los usuarios, siempre con un estricto cumplimiento de las políticas de privacidad.\n\n## **IX. Consideraciones de Seguridad, Privacidad y Fiabilidad**\n\nLa implementación de una aplicación de IA en el sector de los viajes, que maneja grandes volúmenes de datos personales y transacciones financieras, requiere un enfoque riguroso en la seguridad, la privacidad y la fiabilidad.\n\n### **Seguridad y Privacidad de Datos**\n\n* **Protección de Datos Sensibles:** La aplicación manejará datos altamente sensibles, como información personal, historial de viajes, preferencias y detalles de pago. Es fundamental proteger estos datos mediante cifrado (en tránsito y en reposo) y cumplir estrictamente con las leyes de protección de datos (por ejemplo, GDPR, CCPA).    \n* **Consentimiento del Usuario y Control:** Se implementarán flujos de consentimiento claros y explícitos para el usuario en todas las operaciones de acceso a datos y ejecución de acciones. Los usuarios deben tener control sobre qué datos se comparten y qué acciones se realizan, con interfaces de usuario transparentes para revisar y autorizar actividades.    \n* **Seguridad de las Herramientas y APIs:** Los agentes de IA interactuarán con numerosas APIs externas y herramientas. Cada herramienta debe ser tratada con precaución, y se requerirá el consentimiento explícito del usuario antes de invocar cualquier herramienta. Las descripciones de las herramientas deben ser claras y los usuarios deben comprender su función antes de autorizar su uso.    \n* **Detección de Fraude:** Los sistemas de IA pueden ser utilizados para la detección y prevención de fraudes en las reservas y transacciones, añadiendo una capa de seguridad financiera.    \n* **Auditoría y Trazabilidad:** Se mantendrán registros detallados de las interacciones de los agentes y las llamadas a herramientas para facilitar la auditoría y la trazabilidad, lo que es crucial para la depuración y la seguridad.\n\n### **Fiabilidad y Tolerancia a Fallos**\n\n* **Diseño Robusto del Sistema Distribuido:** Los sistemas multi-agente son inherentemente distribuidos y, por lo tanto, propensos a fallas en los nodos. La arquitectura se diseñará con la resiliencia y la tolerancia a fallos como principios clave.    \n* **Redundancia y Recuperación:** Se implementarán mecanismos de redundancia y replicación de datos para asegurar que el sistema pueda seguir operando incluso si un componente falla. Los mecanismos de    \n* *failover* automático redirigirán el tráfico a instancias saludables.    \n* **Gestión de Errores a Nivel de Agente:** LangGraph y LangChain ofrecen características para el manejo de errores y la recuperación. Se diseñarán flujos de trabajo con mecanismos de reintento, escalado a intervención humana o reasignación de tareas a agentes alternativos en caso de fallos.    \n* **Monitoreo Proactivo:** El monitoreo continuo de la latencia, el rendimiento y el estado del sistema es vital. Se establecerán umbrales y alertas para detectar problemas antes de que afecten la experiencia del usuario. La observabilidad de extremo a extremo, incluyendo la propagación del contexto de rastreo a través de los microservicios y las interacciones de los agentes, será una prioridad para diagnosticar y resolver problemas de manera eficiente.  \n\n## **X. Conclusiones y Recomendaciones**\n\nEl desarrollo de un agente de viajes impulsado por IA, como se describe en este informe, representa una oportunidad significativa para innovar en el mercado turístico, que está experimentando un crecimiento exponencial en la adopción de soluciones de inteligencia artificial. La demanda de experiencias de viaje hiper-personalizadas y eficientes es clara, y las limitaciones de las herramientas de IA existentes (como las alucinaciones y la información desactualizada) presentan una oportunidad para diferenciarse mediante una arquitectura robusta y centrada en la precisión.\n\nLa implementación de un **Sistema Multi-Agente (MAS)** orquestado por **LangGraph** es fundamental para lograr la flexibilidad, escalabilidad y eficiencia requeridas. La capacidad de los agentes especializados para colaborar y delegar tareas dinámicamente permitirá manejar la complejidad inherente de la planificación de viajes. La adopción del **Protocolo de Contexto del Modelo (MCP)** es una recomendación clave para estandarizar la comunicación entre agentes y con servicios externos, lo que no solo mejora la interoperabilidad sino que también aborda desafíos críticos de observabilidad en sistemas distribuidos.\n\nEl marco de **Generación Aumentada por Recuperación (RAG)** es indispensable para asegurar que las respuestas del LLM sean precisas, relevantes y estén fundamentadas en datos actuales y autorizados, mitigando el riesgo de alucinaciones. La selección de una base de datos vectorial de alto rendimiento, como Pinecone o Azure AI Search, será crucial para la velocidad y la relevancia de la recuperación de información.\n\nLa arquitectura de **microservicios** complementa perfectamente el diseño MAS, permitiendo el desarrollo, despliegue y escalado independiente de cada componente, lo que se traduce en una mayor agilidad, resiliencia y mantenibilidad del sistema. Para el frontend, **React.js** o **Vue.js** son las opciones más adecuadas para construir una interfaz de usuario \"súper hermosa y dinámica\" con soporte para streaming en tiempo real, mientras que **Python con FastAPI** en el backend proporcionará la base para una lógica de aplicación eficiente y escalable.\n\nEl uso de **Replit** como entorno de desarrollo y despliegue es una elección práctica para la agilidad, pero se requerirá una cuidadosa consideración de las opciones de despliegue de Replit (Autoscale o VM Reservadas) y la implementación de patrones de diseño sin estado y procesamiento en segundo plano para garantizar el rendimiento en producción.\n\n**Recomendaciones Clave para el Plan de Acción:**\n\n1. **Priorizar la Precisión sobre la Complejidad Inicial:** Aunque la visión es ambiciosa, la fase inicial debe centrarse en la implementación impecable de RAG para garantizar la precisión de las respuestas del agente, ya que la confianza del usuario es primordial.  \n2. **Inversión en Observabilidad:** Desde el inicio, integrar herramientas de monitoreo de extremo a extremo y asegurar la propagación del contexto de rastreo (facilitado por MCP) es crucial para la depuración y la optimidad del sistema.  \n3. **Desarrollo Iterativo de Agentes:** Comenzar con un conjunto limitado de agentes clave y expandir sus capacidades y el número de agentes en fases posteriores, permitiendo un aprendizaje y una optimización continuos.  \n4. **Enfoque en la Experiencia del Usuario (UX):** La interfaz \"súper hermosa y dinámica\" no es solo estética; es fundamental para la usabilidad y la adopción. Las pruebas de usuario y la iteración constante del diseño de la interfaz son esenciales.  \n5. **Estrategia de Monetización Flexible:** Implementar un modelo freemium con un camino claro hacia las características premium y explorar asociaciones estratégicas para diversificar las fuentes de ingresos y maximizar el valor.  \n6. **Seguridad por Diseño:** Integrar las consideraciones de seguridad y privacidad en cada etapa del ciclo de vida del desarrollo, desde el diseño de la arquitectura hasta el despliegue y el monitoreo continuo.\n\nAl seguir esta hoja de ruta, la aplicación de viajes impulsada por IA estará bien posicionada para ofrecer una experiencia de usuario transformadora, capturar una cuota significativa del creciente mercado de IA en el turismo y establecer un nuevo estándar de eficiencia y personalización en la industria.","size_bytes":59118},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { langGraphOrchestrator } from \"./services/langGraph\";\nimport { researchAgent } from \"./services/agents/researchAgent\";\nimport { plannerAgent } from \"./services/agents/plannerAgent\";\nimport { recommendationAgent } from \"./services/agents/recommendationAgent\";\nimport { customerServiceAgent } from \"./services/agents/customerServiceAgent\";\nimport { ecuadorTourismService } from \"./services/ecuadorTourismService\";\nimport { insertMessageSchema, insertConversationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Chat and Conversation routes\n  app.post('/api/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertConversationSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const conversation = await storage.createConversation(validatedData);\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  app.get('/api/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getUserConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get('/api/conversations/:id/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getConversationMessages(id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Multi-Agent Chat Processing\n  app.post('/api/chat/process', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message, conversationId, agentType } = req.body;\n      \n      if (!message || !conversationId || !agentType) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get user profile and conversation history\n      const userProfile = await storage.getUser(userId);\n      const conversationHistory = await storage.getConversationMessages(conversationId);\n      \n      // Build agent context\n      const agentContext = {\n        userId,\n        conversationId,\n        userProfile,\n        conversationHistory: conversationHistory.map(msg => ({\n          role: msg.role,\n          content: msg.content,\n          agentType: msg.agentType || undefined,\n        })),\n        currentAgent: agentType,\n      };\n\n      // Process message through LangGraph orchestrator\n      const agentResponse = await langGraphOrchestrator.processMessage(agentContext, message);\n      \n      // Store user message\n      await storage.createMessage({\n        conversationId,\n        role: 'user',\n        content: message,\n      });\n      \n      // Store agent response\n      await storage.createMessage({\n        conversationId,\n        role: 'assistant',\n        content: agentResponse.content,\n        agentType: agentType,\n        metadata: agentResponse.metadata,\n      });\n      \n      // Update conversation with new agent if suggested\n      if (agentResponse.nextAgent) {\n        await storage.updateConversation(conversationId, {\n          activeAgent: agentResponse.nextAgent,\n        });\n      }\n      \n      res.json({\n        response: agentResponse.content,\n        nextAgent: agentResponse.nextAgent,\n        metadata: agentResponse.metadata,\n        shouldEnd: agentResponse.shouldEnd,\n      });\n    } catch (error) {\n      console.error(\"Error processing chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Individual Agent Routes\n  app.post('/api/agents/research', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { query, budget, duration, travelStyle, interests, timeOfYear } = req.body;\n      \n      const researchQuery = {\n        query,\n        budget,\n        duration,\n        travelStyle,\n        interests,\n        timeOfYear,\n      };\n      \n      const context = {\n        userId,\n        conversationId: req.body.conversationId,\n        userProfile: await storage.getUser(userId),\n      };\n      \n      const result = await researchAgent.processQuery(researchQuery, context);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in research agent:\", error);\n      res.status(500).json({ message: \"Failed to process research query\" });\n    }\n  });\n\n  app.post('/api/agents/planner', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const planningRequest = req.body;\n      \n      const context = {\n        userId,\n        conversationId: req.body.conversationId,\n        userProfile: await storage.getUser(userId),\n      };\n      \n      const result = await plannerAgent.createItinerary(planningRequest, context);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in planner agent:\", error);\n      res.status(500).json({ message: \"Failed to create itinerary\" });\n    }\n  });\n\n  app.post('/api/agents/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const recommendationRequest = req.body;\n      \n      const context = {\n        userId,\n        conversationId: req.body.conversationId,\n        userProfile: await storage.getUser(userId),\n      };\n      \n      const result = await recommendationAgent.getRecommendations(recommendationRequest, context);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in recommendation agent:\", error);\n      res.status(500).json({ message: \"Failed to get recommendations\" });\n    }\n  });\n\n  app.post('/api/agents/customer-service', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { query, category, urgency, language } = req.body;\n      \n      const supportRequest = {\n        query,\n        category,\n        urgency,\n        language,\n      };\n      \n      const context = {\n        userId,\n        conversationId: req.body.conversationId,\n        userProfile: await storage.getUser(userId),\n        conversationHistory: [], // Would be populated from conversation\n      };\n      \n      const result = await customerServiceAgent.handleSupportRequest(supportRequest, context);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in customer service agent:\", error);\n      res.status(500).json({ message: \"Failed to handle support request\" });\n    }\n  });\n\n  // User Profile and Preferences\n  app.get('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const stats = await storage.getUserStats(userId);\n      \n      res.json({\n        ...user,\n        stats,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  app.put('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      \n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        ...updates,\n      });\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n\n  // Travel History and Searches\n  app.get('/api/user/travel-history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const searches = await storage.getUserTravelSearches(userId, limit);\n      res.json(searches);\n    } catch (error) {\n      console.error(\"Error fetching travel history:\", error);\n      res.status(500).json({ message: \"Failed to fetch travel history\" });\n    }\n  });\n\n  // Ecuador Tourism API routes\n  app.get('/api/ecuador/destinations', async (req, res) => {\n    try {\n      const { search, region, per_page = 10, page = 1 } = req.query;\n      \n      let destinations;\n      if (region && ['costa', 'andes', 'amazonia', 'galapagos'].includes(region as string)) {\n        destinations = await ecuadorTourismService.getDestinationsByRegion(region as any);\n      } else {\n        destinations = await ecuadorTourismService.getDestinations({\n          search: search as string,\n          per_page: parseInt(per_page as string),\n          page: parseInt(page as string),\n        });\n      }\n      \n      res.json(destinations);\n    } catch (error) {\n      console.error(\"Error fetching Ecuador destinations:\", error);\n      res.status(500).json({ message: \"Failed to fetch destinations\" });\n    }\n  });\n\n  app.get('/api/ecuador/destinations/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const destination = await ecuadorTourismService.getDestinationDetails(parseInt(id));\n      \n      if (!destination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      \n      res.json(destination);\n    } catch (error) {\n      console.error(\"Error fetching destination details:\", error);\n      res.status(500).json({ message: \"Failed to fetch destination details\" });\n    }\n  });\n\n  app.post('/api/ecuador/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { interests, budget, duration, travelStyle } = req.body;\n      \n      const recommendations = await ecuadorTourismService.getSmartRecommendations({\n        interests,\n        budget,\n        duration,\n        travelStyle,\n      });\n      \n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error generating recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  app.get('/api/ecuador/stats', async (req, res) => {\n    try {\n      const stats = await ecuadorTourismService.getDestinationStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching Ecuador tourism stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch tourism stats\" });\n    }\n  });\n\n  // Ecuador Tourism API routes\n  app.get('/api/ecuador/destinations', async (req, res) => {\n    try {\n      const { search, region, per_page = 10, page = 1 } = req.query;\n      \n      let destinations;\n      if (region && ['costa', 'andes', 'amazonia', 'galapagos'].includes(region as string)) {\n        destinations = await ecuadorTourismService.getDestinationsByRegion(region as any);\n      } else {\n        destinations = await ecuadorTourismService.getDestinations({\n          search: search as string,\n          per_page: parseInt(per_page as string),\n          page: parseInt(page as string),\n        });\n      }\n      \n      res.json(destinations);\n    } catch (error) {\n      console.error(\"Error fetching Ecuador destinations:\", error);\n      res.status(500).json({ message: \"Failed to fetch destinations\" });\n    }\n  });\n\n  app.get('/api/ecuador/destinations/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const destination = await ecuadorTourismService.getDestinationDetails(parseInt(id));\n      \n      if (!destination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      \n      res.json(destination);\n    } catch (error) {\n      console.error(\"Error fetching destination details:\", error);\n      res.status(500).json({ message: \"Failed to fetch destination details\" });\n    }\n  });\n\n  app.post('/api/ecuador/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { interests, budget, duration, travelStyle } = req.body;\n      \n      const recommendations = await ecuadorTourismService.getSmartRecommendations({\n        interests,\n        budget,\n        duration,\n        travelStyle,\n      });\n      \n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error generating recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  app.get('/api/ecuador/stats', async (req, res) => {\n    try {\n      const stats = await ecuadorTourismService.getDestinationStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching Ecuador tourism stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch tourism stats\" });\n    }\n  });\n\n  // Admin Routes\n  app.get('/api/admin/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const stats = await storage.getSystemStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.get('/api/admin/logs', isAuthenticated, async (req: any, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const logs = await storage.getSystemLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching system logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch system logs\" });\n    }\n  });\n\n  // Health Check\n  app.get('/api/health', (req, res) => {\n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: 'connected',\n        openai: 'connected',\n        pinecone: 'connected',\n        langGraph: 'operational',\n      },\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14636},"server/storage.ts":{"content":"import {\n  users,\n  conversations,\n  messages,\n  travelSearches,\n  systemLogs,\n  type User,\n  type UpsertUser,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type TravelSearch,\n  type InsertTravelSearch,\n  type SystemLog,\n  type InsertSystemLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (Required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Conversation operations\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getUserConversations(userId: string): Promise<Conversation[]>;\n  updateConversation(id: string, updates: Partial<InsertConversation>): Promise<Conversation>;\n  \n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getConversationMessages(conversationId: string): Promise<Message[]>;\n  \n  // Travel search operations\n  createTravelSearch(search: InsertTravelSearch): Promise<TravelSearch>;\n  getUserTravelSearches(userId: string, limit?: number): Promise<TravelSearch[]>;\n  \n  // System log operations\n  createSystemLog(log: InsertSystemLog): Promise<SystemLog>;\n  getSystemLogs(limit?: number): Promise<SystemLog[]>;\n  \n  // Analytics operations\n  getUserStats(userId: string): Promise<{\n    totalTrips: number;\n    totalConversations: number;\n    recentSearches: number;\n  }>;\n  \n  getSystemStats(): Promise<{\n    activeUsers: number;\n    todayQueries: number;\n    totalTrips: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (Required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          profileImageUrl: userData.profileImageUrl,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Conversation operations\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [created] = await db\n      .insert(conversations)\n      .values(conversation)\n      .returning();\n    return created;\n  }\n\n  async getUserConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.updatedAt));\n  }\n\n  async updateConversation(id: string, updates: Partial<InsertConversation>): Promise<Conversation> {\n    const [updated] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Message operations\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [created] = await db\n      .insert(messages)\n      .values(message)\n      .returning();\n    return created;\n  }\n\n  async getConversationMessages(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  // Travel search operations\n  async createTravelSearch(search: InsertTravelSearch): Promise<TravelSearch> {\n    const [created] = await db\n      .insert(travelSearches)\n      .values(search)\n      .returning();\n    return created;\n  }\n\n  async getUserTravelSearches(userId: string, limit: number = 10): Promise<TravelSearch[]> {\n    return await db\n      .select()\n      .from(travelSearches)\n      .where(eq(travelSearches.userId, userId))\n      .orderBy(desc(travelSearches.createdAt))\n      .limit(limit);\n  }\n\n  // System log operations\n  async createSystemLog(log: InsertSystemLog): Promise<SystemLog> {\n    const [created] = await db\n      .insert(systemLogs)\n      .values(log)\n      .returning();\n    return created;\n  }\n\n  async getSystemLogs(limit: number = 100): Promise<SystemLog[]> {\n    return await db\n      .select()\n      .from(systemLogs)\n      .orderBy(desc(systemLogs.createdAt))\n      .limit(limit);\n  }\n\n  // Analytics operations\n  async getUserStats(userId: string): Promise<{\n    totalTrips: number;\n    totalConversations: number;\n    recentSearches: number;\n  }> {\n    const [userRecord] = await db\n      .select({ totalTrips: users.totalTrips })\n      .from(users)\n      .where(eq(users.id, userId));\n\n    const [conversationCount] = await db\n      .select({ count: conversations.id })\n      .from(conversations)\n      .where(eq(conversations.userId, userId));\n\n    const [searchCount] = await db\n      .select({ count: travelSearches.id })\n      .from(travelSearches)\n      .where(\n        and(\n          eq(travelSearches.userId, userId),\n          eq(travelSearches.createdAt, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) // Last 7 days\n        )\n      );\n\n    return {\n      totalTrips: userRecord?.totalTrips || 0,\n      totalConversations: conversationCount ? 1 : 0,\n      recentSearches: searchCount ? 1 : 0,\n    };\n  }\n\n  async getSystemStats(): Promise<{\n    activeUsers: number;\n    todayQueries: number;\n    totalTrips: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [activeUsers] = await db\n      .select({ count: users.id })\n      .from(users)\n      .where(eq(users.updatedAt, new Date(Date.now() - 24 * 60 * 60 * 1000))); // Last 24 hours\n\n    const [todayQueries] = await db\n      .select({ count: messages.id })\n      .from(messages)\n      .where(eq(messages.createdAt, today));\n\n    const [totalTrips] = await db\n      .select({ sum: users.totalTrips })\n      .from(users);\n\n    return {\n      activeUsers: activeUsers ? 1 : 0,\n      todayQueries: todayQueries ? 1 : 0,\n      totalTrips: totalTrips?.sum || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6244},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  boolean,\n  decimal,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (Required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  // User type: traveler, business, admin\n  userType: varchar(\"user_type\").notNull().default(\"traveler\"),\n  // Travel preferences (for travelers)\n  travelStyle: varchar(\"travel_style\"), // adventure, cultural, luxury, budget\n  preferredDestinations: jsonb(\"preferred_destinations\").$type<string[]>(),\n  languagePreference: varchar(\"language_preference\").default(\"es\"),\n  totalTrips: integer(\"total_trips\").default(0),\n});\n\n// Travel conversations\nexport const conversations = pgTable(\"conversations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  activeAgent: varchar(\"active_agent\").notNull(), // research, planner, recommendations, customer-service\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat messages\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  conversationId: uuid(\"conversation_id\").references(() => conversations.id).notNull(),\n  role: varchar(\"role\").notNull(), // user, assistant, system\n  content: text(\"content\").notNull(),\n  agentType: varchar(\"agent_type\"), // which agent sent this message\n  metadata: jsonb(\"metadata\"), // for storing additional data like destinations, prices, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Travel searches and recommendations\nexport const travelSearches = pgTable(\"travel_searches\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  query: text(\"query\").notNull(),\n  destination: varchar(\"destination\"),\n  budget: decimal(\"budget\", { precision: 10, scale: 2 }),\n  duration: integer(\"duration\"), // days\n  travelDate: timestamp(\"travel_date\"),\n  preferences: jsonb(\"preferences\"),\n  results: jsonb(\"results\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System logs for monitoring\nexport const systemLogs = pgTable(\"system_logs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  level: varchar(\"level\").notNull(), // info, warning, error\n  message: text(\"message\").notNull(),\n  agentType: varchar(\"agent_type\"),\n  userId: varchar(\"user_id\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Business profiles for tourism companies\nexport const businessProfiles = pgTable(\"business_profiles\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  businessName: varchar(\"business_name\").notNull(),\n  businessType: varchar(\"business_type\").notNull(), // hotel, restaurant, tour_operator, transport, etc.\n  description: text(\"description\"),\n  location: varchar(\"location\"),\n  contactPhone: varchar(\"contact_phone\"),\n  contactEmail: varchar(\"contact_email\"),\n  website: varchar(\"website\"),\n  rating: decimal(\"rating\").default(\"0\"),\n  totalBookings: integer(\"total_bookings\").default(0),\n  isVerified: boolean(\"is_verified\").default(false),\n  services: jsonb(\"services\").$type<string[]>(), // list of services offered\n  priceRange: varchar(\"price_range\"), // budget, mid-range, luxury\n  availability: jsonb(\"availability\"), // schedule and availability info\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bookings/Orders between travelers and businesses\nexport const bookings = pgTable(\"bookings\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  travelerId: varchar(\"traveler_id\").references(() => users.id).notNull(),\n  businessId: varchar(\"business_id\").references(() => users.id).notNull(),\n  businessProfileId: uuid(\"business_profile_id\").references(() => businessProfiles.id).notNull(),\n  serviceName: varchar(\"service_name\").notNull(),\n  serviceType: varchar(\"service_type\").notNull(), // hotel, tour, transport, etc.\n  bookingDate: timestamp(\"booking_date\").notNull(),\n  serviceDate: timestamp(\"service_date\").notNull(),\n  numberOfGuests: integer(\"number_of_guests\").default(1),\n  totalAmount: decimal(\"total_amount\").notNull(),\n  currency: varchar(\"currency\").default(\"USD\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, confirmed, cancelled, completed\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"), // pending, paid, refunded\n  specialRequests: text(\"special_requests\"),\n  metadata: jsonb(\"metadata\"), // additional booking details\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Connections between travelers and businesses (favorites, follow, etc.)\nexport const userConnections = pgTable(\"user_connections\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  fromUserId: varchar(\"from_user_id\").references(() => users.id).notNull(),\n  toUserId: varchar(\"to_user_id\").references(() => users.id).notNull(),\n  connectionType: varchar(\"connection_type\").notNull(), // favorite, follow, blocked\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  conversations: many(conversations),\n  travelSearches: many(travelSearches),\n  businessProfile: one(businessProfiles),\n  travelerBookings: many(bookings, { relationName: \"travelerBookings\" }),\n  businessBookings: many(bookings, { relationName: \"businessBookings\" }),\n  connectionsFrom: many(userConnections, { relationName: \"connectionsFrom\" }),\n  connectionsTo: many(userConnections, { relationName: \"connectionsTo\" }),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  user: one(users, { fields: [conversations.userId], references: [users.id] }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, { fields: [messages.conversationId], references: [conversations.id] }),\n}));\n\nexport const travelSearchesRelations = relations(travelSearches, ({ one }) => ({\n  user: one(users, { fields: [travelSearches.userId], references: [users.id] }),\n}));\n\nexport const businessProfilesRelations = relations(businessProfiles, ({ one, many }) => ({\n  user: one(users, { fields: [businessProfiles.userId], references: [users.id] }),\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  traveler: one(users, { fields: [bookings.travelerId], references: [users.id], relationName: \"travelerBookings\" }),\n  business: one(users, { fields: [bookings.businessId], references: [users.id], relationName: \"businessBookings\" }),\n  businessProfile: one(businessProfiles, { fields: [bookings.businessProfileId], references: [businessProfiles.id] }),\n}));\n\nexport const userConnectionsRelations = relations(userConnections, ({ one }) => ({\n  fromUser: one(users, { fields: [userConnections.fromUserId], references: [users.id], relationName: \"connectionsFrom\" }),\n  toUser: one(users, { fields: [userConnections.toUserId], references: [users.id], relationName: \"connectionsTo\" }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  userType: true,\n  travelStyle: true,\n  preferredDestinations: true,\n  languagePreference: true,\n});\n\nexport const insertBusinessProfileSchema = createInsertSchema(businessProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserConnectionSchema = createInsertSchema(userConnections).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTravelSearchSchema = createInsertSchema(travelSearches).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSystemLogSchema = createInsertSchema(systemLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertTravelSearch = z.infer<typeof insertTravelSearchSchema>;\nexport type TravelSearch = typeof travelSearches.$inferSelect;\nexport type InsertSystemLog = z.infer<typeof insertSystemLogSchema>;\nexport type SystemLog = typeof systemLogs.$inferSelect;\nexport type InsertBusinessProfile = z.infer<typeof insertBusinessProfileSchema>;\nexport type BusinessProfile = typeof businessProfiles.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertUserConnection = z.infer<typeof insertUserConnectionSchema>;\nexport type UserConnection = typeof userConnections.$inferSelect;\n","size_bytes":10152},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1057},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(184, 100%, 35%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(20, 80%, 58%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(45, 93%, 47%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --neutral: hsl(220, 14%, 20%);\n  --light-gray: hsl(210, 20%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom classes for the design */\n.bg-primary {\n  background-color: hsl(207, 90%, 54%);\n}\n\n.bg-secondary {\n  background-color: hsl(184, 100%, 35%);\n}\n\n.bg-accent {\n  background-color: hsl(20, 80%, 58%);\n}\n\n.bg-neutral {\n  background-color: hsl(220, 14%, 20%);\n}\n\n.bg-light-gray {\n  background-color: hsl(210, 20%, 98%);\n}\n\n.text-primary {\n  color: hsl(207, 90%, 54%);\n}\n\n.text-secondary {\n  color: hsl(184, 100%, 35%);\n}\n\n.text-accent {\n  color: hsl(20, 80%, 58%);\n}\n\n.text-neutral {\n  color: hsl(220, 14%, 20%);\n}\n\n.text-success {\n  color: hsl(142, 76%, 36%);\n}\n\n.text-warning {\n  color: hsl(45, 93%, 47%);\n}\n\n.text-error {\n  color: hsl(0, 84.2%, 60.2%);\n}\n\n/* Typing indicator animation */\n.typing-indicator .dot {\n  display: inline-block;\n  width: 4px;\n  height: 4px;\n  background-color: #9CA3AF;\n  border-radius: 50%;\n  margin: 0 1px;\n  animation: typing 1.4s infinite;\n}\n\n@keyframes typing {\n  0%, 60%, 100% { transform: translateY(0); }\n  30% { transform: translateY(-10px); }\n}\n\n/* Agent status colors */\n.bg-success\\/20 {\n  background-color: hsl(142, 76%, 36%, 0.2);\n}\n\n.bg-primary\\/10 {\n  background-color: hsl(207, 90%, 54%, 0.1);\n}\n\n.bg-primary\\/20 {\n  background-color: hsl(207, 90%, 54%, 0.2);\n}\n\n.bg-secondary\\/10 {\n  background-color: hsl(184, 100%, 35%, 0.1);\n}\n\n.bg-accent\\/10 {\n  background-color: hsl(20, 80%, 58%, 0.1);\n}\n\n.border-primary {\n  border-color: hsl(207, 90%, 54%);\n}\n\n.border-secondary {\n  border-color: hsl(184, 100%, 35%);\n}\n\n.border-accent {\n  border-color: hsl(20, 80%, 58%);\n}\n\n/* Custom purple color for customer service agent */\n.bg-purple-500 {\n  background-color: hsl(262, 83%, 58%);\n}\n\n.bg-purple-500\\/10 {\n  background-color: hsl(262, 83%, 58%, 0.1);\n}\n\n.text-purple-500 {\n  color: hsl(262, 83%, 58%);\n}\n\n.border-purple-500 {\n  border-color: hsl(262, 83%, 58%);\n}\n\n.border-purple-500\\/20 {\n  border-color: hsl(262, 83%, 58%, 0.2);\n}\n\n.border-purple-500\\/50 {\n  border-color: hsl(262, 83%, 58%, 0.5);\n}\n","size_bytes":3793},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ecuadorTourismService.ts":{"content":"// import { openaiService } from './openai';\n\ninterface WordPressPost {\n  id: number;\n  title: { rendered: string };\n  content: { rendered: string };\n  excerpt: { rendered: string };\n  link: string;\n  date: string;\n  featured_media?: number;\n  _embedded?: {\n    'wp:featuredmedia'?: Array<{\n      source_url: string;\n      alt_text: string;\n    }>;\n  };\n}\n\ninterface TourismDestination {\n  id: number;\n  name: string;\n  description: string;\n  region: string;\n  type: string;\n  link: string;\n  image?: string;\n  excerpt: string;\n}\n\nconst ECUADOR_TOURISM_BASE_URL = 'https://turismo.ecuadors.live/wp-json/wp/v2';\n\nexport class EcuadorTourismService {\n  \n  // Obtener posts de destinos turísticos\n  async getDestinations(params?: {\n    search?: string;\n    per_page?: number;\n    page?: number;\n    category?: string;\n  }): Promise<TourismDestination[]> {\n    try {\n      const searchParams = new URLSearchParams();\n      \n      if (params?.search) searchParams.append('search', params.search);\n      if (params?.per_page) searchParams.append('per_page', params.per_page.toString());\n      if (params?.page) searchParams.append('page', params.page.toString());\n      if (params?.category) searchParams.append('categories', params.category);\n      \n      // Incluir media embebida para obtener imágenes\n      searchParams.append('_embed', 'true');\n      \n      const response = await fetch(`${ECUADOR_TOURISM_BASE_URL}/posts?${searchParams.toString()}`);\n      \n      if (!response.ok) {\n        throw new Error(`Error fetching destinations: ${response.status}`);\n      }\n      \n      const posts: WordPressPost[] = await response.json();\n      \n      return posts.map(post => this.transformPostToDestination(post));\n    } catch (error) {\n      console.error('Error fetching Ecuador tourism destinations:', error);\n      return [];\n    }\n  }\n\n  // Buscar destinos específicos por región\n  async getDestinationsByRegion(region: 'costa' | 'andes' | 'amazonia' | 'galapagos'): Promise<TourismDestination[]> {\n    try {\n      // Obtener categorías de WordPress\n      const categoriesResponse = await fetch(`${ECUADOR_TOURISM_BASE_URL}/categories?search=${region}`);\n      const categories = await categoriesResponse.json();\n      \n      if (categories.length > 0) {\n        return await this.getDestinations({ \n          category: categories[0].id.toString(),\n          per_page: 20 \n        });\n      }\n      \n      // Si no encuentra la categoría exacta, buscar por texto\n      return await this.getDestinations({ \n        search: region,\n        per_page: 10 \n      });\n    } catch (error) {\n      console.error(`Error fetching destinations for region ${region}:`, error);\n      return [];\n    }\n  }\n\n  // Buscar información específica de un destino\n  async searchDestination(query: string): Promise<TourismDestination[]> {\n    return await this.getDestinations({ \n      search: query,\n      per_page: 5 \n    });\n  }\n\n  // Obtener información detallada de un destino específico\n  async getDestinationDetails(id: number): Promise<TourismDestination | null> {\n    try {\n      const response = await fetch(`${ECUADOR_TOURISM_BASE_URL}/posts/${id}?_embed=true`);\n      \n      if (!response.ok) {\n        return null;\n      }\n      \n      const post: WordPressPost = await response.json();\n      return this.transformPostToDestination(post);\n    } catch (error) {\n      console.error(`Error fetching destination details for ID ${id}:`, error);\n      return null;\n    }\n  }\n\n  // Obtener recomendaciones inteligentes basadas en preferencias del usuario\n  async getSmartRecommendations(userPreferences: {\n    interests?: string[];\n    budget?: 'bajo' | 'medio' | 'alto';\n    duration?: number; // días\n    travelStyle?: string;\n  }): Promise<TourismDestination[]> {\n    try {\n      // Obtener una muestra amplia de destinos\n      const allDestinations = await this.getDestinations({ per_page: 50 });\n      \n      if (allDestinations.length === 0) {\n        return [];\n      }\n\n      // Filtrar destinos basados en preferencias usando lógica simple\n      let filteredDestinations = allDestinations;\n      \n      // Filtrar por intereses\n      if (userPreferences.interests && userPreferences.interests.length > 0) {\n        filteredDestinations = filteredDestinations.filter(dest => {\n          const destContent = `${dest.name} ${dest.description} ${dest.type}`.toLowerCase();\n          return userPreferences.interests!.some((interest: string) => \n            destContent.includes(interest.toLowerCase())\n          );\n        });\n      }\n      \n      // Filtrar por tipo de turismo según estilo de viaje\n      if (userPreferences.travelStyle) {\n        const style = userPreferences.travelStyle.toLowerCase();\n        filteredDestinations = filteredDestinations.filter(dest => {\n          const destType = dest.type.toLowerCase();\n          if (style.includes('aventura')) return destType.includes('aventura') || destType.includes('naturaleza');\n          if (style.includes('cultural')) return destType.includes('cultural');\n          if (style.includes('relax')) return destType.includes('playa') || destType.includes('bienestar');\n          return true; // Mantener todos si no coincide\n        });\n      }\n      \n      // Si no hay coincidencias específicas, devolver destinos populares\n      const finalRecommendations = filteredDestinations.length > 0 \n        ? filteredDestinations.slice(0, 5)\n        : allDestinations.slice(0, 5);\n        \n      return finalRecommendations;\n    } catch (error) {\n      console.error('Error generating smart recommendations:', error);\n      // Fallback: devolver destinos populares\n      return await this.getDestinations({ per_page: 5 });\n    }\n  }\n\n  // Transformar post de WordPress a formato de destino turístico\n  private transformPostToDestination(post: WordPressPost): TourismDestination {\n    const cleanExcerpt = post.excerpt.rendered\n      .replace(/<[^>]*>/g, '') // Remover HTML\n      .replace(/\\[&hellip;\\]/g, '...') // Reemplazar hellip\n      .trim();\n\n    const cleanDescription = post.content.rendered\n      .replace(/<[^>]*>/g, '') // Remover HTML\n      .substring(0, 500) + '...'; // Limitar descripción\n\n    // Determinar región basada en el contenido o categorías\n    const content = post.content.rendered.toLowerCase();\n    let region = 'Ecuador';\n    \n    if (content.includes('costa') || content.includes('playa') || content.includes('guayaquil') || content.includes('manta')) {\n      region = 'Costa';\n    } else if (content.includes('andes') || content.includes('quito') || content.includes('montaña') || content.includes('volcán')) {\n      region = 'Andes';\n    } else if (content.includes('amazonía') || content.includes('selva') || content.includes('oriente')) {\n      region = 'Amazonía';\n    } else if (content.includes('galápagos') || content.includes('galapagos')) {\n      region = 'Galápagos';\n    }\n\n    // Determinar tipo de turismo\n    let type = 'General';\n    if (content.includes('aventura')) type = 'Aventura';\n    else if (content.includes('cultural')) type = 'Cultural';\n    else if (content.includes('naturaleza') || content.includes('ecoturismo')) type = 'Naturaleza';\n    else if (content.includes('gastronomía')) type = 'Gastronómico';\n    else if (content.includes('playa')) type = 'Sol y Playa';\n\n    return {\n      id: post.id,\n      name: post.title.rendered,\n      description: cleanDescription,\n      excerpt: cleanExcerpt,\n      region,\n      type,\n      link: post.link,\n      image: post._embedded?.['wp:featuredmedia']?.[0]?.source_url\n    };\n  }\n\n  // Obtener estadísticas de destinos\n  async getDestinationStats(): Promise<{\n    totalDestinations: number;\n    regionDistribution: Record<string, number>;\n    typeDistribution: Record<string, number>;\n  }> {\n    try {\n      const destinations = await this.getDestinations({ per_page: 100 });\n      \n      const regionDistribution: Record<string, number> = {};\n      const typeDistribution: Record<string, number> = {};\n      \n      destinations.forEach(dest => {\n        regionDistribution[dest.region] = (regionDistribution[dest.region] || 0) + 1;\n        typeDistribution[dest.type] = (typeDistribution[dest.type] || 0) + 1;\n      });\n\n      return {\n        totalDestinations: destinations.length,\n        regionDistribution,\n        typeDistribution\n      };\n    } catch (error) {\n      console.error('Error getting destination stats:', error);\n      return {\n        totalDestinations: 0,\n        regionDistribution: {},\n        typeDistribution: {}\n      };\n    }\n  }\n}\n\nexport const ecuadorTourismService = new EcuadorTourismService();","size_bytes":8608},"server/services/langGraph.ts":{"content":"// LangGraph Multi-Agent Orchestration Service\nimport { openaiService } from './openai';\nimport { pineconeService } from './pinecone';\nimport { storage } from '../storage';\n\nexport type AgentType = 'research' | 'planner' | 'recommendations' | 'customer-service';\n\nexport interface AgentContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n  conversationHistory: Array<{ role: string; content: string; agentType?: string }>;\n  currentAgent: AgentType;\n  metadata?: any;\n}\n\nexport interface AgentResponse {\n  content: string;\n  nextAgent?: AgentType;\n  metadata?: any;\n  shouldEnd?: boolean;\n}\n\nexport class LangGraphOrchestrator {\n  private agents: Map<AgentType, (context: AgentContext, message: string) => Promise<AgentResponse>>;\n\n  constructor() {\n    this.agents = new Map();\n    this.initializeAgents();\n  }\n\n  private initializeAgents() {\n    // Research Agent\n    this.agents.set('research', async (context: AgentContext, message: string): Promise<AgentResponse> => {\n      try {\n        // Use RAG to enhance the research\n        const ragResults = await pineconeService.searchSimilar(message, 3);\n        const ragContext = ragResults.map(r => r.content).join('\\n');\n        \n        // Extract potential travel parameters\n        const budget = this.extractBudget(message);\n        const duration = this.extractDuration(message);\n        \n        // Get research results from OpenAI\n        const researchResult = await openaiService.searchDestinations(\n          message + (ragContext ? `\\n\\nAdditional context: ${ragContext}` : ''),\n          budget,\n          duration\n        );\n\n        // Store search in database\n        await storage.createTravelSearch({\n          userId: context.userId,\n          query: message,\n          results: researchResult,\n          budget: budget ? parseFloat(budget.replace(/[^0-9.]/g, '')) : undefined,\n          duration: duration,\n        });\n\n        // Log agent activity\n        await storage.createSystemLog({\n          level: 'info',\n          message: `Research agent processed query: ${message}`,\n          agentType: 'research',\n          userId: context.userId,\n          metadata: { destinationCount: researchResult.destinations.length },\n        });\n\n        return {\n          content: this.formatResearchResponse(researchResult),\n          nextAgent: 'planner', // Suggest moving to planner next\n          metadata: researchResult,\n        };\n      } catch (error) {\n        await storage.createSystemLog({\n          level: 'error',\n          message: `Research agent error: ${(error as Error).message}`,\n          agentType: 'research',\n          userId: context.userId,\n        });\n        \n        return {\n          content: \"Lo siento, tuve un problema al buscar destinos. Por favor, intenta reformular tu consulta.\",\n          shouldEnd: true,\n        };\n      }\n    });\n\n    // Planner Agent\n    this.agents.set('planner', async (context: AgentContext, message: string): Promise<AgentResponse> => {\n      try {\n        // Extract planning parameters\n        const destination = this.extractDestination(message, context);\n        const duration = this.extractDuration(message) || 7;\n        const budget = this.extractBudget(message) || \"$2000\";\n        const interests = this.extractInterests(message, context);\n\n        if (!destination) {\n          return {\n            content: \"Para crear un itinerario, necesito saber el destino. ¿Podrías especificar dónde te gustaría viajar?\",\n            shouldEnd: false,\n          };\n        }\n\n        // Get relevant travel info from RAG\n        const destinationInfo = await pineconeService.getDestinationInfo(destination);\n        const seasonalAdvice = await pineconeService.getSeasonalAdvice(destination, 'current');\n\n        // Create itinerary\n        const itinerary = await openaiService.createItinerary(\n          destination,\n          duration,\n          budget,\n          interests\n        );\n\n        await storage.createSystemLog({\n          level: 'info',\n          message: `Planner agent created itinerary for ${destination}`,\n          agentType: 'planner',\n          userId: context.userId,\n          metadata: { destination, duration, budget },\n        });\n\n        return {\n          content: this.formatItineraryResponse(itinerary),\n          nextAgent: 'recommendations',\n          metadata: itinerary,\n        };\n      } catch (error) {\n        await storage.createSystemLog({\n          level: 'error',\n          message: `Planner agent error: ${(error as Error).message}`,\n          agentType: 'planner',\n          userId: context.userId,\n        });\n        \n        return {\n          content: \"Tuve dificultades para crear tu itinerario. ¿Podrías proporcionar más detalles sobre tu viaje?\",\n          shouldEnd: true,\n        };\n      }\n    });\n\n    // Recommendations Agent\n    this.agents.set('recommendations', async (context: AgentContext, message: string): Promise<AgentResponse> => {\n      try {\n        const destination = this.extractDestination(message, context);\n        const userPreferences = {\n          travelStyle: context.userProfile?.travelStyle || 'cultural',\n          budget: this.extractBudget(message) || \"$2000\",\n          interests: this.extractInterests(message, context),\n          previousTrips: context.userProfile?.preferredDestinations || [],\n        };\n\n        if (!destination) {\n          return {\n            content: \"Para darte recomendaciones personalizadas, necesito saber el destino. ¿Sobre qué lugar te gustaría que te recomiende?\",\n            shouldEnd: false,\n          };\n        }\n\n        // Get personalized recommendations\n        const recommendations = await openaiService.getPersonalizedRecommendations(\n          destination,\n          userPreferences\n        );\n\n        await storage.createSystemLog({\n          level: 'info',\n          message: `Recommendations agent provided suggestions for ${destination}`,\n          agentType: 'recommendations',\n          userId: context.userId,\n          metadata: { destination, recommendationCount: recommendations.recommendations.length },\n        });\n\n        return {\n          content: this.formatRecommendationsResponse(recommendations),\n          nextAgent: 'customer-service',\n          metadata: recommendations,\n        };\n      } catch (error) {\n        await storage.createSystemLog({\n          level: 'error',\n          message: `Recommendations agent error: ${(error as Error).message}`,\n          agentType: 'recommendations',\n          userId: context.userId,\n        });\n        \n        return {\n          content: \"No pude generar recomendaciones en este momento. ¿Te gustaría que te ayude con algo más?\",\n          shouldEnd: true,\n        };\n      }\n    });\n\n    // Customer Service Agent\n    this.agents.set('customer-service', async (context: AgentContext, message: string): Promise<AgentResponse> => {\n      try {\n        const response = await openaiService.handleCustomerService(message, {\n          userId: context.userId,\n          conversationHistory: context.conversationHistory,\n          userProfile: context.userProfile,\n        });\n\n        await storage.createSystemLog({\n          level: 'info',\n          message: `Customer service agent handled query`,\n          agentType: 'customer-service',\n          userId: context.userId,\n        });\n\n        return {\n          content: response,\n          shouldEnd: false,\n        };\n      } catch (error) {\n        await storage.createSystemLog({\n          level: 'error',\n          message: `Customer service agent error: ${(error as Error).message}`,\n          agentType: 'customer-service',\n          userId: context.userId,\n        });\n        \n        return {\n          content: \"Disculpa, tengo problemas técnicos. ¿Podrías intentar nuevamente en unos minutos?\",\n          shouldEnd: true,\n        };\n      }\n    });\n  }\n\n  async processMessage(context: AgentContext, message: string): Promise<AgentResponse> {\n    const agent = this.agents.get(context.currentAgent);\n    if (!agent) {\n      throw new Error(`Agent ${context.currentAgent} not found`);\n    }\n\n    return await agent(context, message);\n  }\n\n  // Helper methods for extracting information\n  private extractBudget(message: string): string | undefined {\n    const budgetMatch = message.match(/\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?/);\n    return budgetMatch ? budgetMatch[0] : undefined;\n  }\n\n  private extractDuration(message: string): number | undefined {\n    const durationMatch = message.match(/(\\d+)\\s*(?:día|days?|semana|weeks?)/i);\n    if (durationMatch) {\n      const num = parseInt(durationMatch[1]);\n      return message.toLowerCase().includes('semana') || message.toLowerCase().includes('week') ? num * 7 : num;\n    }\n    return undefined;\n  }\n\n  private extractDestination(message: string, context: AgentContext): string | undefined {\n    // Look for destination in current message\n    const commonDestinations = [\n      'tokyo', 'japón', 'japan', 'paris', 'francia', 'france', 'london', 'londres', 'england',\n      'new york', 'nueva york', 'thailand', 'tailandia', 'italy', 'italia', 'spain', 'españa',\n      'mexico', 'méxico', 'brazil', 'brasil', 'argentina', 'chile', 'peru', 'perú'\n    ];\n    \n    const lowerMessage = message.toLowerCase();\n    for (const dest of commonDestinations) {\n      if (lowerMessage.includes(dest)) {\n        return dest;\n      }\n    }\n    \n    // Look in conversation history or metadata\n    if (context.metadata?.destination) {\n      return context.metadata.destination;\n    }\n    \n    return undefined;\n  }\n\n  private extractInterests(message: string, context: AgentContext): string[] {\n    const interests = [];\n    const interestKeywords = {\n      'cultura': ['cultura', 'cultural', 'museum', 'museo', 'history', 'historia'],\n      'aventura': ['aventura', 'adventure', 'hiking', 'trekking', 'extreme'],\n      'playa': ['playa', 'beach', 'mar', 'ocean', 'surf'],\n      'gastronomía': ['comida', 'food', 'gastronomía', 'restaurant', 'cocina'],\n      'vida nocturna': ['noche', 'nightlife', 'bar', 'club', 'fiesta'],\n      'naturaleza': ['naturaleza', 'nature', 'parque', 'park', 'wildlife'],\n    };\n\n    const lowerMessage = message.toLowerCase();\n    for (const [interest, keywords] of Object.entries(interestKeywords)) {\n      if (keywords.some(keyword => lowerMessage.includes(keyword))) {\n        interests.push(interest);\n      }\n    }\n\n    // Add user profile interests\n    if (context.userProfile?.travelStyle) {\n      interests.push(context.userProfile.travelStyle);\n    }\n\n    return interests.length > 0 ? interests : ['cultura', 'aventura'];\n  }\n\n  private formatResearchResponse(result: any): string {\n    let response = \"He encontrado algunos destinos increíbles para ti:\\n\\n\";\n    \n    result.destinations.forEach((dest: any, index: number) => {\n      response += `**${index + 1}. ${dest.name}**\\n`;\n      response += `${dest.description}\\n`;\n      response += `📅 Mejor época: ${dest.bestTime}\\n`;\n      response += `💰 Costo estimado: ${dest.estimatedCost}\\n`;\n      response += `✨ Destacados: ${dest.highlights.join(', ')}\\n\\n`;\n    });\n\n    if (result.insights.length > 0) {\n      response += \"💡 **Insights adicionales:**\\n\";\n      result.insights.forEach((insight: string) => {\n        response += `• ${insight}\\n`;\n      });\n    }\n\n    response += \"\\n¿Te gustaría que cree un itinerario detallado para alguno de estos destinos?\";\n    return response;\n  }\n\n  private formatItineraryResponse(result: any): string {\n    let response = \"¡Perfecto! He creado un itinerario detallado para tu viaje:\\n\\n\";\n    \n    result.itinerary.forEach((day: any) => {\n      response += `**Día ${day.day}:**\\n`;\n      day.activities.forEach((activity: any) => {\n        response += `${activity.time} - ${activity.activity}\\n`;\n        response += `📍 ${activity.location} | 💰 ${activity.cost}\\n`;\n        response += `${activity.description}\\n\\n`;\n      });\n    });\n\n    response += `**Costo total estimado: ${result.totalCost}**\\n\\n`;\n    \n    if (result.tips.length > 0) {\n      response += \"💡 **Consejos útiles:**\\n\";\n      result.tips.forEach((tip: string) => {\n        response += `• ${tip}\\n`;\n      });\n    }\n\n    response += \"\\n¿Te gustaría que te dé recomendaciones específicas de hoteles y restaurantes?\";\n    return response;\n  }\n\n  private formatRecommendationsResponse(result: any): string {\n    let response = \"Aquí tienes mis recomendaciones personalizadas:\\n\\n\";\n    \n    const groupedRecs = result.recommendations.reduce((acc: any, rec: any) => {\n      if (!acc[rec.type]) acc[rec.type] = [];\n      acc[rec.type].push(rec);\n      return acc;\n    }, {});\n\n    Object.entries(groupedRecs).forEach(([type, recs]: [string, any]) => {\n      const typeEmoji = {\n        'hotel': '🏨',\n        'restaurant': '🍽️',\n        'activity': '🎯',\n        'attraction': '🏛️'\n      };\n\n      response += `${typeEmoji[type as keyof typeof typeEmoji] || '📍'} **${type.charAt(0).toUpperCase() + type.slice(1)}s:**\\n`;\n      \n      recs.forEach((rec: any) => {\n        response += `• **${rec.name}** (${rec.priceRange})\\n`;\n        response += `  ⭐ ${rec.rating}/5 | 📍 ${rec.location}\\n`;\n        response += `  ${rec.description}\\n\\n`;\n      });\n    });\n\n    if (result.personalizationFactors.length > 0) {\n      response += \"🎯 **Personalizado para ti por:**\\n\";\n      result.personalizationFactors.forEach((factor: string) => {\n        response += `• ${factor}\\n`;\n      });\n    }\n\n    response += \"\\n¿Hay algo específico sobre el que te gustaría más información?\";\n    return response;\n  }\n}\n\nexport const langGraphOrchestrator = new LangGraphOrchestrator();\n","size_bytes":13700},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport interface ResearchResult {\n  destinations: Array<{\n    name: string;\n    description: string;\n    highlights: string[];\n    bestTime: string;\n    estimatedCost: string;\n    imageUrl: string;\n  }>;\n  insights: string[];\n  sources: string[];\n}\n\nexport interface ItineraryResult {\n  itinerary: Array<{\n    day: number;\n    activities: Array<{\n      time: string;\n      activity: string;\n      location: string;\n      cost: string;\n      description: string;\n    }>;\n  }>;\n  totalCost: string;\n  tips: string[];\n}\n\nexport interface RecommendationResult {\n  recommendations: Array<{\n    type: string; // hotel, restaurant, activity, attraction\n    name: string;\n    description: string;\n    rating: number;\n    priceRange: string;\n    location: string;\n    imageUrl: string;\n  }>;\n  personalizationFactors: string[];\n}\n\nexport class OpenAIService {\n  async searchDestinations(query: string, budget?: string, duration?: number): Promise<ResearchResult> {\n    try {\n      const prompt = `As a travel research expert, find and analyze destinations based on this query: \"${query}\". \n      ${budget ? `Budget: ${budget}` : ''} \n      ${duration ? `Duration: ${duration} days` : ''}\n      \n      Provide detailed, accurate information about 3-4 destinations that match the criteria. \n      Include specific details about costs, best times to visit, and unique highlights.\n      \n      Respond with JSON in this format: \n      {\n        \"destinations\": [\n          {\n            \"name\": \"Destination Name\",\n            \"description\": \"Brief description\",\n            \"highlights\": [\"highlight1\", \"highlight2\"],\n            \"bestTime\": \"Best time to visit\",\n            \"estimatedCost\": \"Cost estimate\",\n            \"imageUrl\": \"https://example.com/image.jpg\"\n          }\n        ],\n        \"insights\": [\"insight1\", \"insight2\"],\n        \"sources\": [\"source1\", \"source2\"]\n      }`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional travel research agent with access to current travel data. Provide accurate, helpful destination information.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return result as ResearchResult;\n    } catch (error) {\n      throw new Error(\"Failed to research destinations: \" + (error as Error).message);\n    }\n  }\n\n  async createItinerary(\n    destination: string, \n    duration: number, \n    budget: string, \n    interests: string[]\n  ): Promise<ItineraryResult> {\n    try {\n      const prompt = `As a travel planning expert, create a detailed ${duration}-day itinerary for ${destination}.\n      Budget: ${budget}\n      Interests: ${interests.join(\", \")}\n      \n      Create a comprehensive day-by-day itinerary with specific activities, timings, locations, and costs.\n      Include practical tips and local insights.\n      \n      Respond with JSON in this format:\n      {\n        \"itinerary\": [\n          {\n            \"day\": 1,\n            \"activities\": [\n              {\n                \"time\": \"9:00 AM\",\n                \"activity\": \"Activity name\",\n                \"location\": \"Specific location\",\n                \"cost\": \"$XX\",\n                \"description\": \"Brief description\"\n              }\n            ]\n          }\n        ],\n        \"totalCost\": \"$XXX\",\n        \"tips\": [\"tip1\", \"tip2\"]\n      }`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional travel planning agent specializing in creating detailed, practical itineraries.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return result as ItineraryResult;\n    } catch (error) {\n      throw new Error(\"Failed to create itinerary: \" + (error as Error).message);\n    }\n  }\n\n  async getPersonalizedRecommendations(\n    destination: string,\n    userPreferences: {\n      travelStyle: string;\n      budget: string;\n      interests: string[];\n      previousTrips: string[];\n    }\n  ): Promise<RecommendationResult> {\n    try {\n      const prompt = `As a travel recommendation expert, provide personalized recommendations for ${destination}.\n      \n      User Profile:\n      - Travel Style: ${userPreferences.travelStyle}\n      - Budget: ${userPreferences.budget}\n      - Interests: ${userPreferences.interests.join(\", \")}\n      - Previous Trips: ${userPreferences.previousTrips.join(\", \")}\n      \n      Provide personalized recommendations for hotels, restaurants, activities, and attractions.\n      Explain why each recommendation fits the user's profile.\n      \n      Respond with JSON in this format:\n      {\n        \"recommendations\": [\n          {\n            \"type\": \"hotel\",\n            \"name\": \"Hotel Name\",\n            \"description\": \"Description\",\n            \"rating\": 4.5,\n            \"priceRange\": \"$$$\",\n            \"location\": \"Area\",\n            \"imageUrl\": \"https://example.com/image.jpg\"\n          }\n        ],\n        \"personalizationFactors\": [\"factor1\", \"factor2\"]\n      }`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional travel recommendation agent specializing in personalized travel suggestions.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return result as RecommendationResult;\n    } catch (error) {\n      throw new Error(\"Failed to get recommendations: \" + (error as Error).message);\n    }\n  }\n\n  async handleCustomerService(\n    query: string,\n    context: {\n      userId: string;\n      conversationHistory: Array<{ role: string; content: string }>;\n      userProfile?: any;\n    }\n  ): Promise<string> {\n    try {\n      const messages = [\n        {\n          role: \"system\" as const,\n          content: `You are a helpful customer service agent for Sisa AI, a travel assistance platform. \n          Provide friendly, professional support. Help with booking issues, travel questions, \n          and general assistance. Keep responses conversational and helpful.\n          \n          User Context: ${context.userProfile ? JSON.stringify(context.userProfile) : 'No profile available'}`\n        },\n        ...context.conversationHistory.slice(-5), // Last 5 messages for context\n        {\n          role: \"user\" as const,\n          content: query\n        }\n      ];\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't process your request. Please try again.\";\n    } catch (error) {\n      throw new Error(\"Failed to handle customer service request: \" + (error as Error).message);\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":7734},"server/services/pinecone.ts":{"content":"// Pinecone Vector Database Service for RAG Implementation\nexport interface VectorDocument {\n  id: string;\n  content: string;\n  metadata: {\n    type: string; // destination, hotel, activity, etc.\n    location: string;\n    category: string;\n    lastUpdated: string;\n    source: string;\n  };\n}\n\nexport interface SearchResult {\n  id: string;\n  content: string;\n  metadata: any;\n  score: number;\n}\n\nexport class PineconeService {\n  private readonly apiKey: string;\n  private readonly environment: string;\n  private readonly indexName: string;\n\n  constructor() {\n    this.apiKey = process.env.PINECONE_API_KEY || process.env.PINECONE_API_KEY_ENV_VAR || \"default_key\";\n    this.environment = process.env.PINECONE_ENVIRONMENT || \"us-west1-gcp\";\n    this.indexName = process.env.PINECONE_INDEX_NAME || \"sisa-travel-knowledge\";\n  }\n\n  async upsertDocuments(documents: VectorDocument[]): Promise<void> {\n    try {\n      // In a real implementation, this would:\n      // 1. Generate embeddings for the content using OpenAI\n      // 2. Upsert to Pinecone index\n      // For now, simulating the structure\n      console.log(`Upserting ${documents.length} documents to Pinecone`);\n      \n      // Simulate API call\n      await this.simulateApiCall();\n    } catch (error) {\n      throw new Error(\"Failed to upsert documents to Pinecone: \" + (error as Error).message);\n    }\n  }\n\n  async searchSimilar(query: string, topK: number = 5, filter?: any): Promise<SearchResult[]> {\n    try {\n      // In a real implementation, this would:\n      // 1. Generate embedding for the query\n      // 2. Search Pinecone index\n      // 3. Return relevant documents\n      console.log(`Searching Pinecone for: \"${query}\"`);\n      \n      // Simulate API call\n      await this.simulateApiCall();\n      \n      // Return simulated results that would come from RAG\n      return this.getSimulatedResults(query, topK);\n    } catch (error) {\n      throw new Error(\"Failed to search Pinecone: \" + (error as Error).message);\n    }\n  }\n\n  private async simulateApiCall(): Promise<void> {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n\n  private getSimulatedResults(query: string, topK: number): SearchResult[] {\n    // This would be replaced with actual Pinecone results\n    const simulatedResults: SearchResult[] = [];\n    \n    // Generate contextually relevant results based on query\n    if (query.toLowerCase().includes('japan') || query.toLowerCase().includes('japón')) {\n      simulatedResults.push({\n        id: 'japan-cherry-blossom',\n        content: 'Japan is famous for its cherry blossom season (sakura) which typically occurs from late March to early May. The best viewing spots include Tokyo\\'s Ueno Park, Kyoto\\'s Philosopher\\'s Path, and Mount Fuji\\'s Chureito Pagoda. Spring weather is mild with temperatures ranging from 10-20°C.',\n        metadata: {\n          type: 'destination',\n          location: 'Japan',\n          category: 'seasonal-travel',\n          lastUpdated: new Date().toISOString(),\n          source: 'japan-tourism-board'\n        },\n        score: 0.95\n      });\n    }\n    \n    if (query.toLowerCase().includes('beach') || query.toLowerCase().includes('playa')) {\n      simulatedResults.push({\n        id: 'caribbean-beaches',\n        content: 'The Caribbean offers some of the world\\'s most pristine beaches with crystal-clear waters and white sand. Popular destinations include Barbados, Jamaica, and the Bahamas. Best visited during dry season (December-April) with temperatures around 24-29°C.',\n        metadata: {\n          type: 'destination',\n          location: 'Caribbean',\n          category: 'beach-destinations',\n          lastUpdated: new Date().toISOString(),\n          source: 'caribbean-tourism-org'\n        },\n        score: 0.89\n      });\n    }\n    \n    if (query.toLowerCase().includes('budget') || query.toLowerCase().includes('cheap')) {\n      simulatedResults.push({\n        id: 'budget-travel-tips',\n        content: 'Budget travel strategies include booking flights in advance, staying in hostels or budget hotels, using public transportation, eating at local restaurants, and taking advantage of free activities like walking tours and museums with free days.',\n        metadata: {\n          type: 'advice',\n          location: 'general',\n          category: 'budget-travel',\n          lastUpdated: new Date().toISOString(),\n          source: 'travel-experts'\n        },\n        score: 0.87\n      });\n    }\n    \n    return simulatedResults.slice(0, topK);\n  }\n\n  async getDestinationInfo(location: string): Promise<SearchResult[]> {\n    return await this.searchSimilar(`destination information for ${location}`, 3);\n  }\n\n  async getTravelTips(category: string): Promise<SearchResult[]> {\n    return await this.searchSimilar(`travel tips for ${category}`, 3);\n  }\n\n  async getSeasonalAdvice(destination: string, timeOfYear: string): Promise<SearchResult[]> {\n    return await this.searchSimilar(`${destination} travel advice for ${timeOfYear}`, 3);\n  }\n}\n\nexport const pineconeService = new PineconeService();\n","size_bytes":5075},"client/src/components/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { SystemStats, SystemLog } from \"@/types/chat\";\n\ninterface AdminDashboardProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AdminDashboard({ isOpen, onClose }: AdminDashboardProps) {\n  const [activeTab, setActiveTab] = useState(\"stats\");\n\n  // Get system stats\n  const { data: systemStats } = useQuery({\n    queryKey: ['/api/system/stats'],\n    enabled: isOpen,\n  });\n\n  // Get system logs\n  const { data: systemLogs = [] } = useQuery({\n    queryKey: ['/api/system/logs'],\n    enabled: isOpen,\n  });\n\n  const getLogBadgeVariant = (level: string) => {\n    switch (level) {\n      case 'error': return 'destructive';\n      case 'warning': return 'secondary';\n      case 'info': return 'default';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-cog text-primary\"></i>\n            <span>Panel de Administración</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"stats\">Estadísticas</TabsTrigger>\n            <TabsTrigger value=\"logs\">Logs del Sistema</TabsTrigger>\n            <TabsTrigger value=\"settings\">Configuración</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"stats\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Usuarios Activos</CardTitle>\n                  <i className=\"fas fa-users text-primary\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{systemStats?.activeUsers || 0}</div>\n                  <p className=\"text-xs text-gray-600\">Usuarios conectados ahora</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Consultas Hoy</CardTitle>\n                  <i className=\"fas fa-chart-line text-secondary\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{systemStats?.todayQueries || 0}</div>\n                  <p className=\"text-xs text-gray-600\">Consultas procesadas hoy</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Viajes Planificados</CardTitle>\n                  <i className=\"fas fa-map-marked-alt text-accent\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{systemStats?.totalTrips || 0}</div>\n                  <p className=\"text-xs text-gray-600\">Viajes creados en total</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Agentes del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-search text-green-600\"></i>\n                        <span className=\"font-medium\">Agente de Investigación</span>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-800\">Activo</Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Procesando consultas de destinos</p>\n                  </div>\n\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-calendar text-blue-600\"></i>\n                        <span className=\"font-medium\">Agente de Planificación</span>\n                      </div>\n                      <Badge className=\"bg-blue-100 text-blue-800\">Activo</Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Creando itinerarios personalizados</p>\n                  </div>\n\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-star text-purple-600\"></i>\n                        <span className=\"font-medium\">Agente de Recomendaciones</span>\n                      </div>\n                      <Badge className=\"bg-purple-100 text-purple-800\">Activo</Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Generando recomendaciones personalizadas</p>\n                  </div>\n\n                  <div className=\"p-4 bg-orange-50 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-headset text-orange-600\"></i>\n                        <span className=\"font-medium\">Agente de Soporte</span>\n                      </div>\n                      <Badge className=\"bg-orange-100 text-orange-800\">Activo</Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Atendiendo consultas de usuarios</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"logs\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Logs del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {systemLogs.length === 0 ? (\n                    <p className=\"text-center text-gray-500 py-8\">No hay logs disponibles</p>\n                  ) : (\n                    systemLogs.map((log: SystemLog) => (\n                      <div key={log.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={getLogBadgeVariant(log.level)} className=\"text-xs\">\n                              {log.level.toUpperCase()}\n                            </Badge>\n                            {log.agentType && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {log.agentType}\n                              </Badge>\n                            )}\n                          </div>\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(log.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-900\">{log.message}</p>\n                        {log.metadata && (\n                          <pre className=\"text-xs text-gray-600 mt-2 bg-gray-100 p-2 rounded overflow-x-auto\">\n                            {JSON.stringify(log.metadata, null, 2)}\n                          </pre>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configuración del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h3 className=\"font-medium mb-2\">Configuración de IA</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Modelo OpenAI</span>\n                      <Badge variant=\"outline\">GPT-4</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Base de Datos Vectorial</span>\n                      <Badge variant=\"outline\">Pinecone</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Multiagente</span>\n                      <Badge className=\"bg-green-100 text-green-800\">Activo</Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h3 className=\"font-medium mb-2\">Configuración de Idioma</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Idioma Principal</span>\n                      <Badge variant=\"outline\">Español</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Idiomas Soportados</span>\n                      <Badge variant=\"outline\">ES, EN</Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h3 className=\"font-medium mb-2\">Configuración de Base de Datos</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Estado de la DB</span>\n                      <Badge className=\"bg-green-100 text-green-800\">Conectada</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Tipo de DB</span>\n                      <Badge variant=\"outline\">PostgreSQL</Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"flex justify-end\">\n          <Button onClick={onClose}>Cerrar</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11475},"client/src/components/AgentsSidebar.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { AgentType, AGENTS } from \"@/types/agents\";\n\ninterface AgentsSidebarProps {\n  activeAgent: AgentType;\n  onAgentChange: (agent: AgentType) => void;\n}\n\nexport default function AgentsSidebar({ activeAgent, onAgentChange }: AgentsSidebarProps) {\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Agentes IA</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {Object.entries(AGENTS).map(([key, agent]) => (\n            <div\n              key={key}\n              className={cn(\n                \"p-3 rounded-lg cursor-pointer transition-all hover:shadow-md\",\n                activeAgent === key ? \"bg-primary/10 border-2 border-primary\" : \"bg-gray-50 hover:bg-gray-100\"\n              )}\n              onClick={() => onAgentChange(key as AgentType)}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={cn(\"w-8 h-8 rounded-full flex items-center justify-center\", agent.color)}>\n                    <i className={`${agent.icon} text-white text-sm`}></i>\n                  </div>\n                  <h3 className=\"font-medium text-gray-900\">{agent.name}</h3>\n                </div>\n                <Badge \n                  variant={agent.status === 'active' ? 'default' : 'secondary'}\n                  className=\"text-xs\"\n                >\n                  {agent.status}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-gray-600\">{agent.description}</p>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1889},"client/src/components/EcuadorTourismSidebar.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n// import { ScrollArea } from '@/components/ui/scroll-area';\nimport { Input } from '@/components/ui/input';\nimport { MapPin, Search, ExternalLink } from 'lucide-react';\n\ninterface TourismDestination {\n  id: number;\n  name: string;\n  description: string;\n  region: string;\n  type: string;\n  link: string;\n  image?: string;\n  excerpt: string;\n}\n\nexport default function EcuadorTourismSidebar() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedRegion, setSelectedRegion] = useState<string>('');\n\n  // Obtener destinos de Ecuador\n  const { data: destinations = [], isLoading } = useQuery<TourismDestination[]>({\n    queryKey: ['/api/ecuador/destinations', searchQuery, selectedRegion],\n    enabled: true,\n  });\n\n  // Obtener estadísticas de turismo\n  const { data: stats } = useQuery<{\n    totalDestinations: number;\n    regionDistribution: Record<string, number>;\n    typeDistribution: Record<string, number>;\n  }>({\n    queryKey: ['/api/ecuador/stats'],\n  });\n\n  const regions = [\n    { id: 'costa', name: 'Costa Pacífico', color: 'bg-blue-500' },\n    { id: 'andes', name: 'Los Andes', color: 'bg-green-500' },\n    { id: 'amazonia', name: 'Amazonía', color: 'bg-emerald-500' },\n    { id: 'galapagos', name: 'Galápagos', color: 'bg-cyan-500' },\n  ];\n\n  const tourismTypes = [\n    'Aventura', 'Cultural', 'Naturaleza', 'Gastronómico', \n    'Sol y Playa', 'Bienestar', 'LGBTIQ+', 'Comunitario'\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Búsqueda de Destinos */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold flex items-center space-x-2\">\n            <MapPin className=\"w-5 h-5 text-orange-500\" />\n            <span>Destinos Ecuador</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Buscar destinos...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Filtros por Región */}\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium\">Regiones</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              <Button\n                variant={selectedRegion === '' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedRegion('')}\n              >\n                Todas\n              </Button>\n              {regions.map((region) => (\n                <Button\n                  key={region.id}\n                  variant={selectedRegion === region.id ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedRegion(region.id)}\n                  className=\"text-xs\"\n                >\n                  {region.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de Destinos */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-sm font-medium\">\n            Destinos Encontrados ({destinations.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-96 overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"text-center py-4 text-gray-500\">\n                Cargando destinos...\n              </div>\n            ) : destinations.length === 0 ? (\n              <div className=\"text-center py-4 text-gray-500\">\n                No se encontraron destinos\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {destinations.map((destination) => (\n                  <div\n                    key={destination.id}\n                    className=\"border rounded-lg p-3 hover:bg-gray-50 transition-colors\"\n                  >\n                    {destination.image && (\n                      <img\n                        src={destination.image}\n                        alt={destination.name}\n                        className=\"w-full h-24 object-cover rounded mb-2\"\n                      />\n                    )}\n                    <h4 className=\"font-medium text-sm mb-1\">\n                      {destination.name}\n                    </h4>\n                    <p className=\"text-xs text-gray-600 mb-2\">\n                      {destination.excerpt.length > 100 \n                        ? destination.excerpt.substring(0, 100) + '...' \n                        : destination.excerpt}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex gap-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {destination.region}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {destination.type}\n                        </Badge>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => window.open(destination.link, '_blank')}\n                        className=\"p-1 h-6 w-6\"\n                      >\n                        <ExternalLink className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Estadísticas */}\n      {stats && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm font-medium\">\n              Estadísticas de Turismo\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div>\n                <div className=\"text-lg font-bold text-orange-600\">\n                  {stats.totalDestinations}\n                </div>\n                <div className=\"text-xs text-gray-600\">Destinos Totales</div>\n              </div>\n              \n              {Object.keys(stats.regionDistribution || {}).length > 0 && (\n                <div>\n                  <h5 className=\"text-xs font-medium mb-2\">Por Región:</h5>\n                  <div className=\"space-y-1\">\n                    {Object.entries(stats.regionDistribution).map(([region, count]) => (\n                      <div key={region} className=\"flex justify-between text-xs\">\n                        <span>{region}</span>\n                        <span className=\"font-medium\">{count as number}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Tipos de Turismo */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-sm font-medium\">\n            Tipos de Turismo en Ecuador\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-1\">\n            {tourismTypes.map((type) => (\n              <Badge key={type} variant=\"outline\" className=\"text-xs\">\n                {type}\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7690},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { User } from \"@shared/schema\";\n\ninterface HeaderProps {\n  user?: User;\n}\n\nexport default function Header({ user }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-10\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <i className=\"fas fa-brain text-2xl text-primary mr-2\"></i>\n              <h1 className=\"text-2xl font-bold text-neutral\">Sisa AI</h1>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <select className=\"bg-gray-100 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary\">\n                <option>Español</option>\n                <option>English</option>\n              </select>\n            </div>\n            \n            {user && (\n              <div className=\"flex items-center space-x-3\">\n                <Avatar>\n                  <AvatarImage src={user.profileImageUrl || undefined} alt={user.firstName || 'User'} />\n                  <AvatarFallback>\n                    {user.firstName?.[0] || user.email?.[0] || 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden sm:block\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {user.firstName || user.email}\n                  </p>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = '/api/logout'}\n                >\n                  Cerrar Sesión\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2109},"client/src/components/MainChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AgentType, AGENTS } from \"@/types/agents\";\nimport { Conversation, Message } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface MainChatInterfaceProps {\n  activeAgent: AgentType;\n}\n\nexport default function MainChatInterface({ activeAgent }: MainChatInterfaceProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [message, setMessage] = useState(\"\");\n  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Get user conversations\n  const { data: conversations = [] } = useQuery({\n    queryKey: ['/api/conversations'],\n    enabled: !!user,\n  });\n\n  // Get current conversation messages\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: ['/api/conversations', currentConversation?.id, 'messages'],\n    enabled: !!currentConversation,\n  });\n\n  // Create new conversation\n  const createConversationMutation = useMutation({\n    mutationFn: async (data: { title: string; activeAgent: string }): Promise<Conversation> => {\n      const response = await apiRequest('/api/conversations', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      return await response.json();\n    },\n    onSuccess: (conversation: Conversation) => {\n      setCurrentConversation(conversation);\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Necesitas iniciar sesión. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la conversación\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send message to agent\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { message: string; conversationId: string; agentType: string }): Promise<Message> => {\n      const response = await apiRequest('/api/chat/process', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/conversations', currentConversation?.id, 'messages'] \n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Necesitas iniciar sesión. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar el mensaje\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Start new conversation when agent changes\n  useEffect(() => {\n    if (user && !currentConversation) {\n      const title = `Conversación con ${AGENTS[activeAgent].name}`;\n      createConversationMutation.mutate({ title, activeAgent });\n    }\n  }, [activeAgent, user, currentConversation]);\n\n  const handleSendMessage = async () => {\n    if (!message.trim() || !currentConversation) return;\n\n    sendMessageMutation.mutate({\n      message: message.trim(),\n      conversationId: currentConversation.id,\n      agentType: activeAgent,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const startNewConversation = () => {\n    setCurrentConversation(null);\n    const title = `Nueva conversación con ${AGENTS[activeAgent].name}`;\n    createConversationMutation.mutate({ title, activeAgent });\n  };\n\n  return (\n    <div className=\"lg:col-span-2 space-y-4\">\n      <Card className=\"h-[600px] flex flex-col\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg font-semibold flex items-center space-x-2\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${AGENTS[activeAgent].color}`}>\n              <i className={`${AGENTS[activeAgent].icon} text-white text-sm`}></i>\n            </div>\n            <span>{AGENTS[activeAgent].name}</span>\n          </CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={startNewConversation}\n          >\n            Nueva Conversación\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col\">\n          {/* Messages Area */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n            {messages.length === 0 ? (\n              <div className=\"text-center text-gray-500 py-8\">\n                <i className={`${AGENTS[activeAgent].icon} text-4xl text-gray-400 mb-4`}></i>\n                <p>¡Hola! Soy tu {AGENTS[activeAgent].name.toLowerCase()}.</p>\n                <p className=\"text-sm mt-2\">{AGENTS[activeAgent].description}</p>\n              </div>\n            ) : (\n              messages.map((msg: Message) => (\n                <div key={msg.id} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`max-w-xs lg:max-w-md xl:max-w-lg ${msg.role === 'user' ? 'order-2' : 'order-1'}`}>\n                    <div className={`flex items-start space-x-2 ${msg.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>\n                      <Avatar className=\"w-8 h-8\">\n                        {msg.role === 'user' ? (\n                          <>\n                            <AvatarImage src={(user as any)?.profileImageUrl || undefined} />\n                            <AvatarFallback>{(user as any)?.firstName?.[0] || 'U'}</AvatarFallback>\n                          </>\n                        ) : (\n                          <AvatarFallback className={AGENTS[activeAgent].color}>\n                            <i className={`${AGENTS[activeAgent].icon} text-white text-xs`}></i>\n                          </AvatarFallback>\n                        )}\n                      </Avatar>\n                      <div className={`rounded-lg px-3 py-2 ${\n                        msg.role === 'user' \n                          ? 'bg-primary text-white' \n                          : 'bg-white border'\n                      }`}>\n                        <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {sendMessageMutation.isPending && (\n              <div className=\"flex justify-start\">\n                <div className=\"flex items-center space-x-2\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className={AGENTS[activeAgent].color}>\n                      <i className={`${AGENTS[activeAgent].icon} text-white text-xs`}></i>\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"bg-white border rounded-lg px-3 py-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          {/* Input Area */}\n          <div className=\"flex space-x-2\">\n            <Input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={`Escribe tu mensaje para ${AGENTS[activeAgent].name.toLowerCase()}...`}\n              className=\"flex-1\"\n              disabled={sendMessageMutation.isPending}\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending}\n            >\n              <i className=\"fas fa-paper-plane\"></i>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9323},"client/src/components/TravelInsightsSidebar.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { UserProfile, TravelSearch, SystemStats } from \"@/types/chat\";\n\ninterface TravelInsightsSidebarProps {\n  user?: UserProfile;\n}\n\nexport default function TravelInsightsSidebar({ user }: TravelInsightsSidebarProps) {\n  // Get user travel searches\n  const { data: recentSearches = [] } = useQuery({\n    queryKey: ['/api/travel-searches'],\n    enabled: !!user,\n  });\n\n  // Get user stats\n  const { data: userStats } = useQuery({\n    queryKey: ['/api/user/stats'],\n    enabled: !!user,\n  });\n\n  // Get system stats\n  const { data: systemStats } = useQuery({\n    queryKey: ['/api/system/stats'],\n    enabled: !!user,\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      {/* User Profile Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Perfil de Viajero</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user text-white\"></i>\n            </div>\n            <div>\n              <p className=\"font-medium\">{user?.firstName || 'Viajero'}</p>\n              <p className=\"text-sm text-gray-600\">{user?.email}</p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-2xl font-bold text-primary\">{userStats?.totalTrips || 0}</p>\n              <p className=\"text-xs text-gray-600\">Viajes</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-2xl font-bold text-secondary\">{userStats?.totalConversations || 0}</p>\n              <p className=\"text-xs text-gray-600\">Conversaciones</p>\n            </div>\n          </div>\n\n          {user?.travelStyle && (\n            <div>\n              <p className=\"text-sm font-medium text-gray-700 mb-2\">Estilo de Viaje</p>\n              <Badge variant=\"outline\">{user.travelStyle}</Badge>\n            </div>\n          )}\n\n          {user?.preferredDestinations && user.preferredDestinations.length > 0 && (\n            <div>\n              <p className=\"text-sm font-medium text-gray-700 mb-2\">Destinos Favoritos</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {user.preferredDestinations.slice(0, 3).map((dest, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {dest}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Searches */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Búsquedas Recientes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentSearches.length === 0 ? (\n            <p className=\"text-sm text-gray-500 text-center py-4\">\n              No hay búsquedas recientes\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {recentSearches.slice(0, 5).map((search: TravelSearch) => (\n                <div key={search.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"text-sm font-medium text-gray-900 mb-1\">\n                    {search.destination || 'Destino general'}\n                  </p>\n                  <p className=\"text-xs text-gray-600 truncate\">\n                    {search.query}\n                  </p>\n                  <div className=\"flex items-center justify-between mt-2\">\n                    {search.budget && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        ${search.budget}\n                      </Badge>\n                    )}\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(search.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Travel Tips */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Consejos de Viaje</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n              <p className=\"text-sm font-medium text-blue-900\">💡 Consejo del Día</p>\n              <p className=\"text-xs text-blue-800 mt-1\">\n                Reserva vuelos con al menos 2 meses de anticipación para obtener mejores precios.\n              </p>\n            </div>\n            \n            <div className=\"p-3 bg-green-50 rounded-lg border-l-4 border-green-500\">\n              <p className=\"text-sm font-medium text-green-900\">🌟 Recomendación</p>\n              <p className=\"text-xs text-green-800 mt-1\">\n                Viaja en temporada baja para evitar multitudes y precios elevados.\n              </p>\n            </div>\n            \n            <div className=\"p-3 bg-orange-50 rounded-lg border-l-4 border-orange-500\">\n              <p className=\"text-sm font-medium text-orange-900\">⚠️ Importante</p>\n              <p className=\"text-xs text-orange-800 mt-1\">\n                Siempre verifica los requisitos de visa antes de viajar.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* System Stats */}\n      {systemStats && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold\">Sistema</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 gap-3\">\n              <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                <p className=\"text-lg font-bold text-primary\">{systemStats.activeUsers}</p>\n                <p className=\"text-xs text-gray-600\">Usuarios Activos</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                <p className=\"text-lg font-bold text-secondary\">{systemStats.todayQueries}</p>\n                <p className=\"text-xs text-gray-600\">Consultas Hoy</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                <p className=\"text-lg font-bold text-accent\">{systemStats.totalTrips}</p>\n                <p className=\"text-xs text-gray-600\">Viajes Planificados</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6838},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  }\n): Promise<Response> {\n  const res = await fetch(url, {\n    method: options?.method || 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers,\n    },\n    body: options?.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1457},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/Header\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Building, \n  Calendar, \n  DollarSign, \n  TrendingUp, \n  Shield, \n  AlertTriangle,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport { User, BusinessProfile, Booking } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUserType, setSelectedUserType] = useState<string>(\"all\");\n\n  const { data: adminStats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!user,\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\", selectedUserType],\n    enabled: !!user,\n  });\n\n  const { data: businesses = [] } = useQuery({\n    queryKey: [\"/api/admin/businesses\"],\n    enabled: !!user,\n  });\n\n  const { data: bookings = [] } = useQuery({\n    queryKey: [\"/api/admin/bookings\"],\n    enabled: !!user,\n  });\n\n  const { data: systemLogs = [] } = useQuery({\n    queryKey: [\"/api/admin/logs\"],\n    enabled: !!user,\n  });\n\n  const verifyBusinessMutation = useMutation({\n    mutationFn: async ({ businessId, verified }: { businessId: string; verified: boolean }) => {\n      return await apiRequest(`/api/admin/businesses/${businessId}/verify`, \"PUT\", { verified });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/businesses\"] });\n      toast({\n        title: \"Negocio actualizado\",\n        description: \"El estado de verificación del negocio ha sido actualizado.\",\n      });\n    },\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async ({ userId, suspended }: { userId: string; suspended: boolean }) => {\n      return await apiRequest(`/api/admin/users/${userId}/suspend`, \"PUT\", { suspended });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Usuario actualizado\",\n        description: \"El estado del usuario ha sido actualizado.\",\n      });\n    },\n  });\n\n  const handleVerifyBusiness = (businessId: string, verified: boolean) => {\n    verifyBusinessMutation.mutate({ businessId, verified });\n  };\n\n  const handleSuspendUser = (userId: string, suspended: boolean) => {\n    suspendUserMutation.mutate({ userId, suspended });\n  };\n\n  const getUserTypeColor = (userType: string) => {\n    switch (userType) {\n      case \"traveler\": return \"bg-blue-100 text-blue-800\";\n      case \"business\": return \"bg-green-100 text-green-800\";\n      case \"admin\": return \"bg-purple-100 text-purple-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\";\n      case \"suspended\": return \"bg-red-100 text-red-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getLogLevelColor = (level: string) => {\n    switch (level) {\n      case \"info\": return \"bg-blue-100 text-blue-800\";\n      case \"warning\": return \"bg-yellow-100 text-yellow-800\";\n      case \"error\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Verificar que el usuario es admin\n  if (user?.userType !== \"admin\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Acceso Denegado</h1>\n          <p className=\"text-gray-600\">No tienes permisos para acceder al panel de administración.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header user={user} />\n      \n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Panel de Administración Sisa</h1>\n          <p className=\"text-gray-600 mt-2\">Gestiona usuarios, negocios y el sistema completo</p>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Usuarios Totales</p>\n                  <p className=\"text-2xl font-bold\">{adminStats?.totalUsers || 0}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Negocios</p>\n                  <p className=\"text-2xl font-bold\">{adminStats?.totalBusinesses || 0}</p>\n                </div>\n                <Building className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Reservas</p>\n                  <p className=\"text-2xl font-bold\">{adminStats?.totalBookings || 0}</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Ingresos</p>\n                  <p className=\"text-2xl font-bold\">${adminStats?.totalRevenue || 0}</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Crecimiento</p>\n                  <p className=\"text-2xl font-bold\">{adminStats?.monthlyGrowth || 0}%</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"users\">Usuarios</TabsTrigger>\n            <TabsTrigger value=\"businesses\">Negocios</TabsTrigger>\n            <TabsTrigger value=\"bookings\">Reservas</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Análisis</TabsTrigger>\n            <TabsTrigger value=\"logs\">Logs del Sistema</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Gestión de Usuarios</span>\n                  <Select value={selectedUserType} onValueChange={setSelectedUserType}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos los usuarios</SelectItem>\n                      <SelectItem value=\"traveler\">Viajeros</SelectItem>\n                      <SelectItem value=\"business\">Negocios</SelectItem>\n                      <SelectItem value=\"admin\">Administradores</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {users.map((user: User) => (\n                    <div key={user.id} className=\"border rounded-lg p-4 bg-white\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold\">{user.firstName} {user.lastName}</h3>\n                          <p className=\"text-sm text-gray-600\">{user.email}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Badge className={getUserTypeColor(user.userType)}>\n                            {user.userType}\n                          </Badge>\n                          <Badge className={getStatusColor(user.suspended ? \"suspended\" : \"active\")}>\n                            {user.suspended ? \"Suspendido\" : \"Activo\"}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"text-sm text-gray-600\">\n                          Registrado: {new Date(user.createdAt).toLocaleDateString()}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {!user.suspended ? (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleSuspendUser(user.id, true)}\n                              disabled={suspendUserMutation.isPending}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Suspender\n                            </Button>\n                          ) : (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => handleSuspendUser(user.id, false)}\n                              disabled={suspendUserMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Activar\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"businesses\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gestión de Negocios</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {businesses.map((business: BusinessProfile) => (\n                    <div key={business.id} className=\"border rounded-lg p-4 bg-white\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold\">{business.businessName}</h3>\n                          <p className=\"text-sm text-gray-600\">{business.businessType} • {business.location}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Badge className={business.isVerified ? \"bg-green-100 text-green-800\" : \"bg-yellow-100 text-yellow-800\"}>\n                            {business.isVerified ? \"Verificado\" : \"Pendiente\"}\n                          </Badge>\n                          <Badge>\n                            ⭐ {business.rating}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 mb-4\">{business.description}</p>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"text-sm text-gray-600\">\n                          {business.totalBookings} reservas • Rango: {business.priceRange}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {!business.isVerified ? (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => handleVerifyBusiness(business.id, true)}\n                              disabled={verifyBusinessMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Verificar\n                            </Button>\n                          ) : (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleVerifyBusiness(business.id, false)}\n                              disabled={verifyBusinessMutation.isPending}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Remover Verificación\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"bookings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Supervisión de Reservas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {bookings.map((booking: Booking) => (\n                    <div key={booking.id} className=\"border rounded-lg p-4 bg-white\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold\">{booking.serviceName}</h3>\n                          <p className=\"text-sm text-gray-600\">{booking.serviceType}</p>\n                        </div>\n                        <Badge className={getStatusColor(booking.status)}>\n                          {booking.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4\">\n                        <div>\n                          <strong>Fecha:</strong> {new Date(booking.serviceDate).toLocaleDateString()}\n                        </div>\n                        <div>\n                          <strong>Huéspedes:</strong> {booking.numberOfGuests}\n                        </div>\n                        <div>\n                          <strong>Monto:</strong> ${booking.totalAmount}\n                        </div>\n                        <div>\n                          <strong>Pago:</strong> {booking.paymentStatus}\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-sm text-gray-600\">\n                        Reserva realizada: {new Date(booking.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Análisis del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Usuarios Activos</h3>\n                      <p className=\"text-2xl font-bold text-blue-600\">{adminStats?.activeUsers || 0}</p>\n                      <p className=\"text-sm text-gray-600\">Últimos 30 días</p>\n                    </div>\n                    \n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Tasa de Conversión</h3>\n                      <p className=\"text-2xl font-bold text-green-600\">{adminStats?.conversionRate || 0}%</p>\n                      <p className=\"text-sm text-gray-600\">Búsquedas → Reservas</p>\n                    </div>\n                    \n                    <div className=\"bg-purple-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Satisfacción</h3>\n                      <p className=\"text-2xl font-bold text-purple-600\">{adminStats?.satisfaction || 0}/5</p>\n                      <p className=\"text-sm text-gray-600\">Calificación promedio</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Países con Más Usuarios</h3>\n                      <div className=\"space-y-2\">\n                        {adminStats?.topCountries?.map((country: any, index: number) => (\n                          <div key={index} className=\"flex justify-between\">\n                            <span>{country.name}</span>\n                            <span className=\"font-semibold\">{country.count}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Destinos Populares</h3>\n                      <div className=\"space-y-2\">\n                        {adminStats?.topDestinations?.map((destination: any, index: number) => (\n                          <div key={index} className=\"flex justify-between\">\n                            <span>{destination.name}</span>\n                            <span className=\"font-semibold\">{destination.searches}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"logs\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Logs del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {systemLogs.map((log: any) => (\n                    <div key={log.id} className=\"border rounded-lg p-4 bg-white\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className={getLogLevelColor(log.level)}>\n                              {log.level}\n                            </Badge>\n                            {log.level === \"error\" && <AlertTriangle className=\"h-4 w-4 text-red-500\" />}\n                            {log.agentType && (\n                              <Badge variant=\"outline\">{log.agentType}</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">{log.message}</p>\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {new Date(log.createdAt).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20438},"client/src/pages/admin.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { SystemStats, SystemLog } from \"@/types/chat\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<SystemStats>({\n    queryKey: [\"/api/admin/stats\"],\n    retry: false,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: logs, isLoading: logsLoading } = useQuery<SystemLog[]>({\n    queryKey: [\"/api/admin/logs\"],\n    retry: false,\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-light-gray flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-light-gray\">\n      <Header user={user} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-neutral\">Dashboard Administrativo</h1>\n          <p className=\"text-gray-600 mt-2\">Monitoreo y estadísticas del sistema Sisa AI</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-primary to-primary/80 text-white\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-primary-100\">\n                Usuarios Activos\n              </CardTitle>\n              <i className=\"fas fa-users text-2xl text-primary-200\"></i>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {statsLoading ? \"...\" : stats?.activeUsers || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-secondary to-secondary/80 text-white\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-secondary-100\">\n                Consultas Hoy\n              </CardTitle>\n              <i className=\"fas fa-comments text-2xl text-secondary-200\"></i>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {statsLoading ? \"...\" : stats?.todayQueries || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-accent to-accent/80 text-white\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-accent-100\">\n                Viajes Planificados\n              </CardTitle>\n              <i className=\"fas fa-plane text-2xl text-accent-200\"></i>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {statsLoading ? \"...\" : stats?.totalTrips || 0}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Agent Performance */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Rendimiento de Agentes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-search text-white text-sm\"></i>\n                  </div>\n                  <span className=\"font-medium text-neutral\">Investigador</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Progress value={92} className=\"w-24\" />\n                  <span className=\"text-sm text-neutral\">92%</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-calendar text-white text-sm\"></i>\n                  </div>\n                  <span className=\"font-medium text-neutral\">Planificador</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Progress value={88} className=\"w-24\" />\n                  <span className=\"text-sm text-neutral\">88%</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-star text-white text-sm\"></i>\n                  </div>\n                  <span className=\"font-medium text-neutral\">Recomendaciones</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Progress value={95} className=\"w-24\" />\n                  <span className=\"text-sm text-neutral\">95%</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-headset text-white text-sm\"></i>\n                  </div>\n                  <span className=\"font-medium text-neutral\">Atención al Cliente</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Progress value={90} className=\"w-24\" />\n                  <span className=\"text-sm text-neutral\">90%</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity Logs */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Actividad Reciente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {logsLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : logs && logs.length > 0 ? (\n                logs.slice(0, 10).map((log) => (\n                  <div key={log.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      log.level === 'error' ? 'bg-error/20' :\n                      log.level === 'warning' ? 'bg-warning/20' :\n                      'bg-primary/20'\n                    }`}>\n                      <i className={`fas ${\n                        log.agentType === 'research' ? 'fa-search' :\n                        log.agentType === 'planner' ? 'fa-calendar' :\n                        log.agentType === 'recommendations' ? 'fa-star' :\n                        log.agentType === 'customer-service' ? 'fa-headset' :\n                        'fa-info-circle'\n                      } text-sm ${\n                        log.level === 'error' ? 'text-error' :\n                        log.level === 'warning' ? 'text-warning' :\n                        'text-primary'\n                      }`}></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-neutral\">{log.message}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(log.createdAt).toLocaleString('es-ES')} | \n                        {log.agentType ? ` ${log.agentType}` : ''} | \n                        {log.level.toUpperCase()}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <i className=\"fas fa-clipboard-list text-4xl mb-4\"></i>\n                  <p>No hay actividad reciente para mostrar</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9509},"client/src/pages/business-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/Header\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, MapPin, Users, DollarSign, Star, Clock } from \"lucide-react\";\nimport { BusinessProfile, Booking, User } from \"@shared/schema\";\n\nexport default function BusinessDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n\n  const { data: businessProfile, isLoading: profileLoading } = useQuery({\n    queryKey: [\"/api/business/profile\"],\n    enabled: !!user,\n  });\n\n  const { data: bookings = [], isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/business/bookings\"],\n    enabled: !!user,\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/business/analytics\"],\n    enabled: !!user,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: Partial<BusinessProfile>) => {\n      return await apiRequest(`/api/business/profile`, \"PUT\", profileData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/business/profile\"] });\n      toast({\n        title: \"Perfil actualizado\",\n        description: \"Tu perfil de negocio ha sido actualizado exitosamente.\",\n      });\n      setIsEditingProfile(false);\n    },\n  });\n\n  const updateBookingMutation = useMutation({\n    mutationFn: async ({ bookingId, status }: { bookingId: string; status: string }) => {\n      return await apiRequest(`/api/business/bookings/${bookingId}`, \"PUT\", { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/business/bookings\"] });\n      toast({\n        title: \"Reserva actualizada\",\n        description: \"El estado de la reserva ha sido actualizado.\",\n      });\n    },\n  });\n\n  const handleUpdateBooking = (bookingId: string, status: string) => {\n    updateBookingMutation.mutate({ bookingId, status });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"confirmed\": return \"bg-green-100 text-green-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      case \"completed\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (profileLoading) {\n    return <div>Cargando panel de negocio...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header user={user} />\n      \n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Panel de Negocio</h1>\n          <p className=\"text-gray-600 mt-2\">Gestiona tu negocio turístico y reservas</p>\n        </div>\n\n        {/* Analytics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Reservas Totales</p>\n                  <p className=\"text-2xl font-bold\">{analytics?.totalBookings || 0}</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Ingresos Mensuales</p>\n                  <p className=\"text-2xl font-bold\">${analytics?.monthlyRevenue || 0}</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Calificación</p>\n                  <p className=\"text-2xl font-bold\">{businessProfile?.rating || 0}</p>\n                </div>\n                <Star className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Clientes</p>\n                  <p className=\"text-2xl font-bold\">{analytics?.totalClients || 0}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"bookings\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"bookings\">Reservas</TabsTrigger>\n            <TabsTrigger value=\"profile\">Perfil del Negocio</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Análisis</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"bookings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gestión de Reservas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {bookingsLoading ? (\n                  <div>Cargando reservas...</div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {bookings.map((booking: Booking) => (\n                      <div key={booking.id} className=\"border rounded-lg p-4 bg-white\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h3 className=\"font-semibold\">{booking.serviceName}</h3>\n                            <p className=\"text-sm text-gray-600\">{booking.serviceType}</p>\n                          </div>\n                          <Badge className={getStatusColor(booking.status)}>\n                            {booking.status}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 mr-2\" />\n                            {new Date(booking.serviceDate).toLocaleDateString()}\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Users className=\"h-4 w-4 mr-2\" />\n                            {booking.numberOfGuests} huéspedes\n                          </div>\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"h-4 w-4 mr-2\" />\n                            ${booking.totalAmount}\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Clock className=\"h-4 w-4 mr-2\" />\n                            {new Date(booking.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                        \n                        {booking.specialRequests && (\n                          <p className=\"text-sm text-gray-600 mt-2\">\n                            <strong>Solicitudes especiales:</strong> {booking.specialRequests}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex gap-2 mt-4\">\n                          {booking.status === \"pending\" && (\n                            <>\n                              <Button \n                                size=\"sm\" \n                                onClick={() => handleUpdateBooking(booking.id, \"confirmed\")}\n                                disabled={updateBookingMutation.isPending}\n                              >\n                                Confirmar\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                onClick={() => handleUpdateBooking(booking.id, \"cancelled\")}\n                                disabled={updateBookingMutation.isPending}\n                              >\n                                Cancelar\n                              </Button>\n                            </>\n                          )}\n                          {booking.status === \"confirmed\" && (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => handleUpdateBooking(booking.id, \"completed\")}\n                              disabled={updateBookingMutation.isPending}\n                            >\n                              Marcar como Completado\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"profile\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Perfil del Negocio</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {businessProfile ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"businessName\">Nombre del Negocio</Label>\n                        <Input\n                          id=\"businessName\"\n                          value={businessProfile.businessName}\n                          readOnly={!isEditingProfile}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"businessType\">Tipo de Negocio</Label>\n                        <Select value={businessProfile.businessType} disabled={!isEditingProfile}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"hotel\">Hotel</SelectItem>\n                            <SelectItem value=\"restaurant\">Restaurante</SelectItem>\n                            <SelectItem value=\"tour_operator\">Operador de Tours</SelectItem>\n                            <SelectItem value=\"transport\">Transporte</SelectItem>\n                            <SelectItem value=\"attraction\">Atracción</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"description\">Descripción</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={businessProfile.description || \"\"}\n                        readOnly={!isEditingProfile}\n                        rows={3}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"location\">Ubicación</Label>\n                        <Input\n                          id=\"location\"\n                          value={businessProfile.location || \"\"}\n                          readOnly={!isEditingProfile}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"priceRange\">Rango de Precios</Label>\n                        <Select value={businessProfile.priceRange || \"\"} disabled={!isEditingProfile}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"budget\">Económico</SelectItem>\n                            <SelectItem value=\"mid-range\">Medio</SelectItem>\n                            <SelectItem value=\"luxury\">Lujo</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      {!isEditingProfile ? (\n                        <Button onClick={() => setIsEditingProfile(true)}>\n                          Editar Perfil\n                        </Button>\n                      ) : (\n                        <>\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => setIsEditingProfile(false)}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button \n                            onClick={() => updateProfileMutation.mutate(businessProfile)}\n                            disabled={updateProfileMutation.isPending}\n                          >\n                            Guardar Cambios\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-600 mb-4\">No tienes un perfil de negocio configurado</p>\n                    <Button onClick={() => setIsEditingProfile(true)}>\n                      Crear Perfil de Negocio\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Análisis de Rendimiento</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Reservas por Mes</h3>\n                      <p className=\"text-2xl font-bold text-blue-600\">{analytics?.monthlyBookings || 0}</p>\n                      <p className=\"text-sm text-gray-600\">+15% vs mes anterior</p>\n                    </div>\n                    \n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Tasa de Ocupación</h3>\n                      <p className=\"text-2xl font-bold text-green-600\">{analytics?.occupancyRate || 0}%</p>\n                      <p className=\"text-sm text-gray-600\">Promedio mensual</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                    <h3 className=\"font-semibold mb-2\">Clientes Habituales</h3>\n                    <p className=\"text-2xl font-bold text-yellow-600\">{analytics?.returningClients || 0}</p>\n                    <p className=\"text-sm text-gray-600\">Clientes que han reservado más de una vez</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16110},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport AgentsSidebar from \"@/components/AgentsSidebar\";\nimport MainChatInterface from \"@/components/MainChatInterface\";\nimport TravelInsightsSidebar from \"@/components/TravelInsightsSidebar\";\nimport AdminDashboard from \"@/components/AdminDashboard\";\nimport { AgentType } from \"@/types/agents\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const [activeAgent, setActiveAgent] = useState<AgentType>('research');\n  const [showAdminModal, setShowAdminModal] = useState(false);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-light-gray flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-light-gray\">\n      <Header user={user} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <AgentsSidebar activeAgent={activeAgent} onAgentChange={setActiveAgent} />\n          <MainChatInterface activeAgent={activeAgent} />\n          <TravelInsightsSidebar user={user} />\n        </div>\n      </div>\n\n      {/* Admin Modal */}\n      <AdminDashboard \n        isOpen={showAdminModal} \n        onClose={() => setShowAdminModal(false)} \n      />\n\n      {/* Fixed Admin Access Button */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        <button \n          onClick={() => setShowAdminModal(true)}\n          className=\"bg-neutral text-white w-14 h-14 rounded-full shadow-lg hover:bg-neutral/90 transition-all transform hover:scale-110 flex items-center justify-center\"\n        >\n          <i className=\"fas fa-cog text-xl\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2011},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-secondary/5\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-md shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <i className=\"fas fa-brain text-2xl text-primary mr-2\"></i>\n                <h1 className=\"text-2xl font-bold text-neutral\">Sisa AI</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <select className=\"bg-gray-100 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary\">\n                  <option>Español</option>\n                  <option>English</option>\n                </select>\n              </div>\n              <Button onClick={() => window.location.href = '/api/login'} className=\"bg-primary hover:bg-primary/90\">\n                Iniciar Sesión\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-6xl font-bold text-neutral mb-6\">\n              Tu Agente de Viajes\n              <span className=\"text-primary\"> Definitivo</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n              Experiencia hiper-personalizada con inteligencia artificial avanzada. \n              Sistema multiagente que planifica, investiga y recomienda todo lo que necesitas para tu viaje perfecto.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={() => window.location.href = '/api/login'} \n                className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 text-lg\"\n              >\n                Comenzar Ahora\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"border-primary text-primary hover:bg-primary/10 px-8 py-4 text-lg\"\n              >\n                Ver Demo\n              </Button>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n            <Card className=\"border-primary/20 hover:border-primary/50 transition-colors\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-search text-primary text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Investigación IA</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Busca destinos con información actualizada y verificada usando tecnología RAG.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-secondary/20 hover:border-secondary/50 transition-colors\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-calendar text-secondary text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Planificación</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Itinerarios personalizados día a día adaptados a tus preferencias y presupuesto.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-accent/20 hover:border-accent/50 transition-colors\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-star text-accent text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Recomendaciones</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Sugerencias hiper-personalizadas de hoteles, restaurantes y actividades.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-purple-500/20 hover:border-purple-500/50 transition-colors\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-12 h-12 bg-purple-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-headset text-purple-500 text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Soporte 24/7</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Atención al cliente inteligente disponible las 24 horas, los 7 días de la semana.\n                </CardDescription>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Technology Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-neutral mb-4\">Tecnología de Vanguardia</h3>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Impulsado por las últimas innovaciones en inteligencia artificial y arquitectura multiagente.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-brain text-primary text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-neutral mb-2\">LangGraph</h4>\n              <p className=\"text-gray-600\">Sistema multiagente avanzado para orquestación inteligente de tareas.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-database text-secondary text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-neutral mb-2\">RAG + Pinecone</h4>\n              <p className=\"text-gray-600\">Generación aumentada con recuperación para información precisa y actualizada.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-robot text-accent text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-neutral mb-2\">GPT-4</h4>\n              <p className=\"text-gray-600\">Modelo de lenguaje más avanzado para conversaciones naturales y precisas.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-primary to-secondary text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h3 className=\"text-3xl font-bold mb-4\">¿Listo para tu próxima aventura?</h3>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Únete a miles de viajeros que ya confían en Sisa AI para planificar sus viajes perfectos.\n          </p>\n          <Button \n            onClick={() => window.location.href = '/api/login'} \n            className=\"bg-white text-primary hover:bg-gray-100 px-8 py-4 text-lg font-semibold\"\n          >\n            Comenzar Gratis\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-neutral text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <i className=\"fas fa-brain text-2xl text-primary mr-2\"></i>\n                <h5 className=\"text-xl font-bold\">Sisa AI</h5>\n              </div>\n              <p className=\"text-gray-400\">\n                Tu agente de viajes inteligente para experiencias inolvidables.\n              </p>\n            </div>\n            <div>\n              <h6 className=\"font-semibold mb-4\">Producto</h6>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Características</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Precios</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">API</a></li>\n              </ul>\n            </div>\n            <div>\n              <h6 className=\"font-semibold mb-4\">Empresa</h6>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Sobre Nosotros</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Blog</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Carreras</a></li>\n              </ul>\n            </div>\n            <div>\n              <h6 className=\"font-semibold mb-4\">Soporte</h6>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Documentación</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contacto</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Estado</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 Sisa AI. Todos los derechos reservados.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10547},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/traveler-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport AgentsSidebar from \"@/components/AgentsSidebar\";\nimport MainChatInterface from \"@/components/MainChatInterface\";\nimport TravelInsightsSidebar from \"@/components/TravelInsightsSidebar\";\nimport EcuadorTourismSidebar from \"@/components/EcuadorTourismSidebar\";\nimport { AgentType } from \"@/types/agents\";\nimport { User } from \"@shared/schema\";\n\nexport default function TravelerDashboard() {\n  const { user } = useAuth();\n  const [activeAgent, setActiveAgent] = useState<AgentType>(\"research\");\n\n  const { data: userProfile } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Agents Sidebar */}\n      <div className=\"w-64 bg-white border-r border-gray-200\">\n        <AgentsSidebar \n          activeAgent={activeAgent}\n          onAgentChange={setActiveAgent}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <Header user={userProfile} />\n\n        {/* Chat Interface */}\n        <div className=\"flex-1 flex\">\n          <div className=\"flex-1\">\n            <MainChatInterface activeAgent={activeAgent} />\n          </div>\n          \n          {/* Travel Insights Sidebar */}\n          <div className=\"w-80 bg-white border-l border-gray-200 flex flex-col\">\n            <div className=\"flex-1 p-4 overflow-y-auto\">\n              <EcuadorTourismSidebar />\n            </div>\n            <div className=\"border-t p-4\">\n              <TravelInsightsSidebar user={userProfile} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1850},"client/src/types/agents.ts":{"content":"export type AgentType = 'research' | 'planner' | 'recommendations' | 'customer-service';\n\nexport interface Agent {\n  type: AgentType;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  status: 'active' | 'standby' | 'offline';\n}\n\nexport interface AgentResponse {\n  content: string;\n  nextAgent?: AgentType;\n  metadata?: any;\n  shouldEnd?: boolean;\n}\n\nexport interface AgentContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n  conversationHistory: Array<{ role: string; content: string; agentType?: string }>;\n  currentAgent: AgentType;\n}\n\nexport const AGENTS: Record<AgentType, Agent> = {\n  research: {\n    type: 'research',\n    name: 'Investigador',\n    description: 'Búsqueda de destinos',\n    icon: 'fas fa-search',\n    color: 'bg-primary',\n    status: 'standby',\n  },\n  planner: {\n    type: 'planner',\n    name: 'Planificador',\n    description: 'Creación de itinerarios',\n    icon: 'fas fa-calendar',\n    color: 'bg-secondary',\n    status: 'standby',\n  },\n  recommendations: {\n    type: 'recommendations',\n    name: 'Recomendaciones',\n    description: 'Sugerencias personalizadas',\n    icon: 'fas fa-star',\n    color: 'bg-accent',\n    status: 'standby',\n  },\n  'customer-service': {\n    type: 'customer-service',\n    name: 'Atención al Cliente',\n    description: 'Soporte 24/7',\n    icon: 'fas fa-headset',\n    color: 'bg-purple-500',\n    status: 'standby',\n  },\n};\n","size_bytes":1420},"client/src/types/chat.ts":{"content":"export interface Message {\n  id: string;\n  conversationId: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  agentType?: string;\n  metadata?: any;\n  createdAt: string;\n}\n\nexport interface Conversation {\n  id: string;\n  userId: string;\n  title: string;\n  activeAgent: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ChatState {\n  currentConversation: Conversation | null;\n  messages: Message[];\n  isLoading: boolean;\n  typingAgent?: string;\n  activeAgent: string;\n}\n\nexport interface TravelSearch {\n  id: string;\n  userId: string;\n  query: string;\n  destination?: string;\n  budget?: number;\n  duration?: number;\n  travelDate?: string;\n  preferences?: any;\n  results?: any;\n  createdAt: string;\n}\n\nexport interface UserProfile {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  travelStyle?: string;\n  preferredDestinations?: string[];\n  languagePreference?: string;\n  totalTrips?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface SystemStats {\n  activeUsers: number;\n  todayQueries: number;\n  totalTrips: number;\n}\n\nexport interface SystemLog {\n  id: string;\n  level: string;\n  message: string;\n  agentType?: string;\n  userId?: string;\n  metadata?: any;\n  createdAt: string;\n}\n","size_bytes":1295},"server/services/agents/customerServiceAgent.ts":{"content":"// Customer Service Agent - Specialized for user support and assistance\nimport { openaiService } from '../openai';\nimport { pineconeService } from '../pinecone';\nimport { storage } from '../../storage';\n\nexport interface SupportRequest {\n  query: string;\n  category?: 'booking' | 'technical' | 'general' | 'complaint' | 'information';\n  urgency?: 'low' | 'medium' | 'high';\n  language?: 'es' | 'en';\n}\n\nexport interface SupportContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n  conversationHistory: Array<{ role: string; content: string; agentType?: string }>;\n  currentIssue?: string;\n}\n\nexport class CustomerServiceAgent {\n  async handleSupportRequest(request: SupportRequest, context: SupportContext): Promise<any> {\n    try {\n      // Step 1: Classify the request\n      const classification = await this.classifyRequest(request.query);\n      \n      // Step 2: Check if we have relevant information in our knowledge base\n      const relevantInfo = await pineconeService.searchSimilar(\n        `customer service ${request.query} ${classification.category}`,\n        3\n      );\n      \n      // Step 3: Get user's recent activity for context\n      const userContext = await this.getUserContext(context.userId);\n      \n      // Step 4: Generate appropriate response\n      const response = await this.generateResponse(\n        request,\n        context,\n        classification,\n        relevantInfo,\n        userContext\n      );\n      \n      // Step 5: Log the support interaction\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Customer service agent handled ${classification.category} request`,\n        agentType: 'customer-service',\n        userId: context.userId,\n        metadata: {\n          category: classification.category,\n          urgency: classification.urgency,\n          resolved: classification.canResolve,\n          language: request.language || 'es',\n        },\n      });\n      \n      return {\n        response: response.content,\n        category: classification.category,\n        resolved: classification.canResolve,\n        followUpActions: response.followUpActions,\n        escalationNeeded: !classification.canResolve,\n        confidence: classification.confidence,\n      };\n    } catch (error) {\n      await storage.createSystemLog({\n        level: 'error',\n        message: `Customer service agent error: ${(error as Error).message}`,\n        agentType: 'customer-service',\n        userId: context.userId,\n        metadata: { query: request.query },\n      });\n      \n      throw error;\n    }\n  }\n\n  private async classifyRequest(query: string): Promise<any> {\n    const lowerQuery = query.toLowerCase();\n    \n    // Rule-based classification\n    const classifications = {\n      booking: ['reserva', 'booking', 'cancelar', 'cancel', 'cambiar', 'change', 'voucher'],\n      technical: ['error', 'no funciona', 'not working', 'bug', 'problem', 'problema'],\n      information: ['información', 'information', 'help', 'ayuda', 'como', 'how'],\n      complaint: ['complaint', 'queja', 'malo', 'bad', 'terrible', 'horrible'],\n      general: ['general', 'otros', 'other']\n    };\n    \n    let category = 'general';\n    let confidence = 0.5;\n    \n    // Find the best matching category\n    for (const [cat, keywords] of Object.entries(classifications)) {\n      const matches = keywords.filter(keyword => lowerQuery.includes(keyword));\n      if (matches.length > 0) {\n        category = cat;\n        confidence = Math.min(0.9, 0.5 + (matches.length * 0.2));\n        break;\n      }\n    }\n    \n    // Determine urgency\n    const urgentKeywords = ['urgent', 'urgente', 'emergency', 'emergencia', 'help', 'ayuda'];\n    const urgency = urgentKeywords.some(keyword => lowerQuery.includes(keyword)) ? 'high' : 'medium';\n    \n    // Determine if we can resolve this\n    const canResolve = category !== 'complaint' && confidence > 0.7;\n    \n    return {\n      category,\n      urgency,\n      confidence,\n      canResolve,\n      suggestedActions: this.getSuggestedActions(category),\n    };\n  }\n\n  private async getUserContext(userId: string): Promise<any> {\n    try {\n      const userSearches = await storage.getUserTravelSearches(userId, 5);\n      const userStats = await storage.getUserStats(userId);\n      \n      return {\n        recentSearches: userSearches,\n        totalTrips: userStats.totalTrips,\n        isNewUser: userStats.totalTrips === 0,\n        recentActivity: userSearches.length > 0 ? userSearches[0] : null,\n      };\n    } catch (error) {\n      return {\n        recentSearches: [],\n        totalTrips: 0,\n        isNewUser: true,\n        recentActivity: null,\n      };\n    }\n  }\n\n  private async generateResponse(\n    request: SupportRequest,\n    context: SupportContext,\n    classification: any,\n    relevantInfo: any[],\n    userContext: any\n  ): Promise<any> {\n    // Build context for OpenAI\n    const systemContext = `You are a helpful customer service agent for Sisa AI, a travel assistance platform. \n    \n    User Profile: ${JSON.stringify(context.userProfile || {})}\n    Request Category: ${classification.category}\n    User Context: ${JSON.stringify(userContext)}\n    \n    Relevant Information: ${relevantInfo.map(info => info.content).join('\\n')}\n    \n    Language: ${request.language || 'es'}\n    \n    Provide helpful, professional support. Be empathetic and solution-oriented.`;\n    \n    const response = await openaiService.handleCustomerService(request.query, {\n      userId: context.userId,\n      conversationHistory: context.conversationHistory,\n      userProfile: context.userProfile,\n    });\n    \n    // Generate follow-up actions based on category\n    const followUpActions = this.generateFollowUpActions(classification.category, userContext);\n    \n    return {\n      content: response,\n      followUpActions,\n      category: classification.category,\n    };\n  }\n\n  private getSuggestedActions(category: string): string[] {\n    const actions = {\n      booking: [\n        'Check booking status',\n        'Provide booking reference',\n        'Contact booking partner',\n        'Offer modification options',\n      ],\n      technical: [\n        'Check system status',\n        'Provide troubleshooting steps',\n        'Collect error details',\n        'Escalate to technical team',\n      ],\n      information: [\n        'Provide relevant documentation',\n        'Suggest helpful resources',\n        'Offer guided assistance',\n        'Direct to appropriate agent',\n      ],\n      complaint: [\n        'Acknowledge concern',\n        'Collect detailed feedback',\n        'Offer compensation if appropriate',\n        'Escalate to management',\n      ],\n      general: [\n        'Provide general assistance',\n        'Offer relevant suggestions',\n        'Guide to specific resources',\n        'Follow up as needed',\n      ],\n    };\n    \n    return actions[category as keyof typeof actions] || actions.general;\n  }\n\n  private generateFollowUpActions(category: string, userContext: any): any[] {\n    const actions = [];\n    \n    switch (category) {\n      case 'booking':\n        actions.push({\n          type: 'check_booking',\n          label: 'Check Booking Status',\n          description: 'Verify current booking status',\n        });\n        break;\n        \n      case 'technical':\n        actions.push({\n          type: 'system_status',\n          label: 'Check System Status',\n          description: 'Verify if there are any known issues',\n        });\n        break;\n        \n      case 'information':\n        if (userContext.isNewUser) {\n          actions.push({\n            type: 'onboarding',\n            label: 'Start Tutorial',\n            description: 'Get familiar with Sisa AI features',\n          });\n        }\n        break;\n        \n      case 'complaint':\n        actions.push({\n          type: 'escalate',\n          label: 'Escalate to Manager',\n          description: 'Forward to customer service manager',\n        });\n        break;\n    }\n    \n    // Common follow-up actions\n    actions.push({\n      type: 'contact_support',\n      label: 'Contact Human Support',\n      description: 'Speak with a human representative',\n    });\n    \n    return actions;\n  }\n\n  async handleFollowUp(\n    actionType: string,\n    context: SupportContext,\n    additionalData?: any\n  ): Promise<any> {\n    try {\n      let response;\n      \n      switch (actionType) {\n        case 'check_booking':\n          response = await this.checkBookingStatus(context.userId, additionalData);\n          break;\n          \n        case 'system_status':\n          response = await this.checkSystemStatus();\n          break;\n          \n        case 'escalate':\n          response = await this.escalateToManager(context, additionalData);\n          break;\n          \n        case 'contact_support':\n          response = await this.initiateHumanSupport(context);\n          break;\n          \n        default:\n          response = {\n            message: 'Follow-up action completed',\n            status: 'success',\n          };\n      }\n      \n      // Log the follow-up action\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Customer service follow-up: ${actionType}`,\n        agentType: 'customer-service',\n        userId: context.userId,\n        metadata: { actionType, additionalData },\n      });\n      \n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async checkBookingStatus(userId: string, bookingRef?: string): Promise<any> {\n    // Simulate booking check\n    const userSearches = await storage.getUserTravelSearches(userId, 1);\n    \n    return {\n      message: 'Booking status checked',\n      status: 'confirmed',\n      bookingReference: bookingRef || 'SIS-' + Date.now(),\n      details: userSearches[0] || null,\n    };\n  }\n\n  private async checkSystemStatus(): Promise<any> {\n    // Simulate system status check\n    return {\n      message: 'All systems operational',\n      status: 'operational',\n      lastChecked: new Date().toISOString(),\n      services: {\n        'Search Engine': 'operational',\n        'Booking System': 'operational',\n        'AI Agents': 'operational',\n      },\n    };\n  }\n\n  private async escalateToManager(context: SupportContext, issue?: string): Promise<any> {\n    // Simulate escalation\n    await storage.createSystemLog({\n      level: 'warning',\n      message: `Support escalation requested: ${issue || 'Unspecified issue'}`,\n      agentType: 'customer-service',\n      userId: context.userId,\n      metadata: { escalationType: 'manager', issue },\n    });\n    \n    return {\n      message: 'Your case has been escalated to our management team',\n      status: 'escalated',\n      ticketNumber: 'ESC-' + Date.now(),\n      expectedResponse: '24 hours',\n    };\n  }\n\n  private async initiateHumanSupport(context: SupportContext): Promise<any> {\n    // Simulate human support initiation\n    return {\n      message: 'Connecting you with a human representative',\n      status: 'queued',\n      estimatedWaitTime: '5-10 minutes',\n      queuePosition: 3,\n    };\n  }\n}\n\nexport const customerServiceAgent = new CustomerServiceAgent();\n","size_bytes":11078},"server/services/agents/plannerAgent.ts":{"content":"// Planner Agent - Specialized for creating detailed travel itineraries\nimport { openaiService } from '../openai';\nimport { pineconeService } from '../pinecone';\nimport { storage } from '../../storage';\n\nexport interface PlanningRequest {\n  destination: string;\n  duration: number;\n  budget: string;\n  interests: string[];\n  travelStyle: string;\n  groupSize?: number;\n  accommodationType?: string;\n  startDate?: string;\n}\n\nexport interface PlanningContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n  previousSearches?: any[];\n}\n\nexport class PlannerAgent {\n  async createItinerary(request: PlanningRequest, context: PlanningContext): Promise<any> {\n    try {\n      // Step 1: Get destination-specific information from RAG\n      const destinationInfo = await pineconeService.getDestinationInfo(request.destination);\n      const seasonalAdvice = await pineconeService.getSeasonalAdvice(\n        request.destination, \n        request.startDate || 'current'\n      );\n      const travelTips = await pineconeService.getTravelTips(request.destination);\n      \n      // Step 2: Combine RAG context\n      const ragContext = [...destinationInfo, ...seasonalAdvice, ...travelTips]\n        .map(r => `${r.content} (Source: ${r.metadata.source})`)\n        .join('\\n\\n');\n      \n      // Step 3: Analyze user's travel history for personalization\n      const userInsights = await this.analyzeUserTravelHistory(context.userId);\n      \n      // Step 4: Create detailed itinerary using OpenAI\n      const itinerary = await openaiService.createItinerary(\n        request.destination,\n        request.duration,\n        request.budget,\n        request.interests\n      );\n      \n      // Step 5: Enhance itinerary with RAG insights and personalization\n      const enhancedItinerary = await this.enhanceItinerary(itinerary, ragContext, userInsights);\n      \n      // Step 6: Store the itinerary\n      await storage.createTravelSearch({\n        userId: context.userId,\n        query: `Itinerary for ${request.destination}`,\n        destination: request.destination,\n        budget: parseFloat(request.budget.replace(/[^0-9.]/g, '')),\n        duration: request.duration,\n        travelDate: request.startDate ? new Date(request.startDate) : undefined,\n        preferences: {\n          interests: request.interests,\n          travelStyle: request.travelStyle,\n          groupSize: request.groupSize,\n          accommodationType: request.accommodationType,\n        },\n        results: enhancedItinerary,\n      });\n      \n      // Step 7: Log the planning activity\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Planner agent created itinerary for ${request.destination}`,\n        agentType: 'planner',\n        userId: context.userId,\n        metadata: {\n          destination: request.destination,\n          duration: request.duration,\n          budget: request.budget,\n          activitiesCount: this.countActivities(enhancedItinerary),\n          personalizationApplied: userInsights.personalizedElements.length > 0,\n        },\n      });\n      \n      return enhancedItinerary;\n    } catch (error) {\n      await storage.createSystemLog({\n        level: 'error',\n        message: `Planner agent error: ${(error as Error).message}`,\n        agentType: 'planner',\n        userId: context.userId,\n        metadata: { destination: request.destination },\n      });\n      \n      throw error;\n    }\n  }\n\n  private async analyzeUserTravelHistory(userId: string): Promise<any> {\n    try {\n      const userSearches = await storage.getUserTravelSearches(userId, 10);\n      const userStats = await storage.getUserStats(userId);\n      \n      // Analyze patterns in user's travel history\n      const destinations = userSearches.map(s => s.destination).filter(Boolean);\n      const budgetPatterns = userSearches.map(s => s.budget).filter(Boolean);\n      const durationPatterns = userSearches.map(s => s.duration).filter(Boolean);\n      \n      const insights = {\n        favoriteDestinations: this.getMostFrequent(destinations),\n        averageBudget: budgetPatterns.length > 0 ? \n          budgetPatterns.reduce((a, b) => a + b!, 0) / budgetPatterns.length : 0,\n        averageDuration: durationPatterns.length > 0 ? \n          durationPatterns.reduce((a, b) => a + b!, 0) / durationPatterns.length : 0,\n        travelFrequency: userStats.totalTrips,\n        personalizedElements: [] as string[],\n      };\n      \n      // Generate personalized recommendations based on history\n      if (insights.favoriteDestinations.length > 0) {\n        insights.personalizedElements.push(`Based on your previous interest in ${insights.favoriteDestinations.join(', ')}`);\n      }\n      \n      if (insights.averageBudget > 0) {\n        insights.personalizedElements.push(`Considering your typical budget range of $${insights.averageBudget.toFixed(0)}`);\n      }\n      \n      return insights;\n    } catch (error) {\n      return {\n        favoriteDestinations: [],\n        averageBudget: 0,\n        averageDuration: 0,\n        travelFrequency: 0,\n        personalizedElements: [],\n      };\n    }\n  }\n\n  private async enhanceItinerary(baseItinerary: any, ragContext: string, userInsights: any): Promise<any> {\n    const enhanced = { ...baseItinerary };\n    \n    // Add RAG-sourced local insights\n    enhanced.localInsights = this.extractLocalInsights(ragContext);\n    \n    // Add personalized recommendations\n    enhanced.personalizedTips = userInsights.personalizedElements;\n    \n    // Enhance each day with local context\n    if (enhanced.itinerary) {\n      enhanced.itinerary = enhanced.itinerary.map((day: any) => {\n        return {\n          ...day,\n          localTips: this.getLocalTipsForDay(day, ragContext),\n          weatherAdvice: this.getWeatherAdvice(day, ragContext),\n        };\n      });\n    }\n    \n    // Add transportation recommendations\n    enhanced.transportation = this.generateTransportationAdvice(ragContext);\n    \n    // Add packing suggestions\n    enhanced.packingList = this.generatePackingList(baseItinerary, ragContext);\n    \n    return enhanced;\n  }\n\n  private extractLocalInsights(ragContext: string): string[] {\n    // Extract key local insights from RAG context\n    const insights = [];\n    \n    if (ragContext.includes('tipping') || ragContext.includes('propina')) {\n      insights.push('Local tipping customs and etiquette');\n    }\n    \n    if (ragContext.includes('transport') || ragContext.includes('metro') || ragContext.includes('bus')) {\n      insights.push('Public transportation recommendations');\n    }\n    \n    if (ragContext.includes('visa') || ragContext.includes('passport')) {\n      insights.push('Entry requirements and documentation');\n    }\n    \n    if (ragContext.includes('currency') || ragContext.includes('money')) {\n      insights.push('Currency and payment methods');\n    }\n    \n    return insights;\n  }\n\n  private getLocalTipsForDay(day: any, ragContext: string): string[] {\n    const tips = [];\n    \n    // Extract relevant tips based on activities\n    if (day.activities) {\n      day.activities.forEach((activity: any) => {\n        if (activity.location && ragContext.includes(activity.location.toLowerCase())) {\n          tips.push(`Local tip for ${activity.location}: Check opening hours in advance`);\n        }\n      });\n    }\n    \n    return tips;\n  }\n\n  private getWeatherAdvice(day: any, ragContext: string): string {\n    // Extract weather-related advice from RAG context\n    const weatherKeywords = ['weather', 'climate', 'rain', 'sun', 'temperature'];\n    const weatherInfo = weatherKeywords.find(keyword => ragContext.toLowerCase().includes(keyword));\n    \n    if (weatherInfo) {\n      return `Weather consideration: Check local conditions for outdoor activities`;\n    }\n    \n    return 'Check weather forecast for optimal planning';\n  }\n\n  private generateTransportationAdvice(ragContext: string): any {\n    return {\n      publicTransport: ragContext.includes('metro') || ragContext.includes('bus') ? \n        'Public transportation is recommended' : 'Consider alternative transport options',\n      walkingFriendly: ragContext.includes('walking') || ragContext.includes('pedestrian') ? \n        'This destination is very walkable' : 'Some areas may require transportation',\n      recommendations: [\n        'Download local transport apps',\n        'Consider day passes for public transport',\n        'Keep emergency contact for taxi services',\n      ],\n    };\n  }\n\n  private generatePackingList(itinerary: any, ragContext: string): any {\n    const packingList = {\n      essentials: ['Passport', 'Travel insurance', 'Phone charger'],\n      clothing: ['Comfortable walking shoes'],\n      activities: [] as string[],\n      weather: [] as string[],\n    };\n    \n    // Add activity-specific items\n    if (itinerary.itinerary) {\n      itinerary.itinerary.forEach((day: any) => {\n        if (day.activities) {\n          day.activities.forEach((activity: any) => {\n            if (activity.activity.toLowerCase().includes('hiking')) {\n              packingList.activities.push('Hiking boots', 'Backpack');\n            }\n            if (activity.activity.toLowerCase().includes('swimming')) {\n              packingList.activities.push('Swimwear', 'Sunscreen');\n            }\n          });\n        }\n      });\n    }\n    \n    // Add weather-specific items\n    if (ragContext.includes('rain')) {\n      packingList.weather.push('Rain jacket', 'Umbrella');\n    }\n    if (ragContext.includes('sun')) {\n      packingList.weather.push('Sun hat', 'Sunglasses');\n    }\n    \n    return packingList;\n  }\n\n  private getMostFrequent(items: string[]): string[] {\n    const frequency = items.reduce((acc, item) => {\n      acc[item] = (acc[item] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return Object.entries(frequency)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 3)\n      .map(([item]) => item);\n  }\n\n  private countActivities(itinerary: any): number {\n    if (!itinerary.itinerary) return 0;\n    \n    return itinerary.itinerary.reduce((count: number, day: any) => {\n      return count + (day.activities ? day.activities.length : 0);\n    }, 0);\n  }\n\n  async optimizeItinerary(itineraryId: string, feedback: string, context: PlanningContext): Promise<any> {\n    try {\n      // This would optimize an existing itinerary based on user feedback\n      // For now, we'll log the optimization request\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Itinerary optimization requested: ${feedback}`,\n        agentType: 'planner',\n        userId: context.userId,\n        metadata: { itineraryId, feedback },\n      });\n      \n      return {\n        message: 'Itinerary optimization is being processed',\n        status: 'pending',\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport const plannerAgent = new PlannerAgent();\n","size_bytes":10843},"server/services/agents/recommendationAgent.ts":{"content":"// Recommendation Agent - Specialized for personalized travel recommendations\nimport { openaiService } from '../openai';\nimport { pineconeService } from '../pinecone';\nimport { storage } from '../../storage';\n\nexport interface RecommendationRequest {\n  destination: string;\n  category?: 'hotels' | 'restaurants' | 'activities' | 'attractions' | 'all';\n  budget?: string;\n  preferences?: {\n    cuisine?: string[];\n    accommodationType?: string;\n    activityLevel?: string;\n    groupSize?: number;\n  };\n}\n\nexport interface RecommendationContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n  currentItinerary?: any;\n}\n\nexport class RecommendationAgent {\n  async getRecommendations(request: RecommendationRequest, context: RecommendationContext): Promise<any> {\n    try {\n      // Step 1: Analyze user profile for personalization\n      const userInsights = await this.analyzeUserPreferences(context.userId);\n      \n      // Step 2: Get relevant information from RAG\n      const ragResults = await pineconeService.searchSimilar(\n        `${request.destination} ${request.category || 'travel'} recommendations`,\n        5\n      );\n      \n      // Step 3: Build user preference profile\n      const userPreferences = {\n        travelStyle: context.userProfile?.travelStyle || userInsights.inferredTravelStyle,\n        budget: request.budget || userInsights.averageBudget,\n        interests: userInsights.interests,\n        previousTrips: userInsights.visitedDestinations,\n      };\n      \n      // Step 4: Get personalized recommendations from OpenAI\n      const recommendations = await openaiService.getPersonalizedRecommendations(\n        request.destination,\n        userPreferences\n      );\n      \n      // Step 5: Enhance recommendations with RAG data\n      const enhancedRecommendations = await this.enhanceRecommendations(\n        recommendations,\n        ragResults,\n        request.category\n      );\n      \n      // Step 6: Apply smart filtering based on context\n      const filteredRecommendations = this.applySmartFiltering(\n        enhancedRecommendations,\n        request,\n        context\n      );\n      \n      // Step 7: Log the recommendation activity\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Recommendations agent provided suggestions for ${request.destination}`,\n        agentType: 'recommendations',\n        userId: context.userId,\n        metadata: {\n          destination: request.destination,\n          category: request.category,\n          recommendationCount: filteredRecommendations.recommendations.length,\n          personalizationScore: userInsights.personalizationScore,\n        },\n      });\n      \n      return filteredRecommendations;\n    } catch (error) {\n      await storage.createSystemLog({\n        level: 'error',\n        message: `Recommendations agent error: ${(error as Error).message}`,\n        agentType: 'recommendations',\n        userId: context.userId,\n        metadata: { destination: request.destination },\n      });\n      \n      throw error;\n    }\n  }\n\n  private async analyzeUserPreferences(userId: string): Promise<any> {\n    try {\n      const userSearches = await storage.getUserTravelSearches(userId, 15);\n      const userStats = await storage.getUserStats(userId);\n      \n      // Analyze travel patterns\n      const destinations = userSearches.map(s => s.destination).filter(Boolean);\n      const budgets = userSearches.map(s => s.budget).filter(Boolean);\n      const preferences = userSearches.map(s => s.preferences).filter(Boolean);\n      \n      // Infer travel style from history\n      const travelStyles = preferences.map(p => p?.travelStyle).filter(Boolean);\n      const interests = preferences.flatMap(p => p?.interests || []).filter(Boolean);\n      \n      const insights = {\n        visitedDestinations: destinations,\n        averageBudget: budgets.length > 0 ? \n          budgets.reduce((a, b) => a + b!, 0) / budgets.length : 2000,\n        inferredTravelStyle: this.getMostFrequent(travelStyles)[0] || 'cultural',\n        interests: this.getMostFrequent(interests),\n        experienceLevel: userStats.totalTrips > 5 ? 'experienced' : 'beginner',\n        personalizationScore: Math.min(userSearches.length * 0.1, 1.0),\n        preferredCategories: this.inferPreferredCategories(preferences),\n      };\n      \n      return insights;\n    } catch (error) {\n      return {\n        visitedDestinations: [],\n        averageBudget: 2000,\n        inferredTravelStyle: 'cultural',\n        interests: ['culture', 'food'],\n        experienceLevel: 'beginner',\n        personalizationScore: 0.1,\n        preferredCategories: ['all'],\n      };\n    }\n  }\n\n  private async enhanceRecommendations(\n    baseRecommendations: any,\n    ragResults: any[],\n    category?: string\n  ): Promise<any> {\n    const enhanced = { ...baseRecommendations };\n    \n    // Add RAG-sourced local insights\n    enhanced.localInsights = ragResults\n      .filter(r => r.score > 0.8)\n      .map(r => ({\n        content: r.content,\n        source: r.metadata.source,\n        category: r.metadata.category,\n        relevanceScore: r.score,\n      }));\n    \n    // Enhance each recommendation with RAG data\n    if (enhanced.recommendations) {\n      enhanced.recommendations = enhanced.recommendations.map((rec: any) => {\n        // Find relevant RAG information for this recommendation\n        const relevantRag = ragResults.find(r => \n          r.content.toLowerCase().includes(rec.name.toLowerCase()) ||\n          r.metadata.category === rec.type\n        );\n        \n        if (relevantRag) {\n          rec.additionalInfo = relevantRag.content;\n          rec.dataSource = relevantRag.metadata.source;\n          rec.lastUpdated = relevantRag.metadata.lastUpdated;\n          rec.verificationScore = relevantRag.score;\n        }\n        \n        // Add booking simulation data\n        rec.bookingInfo = this.generateBookingInfo(rec);\n        \n        return rec;\n      });\n    }\n    \n    // Add category-specific insights\n    enhanced.categoryInsights = this.generateCategoryInsights(category, ragResults);\n    \n    return enhanced;\n  }\n\n  private applySmartFiltering(\n    recommendations: any,\n    request: RecommendationRequest,\n    context: RecommendationContext\n  ): any {\n    const filtered = { ...recommendations };\n    \n    if (filtered.recommendations) {\n      // Filter by category if specified\n      if (request.category && request.category !== 'all') {\n        filtered.recommendations = filtered.recommendations.filter(\n          (rec: any) => rec.type === request.category\n        );\n      }\n      \n      // Filter by budget if specified\n      if (request.budget) {\n        const budgetLevel = this.getBudgetLevel(request.budget);\n        filtered.recommendations = filtered.recommendations.filter(\n          (rec: any) => this.matchesBudget(rec.priceRange, budgetLevel)\n        );\n      }\n      \n      // Apply preference filtering\n      if (request.preferences) {\n        filtered.recommendations = this.filterByPreferences(\n          filtered.recommendations,\n          request.preferences\n        );\n      }\n      \n      // Sort by relevance and quality\n      filtered.recommendations.sort((a: any, b: any) => {\n        const aScore = (a.rating || 0) + (a.verificationScore || 0);\n        const bScore = (b.rating || 0) + (b.verificationScore || 0);\n        return bScore - aScore;\n      });\n      \n      // Limit to top recommendations\n      filtered.recommendations = filtered.recommendations.slice(0, 10);\n    }\n    \n    return filtered;\n  }\n\n  private generateBookingInfo(recommendation: any): any {\n    // Simulate booking information\n    const bookingInfo = {\n      availability: 'Available',\n      bookingUrl: '#',\n      priceRange: recommendation.priceRange,\n      lastUpdated: new Date().toISOString(),\n    };\n    \n    // Add type-specific booking info\n    switch (recommendation.type) {\n      case 'hotel':\n        bookingInfo.priceRange = '$150-300/night';\n        bookingInfo.availability = 'Check availability';\n        break;\n      case 'restaurant':\n        bookingInfo.priceRange = '$25-50/person';\n        bookingInfo.availability = 'Reservations recommended';\n        break;\n      case 'activity':\n        bookingInfo.priceRange = '$30-80/person';\n        bookingInfo.availability = 'Book in advance';\n        break;\n      case 'attraction':\n        bookingInfo.priceRange = '$15-40/person';\n        bookingInfo.availability = 'Open daily';\n        break;\n    }\n    \n    return bookingInfo;\n  }\n\n  private generateCategoryInsights(category: string | undefined, ragResults: any[]): any {\n    const insights = {\n      category: category || 'all',\n      tips: [] as string[],\n      trends: [] as string[],\n      localAdvice: [] as string[],\n    };\n    \n    // Generate category-specific tips\n    switch (category) {\n      case 'hotels':\n        insights.tips.push('Book accommodations in advance for better rates');\n        insights.tips.push('Consider location vs. price when choosing');\n        break;\n      case 'restaurants':\n        insights.tips.push('Make reservations for popular restaurants');\n        insights.tips.push('Try local specialties for authentic experience');\n        break;\n      case 'activities':\n        insights.tips.push('Book activities in advance to avoid disappointment');\n        insights.tips.push('Check weather conditions for outdoor activities');\n        break;\n      case 'attractions':\n        insights.tips.push('Visit popular attractions early to avoid crowds');\n        insights.tips.push('Look for combination tickets for multiple sites');\n        break;\n    }\n    \n    // Extract trends from RAG data\n    ragResults.forEach(result => {\n      if (result.content.includes('popular') || result.content.includes('trending')) {\n        insights.trends.push(result.content.slice(0, 100) + '...');\n      }\n    });\n    \n    return insights;\n  }\n\n  private getBudgetLevel(budget: string): 'low' | 'medium' | 'high' {\n    const amount = parseFloat(budget.replace(/[^0-9.]/g, ''));\n    \n    if (amount < 1000) return 'low';\n    if (amount < 3000) return 'medium';\n    return 'high';\n  }\n\n  private matchesBudget(priceRange: string, budgetLevel: string): boolean {\n    const priceLevel = priceRange.split('$').length - 1; // Count $ symbols\n    \n    switch (budgetLevel) {\n      case 'low':\n        return priceLevel <= 2;\n      case 'medium':\n        return priceLevel <= 3;\n      case 'high':\n        return true;\n      default:\n        return true;\n    }\n  }\n\n  private filterByPreferences(recommendations: any[], preferences: any): any[] {\n    return recommendations.filter(rec => {\n      // Filter by cuisine type for restaurants\n      if (preferences.cuisine && rec.type === 'restaurant') {\n        return preferences.cuisine.some((cuisine: string) => \n          rec.description.toLowerCase().includes(cuisine.toLowerCase())\n        );\n      }\n      \n      // Filter by accommodation type for hotels\n      if (preferences.accommodationType && rec.type === 'hotel') {\n        return rec.description.toLowerCase().includes(\n          preferences.accommodationType.toLowerCase()\n        );\n      }\n      \n      // Filter by activity level\n      if (preferences.activityLevel && rec.type === 'activity') {\n        const isHighActivity = rec.description.toLowerCase().includes('adventure') ||\n                               rec.description.toLowerCase().includes('hiking') ||\n                               rec.description.toLowerCase().includes('sports');\n        \n        return preferences.activityLevel === 'high' ? isHighActivity : !isHighActivity;\n      }\n      \n      return true;\n    });\n  }\n\n  private getMostFrequent(items: string[]): string[] {\n    const frequency = items.reduce((acc, item) => {\n      acc[item] = (acc[item] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return Object.entries(frequency)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([item]) => item);\n  }\n\n  private inferPreferredCategories(preferences: any[]): string[] {\n    const categories = ['hotels', 'restaurants', 'activities', 'attractions'];\n    // In a real implementation, this would analyze user behavior\n    return categories;\n  }\n\n  async getRecommendationDetails(recommendationId: string, context: RecommendationContext): Promise<any> {\n    try {\n      // This would fetch detailed information about a specific recommendation\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Recommendation details requested: ${recommendationId}`,\n        agentType: 'recommendations',\n        userId: context.userId,\n        metadata: { recommendationId },\n      });\n      \n      return {\n        id: recommendationId,\n        detailedInfo: 'Detailed recommendation information would be provided here',\n        bookingOptions: [],\n        reviews: [],\n        similarRecommendations: [],\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport const recommendationAgent = new RecommendationAgent();\n","size_bytes":13002},"server/services/agents/researchAgent.ts":{"content":"// Research Agent - Specialized for destination research and travel data gathering\nimport { openaiService } from '../openai';\nimport { ecuadorTourismService } from '../ecuadorTourismService';\nimport { pineconeService } from '../pinecone';\nimport { storage } from '../../storage';\n\nexport interface ResearchQuery {\n  query: string;\n  budget?: string;\n  duration?: number;\n  travelStyle?: string;\n  interests?: string[];\n  timeOfYear?: string;\n}\n\nexport interface ResearchContext {\n  userId: string;\n  conversationId: string;\n  userProfile?: any;\n}\n\nexport class ResearchAgent {\n  async processQuery(query: ResearchQuery, context: ResearchContext): Promise<any> {\n    try {\n      // Step 1: Use RAG to get relevant travel information\n      const ragResults = await pineconeService.searchSimilar(query.query, 5);\n      const ragContext = ragResults.map(r => `${r.content} (Source: ${r.metadata.source})`).join('\\n\\n');\n      \n      // Step 2: Get additional context based on query type\n      let additionalContext = '';\n      if (query.timeOfYear) {\n        const seasonalInfo = await pineconeService.getSeasonalAdvice(query.query, query.timeOfYear);\n        additionalContext += '\\n\\nSeasonal Information:\\n' + seasonalInfo.map(s => s.content).join('\\n');\n      }\n      \n      // Step 3: Obtener información específica de destinos ecuatorianos\n      const ecuadorDestinations = await ecuadorTourismService.searchDestination(query.query);\n      \n      // Step 4: Get research results from OpenAI with enhanced context\n      const enhancedQuery = `${query.query}\\n\\nAdditional Context:\\n${ragContext}${additionalContext}\\n\\nDestinos de Ecuador relevantes:\\n${ecuadorDestinations.map(d => `- ${d.name}: ${d.excerpt}`).join('\\n')}`;\n      const researchResult = await openaiService.searchDestinations(\n        enhancedQuery,\n        query.budget,\n        query.duration\n      );\n\n      // Step 4: Store the search for analytics and user history\n      await storage.createTravelSearch({\n        userId: context.userId,\n        query: query.query,\n        destination: this.extractMainDestination(researchResult),\n        budget: query.budget ? parseFloat(query.budget.replace(/[^0-9.]/g, '')) : undefined,\n        duration: query.duration,\n        preferences: {\n          travelStyle: query.travelStyle,\n          interests: query.interests,\n          timeOfYear: query.timeOfYear,\n        },\n        results: researchResult,\n      });\n\n      // Step 5: Log the research activity\n      await storage.createSystemLog({\n        level: 'info',\n        message: `Research agent processed query: ${query.query}`,\n        agentType: 'research',\n        userId: context.userId,\n        metadata: {\n          destinationCount: researchResult.destinations.length,\n          ragSourcesUsed: ragResults.length,\n          queryType: this.classifyQuery(query.query),\n        },\n      });\n\n      // Step 6: Enhance results with RAG insights\n      const enhancedResult = this.enhanceWithRagInsights(researchResult, ragResults);\n      \n      return enhancedResult;\n    } catch (error) {\n      await storage.createSystemLog({\n        level: 'error',\n        message: `Research agent error: ${(error as Error).message}`,\n        agentType: 'research',\n        userId: context.userId,\n        metadata: { query: query.query },\n      });\n      \n      throw error;\n    }\n  }\n\n  private extractMainDestination(researchResult: any): string | undefined {\n    if (researchResult.destinations && researchResult.destinations.length > 0) {\n      return researchResult.destinations[0].name;\n    }\n    return undefined;\n  }\n\n  private classifyQuery(query: string): string {\n    const lowerQuery = query.toLowerCase();\n    \n    if (lowerQuery.includes('budget') || lowerQuery.includes('cheap') || lowerQuery.includes('barato')) {\n      return 'budget-focused';\n    }\n    \n    if (lowerQuery.includes('luxury') || lowerQuery.includes('lujo') || lowerQuery.includes('premium')) {\n      return 'luxury-focused';\n    }\n    \n    if (lowerQuery.includes('adventure') || lowerQuery.includes('aventura') || lowerQuery.includes('extreme')) {\n      return 'adventure-focused';\n    }\n    \n    if (lowerQuery.includes('cultural') || lowerQuery.includes('cultura') || lowerQuery.includes('history')) {\n      return 'cultural-focused';\n    }\n    \n    if (lowerQuery.includes('beach') || lowerQuery.includes('playa') || lowerQuery.includes('ocean')) {\n      return 'beach-focused';\n    }\n    \n    return 'general-inquiry';\n  }\n\n  private enhanceWithRagInsights(researchResult: any, ragResults: any[]): any {\n    const enhancedResult = { ...researchResult };\n    \n    // Add RAG-sourced insights\n    const ragInsights = ragResults\n      .filter(r => r.score > 0.8) // Only high-confidence results\n      .map(r => `${r.content.slice(0, 200)}... (Source: ${r.metadata.source})`);\n    \n    enhancedResult.ragInsights = ragInsights;\n    \n    // Enhance destinations with RAG data\n    if (enhancedResult.destinations) {\n      enhancedResult.destinations = enhancedResult.destinations.map((dest: any) => {\n        const relevantRag = ragResults.find(r => \n          r.metadata.location && \n          dest.name.toLowerCase().includes(r.metadata.location.toLowerCase())\n        );\n        \n        if (relevantRag) {\n          return {\n            ...dest,\n            additionalInfo: relevantRag.content,\n            dataSource: relevantRag.metadata.source,\n            lastUpdated: relevantRag.metadata.lastUpdated,\n          };\n        }\n        \n        return dest;\n      });\n    }\n    \n    return enhancedResult;\n  }\n\n  async getDestinationDetails(destination: string, context: ResearchContext): Promise<any> {\n    try {\n      // Get specific destination information from RAG\n      const destinationInfo = await pineconeService.getDestinationInfo(destination);\n      const travelTips = await pineconeService.getTravelTips(destination);\n      \n      // Combine RAG results\n      const ragContext = [...destinationInfo, ...travelTips]\n        .map(r => r.content)\n        .join('\\n\\n');\n      \n      // Get detailed information from OpenAI\n      const detailedInfo = await openaiService.searchDestinations(\n        `Provide detailed information about ${destination}. Include practical travel advice, local customs, transportation, and current travel conditions.\\n\\nAdditional context:\\n${ragContext}`,\n        undefined,\n        undefined\n      );\n      \n      return detailedInfo;\n    } catch (error) {\n      await storage.createSystemLog({\n        level: 'error',\n        message: `Research agent destination details error: ${(error as Error).message}`,\n        agentType: 'research',\n        userId: context.userId,\n      });\n      \n      throw error;\n    }\n  }\n}\n\nexport const researchAgent = new ResearchAgent();\n","size_bytes":6763},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1404},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3833},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}